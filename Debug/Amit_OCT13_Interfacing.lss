
Amit_OCT13_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00000ae4  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002388  00000000  00000000  00000ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000019dc  00000000  00000000  00002f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 70 05 	jmp	0xae0	; 0xae0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <Led_Init>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 9b 03 	call	0x736	; 0x736 <Ext_Interrupt_Enable>
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	63 e0       	ldi	r22, 0x03	; 3
  94:	0e 94 c1 03 	call	0x782	; 0x782 <Ext_Interrupt_SncControl>
  98:	0e 94 de 03 	call	0x7bc	; 0x7bc <GINT_EnableAllInterrupts>
  9c:	c0 e9       	ldi	r28, 0x90	; 144
  9e:	d1 e0       	ldi	r29, 0x01	; 1
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 34 03 	call	0x668	; 0x668 <Led_Toggle>
  a6:	28 e8       	ldi	r18, 0x88	; 136
  a8:	33 e1       	ldi	r19, 0x13	; 19
  aa:	ce 01       	movw	r24, r28
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x2a>
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	d1 f7       	brne	.-12     	; 0xaa <main+0x28>
  b6:	f4 cf       	rjmp	.-24     	; 0xa0 <main+0x1e>

000000b8 <__vector_1>:
#include "GINT_Interface.h"
#include "Ext_INT_Interface.h"
#include <avr/interrupt.h>

ISR(INT0_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	4f 93       	push	r20
  c8:	5f 93       	push	r21
  ca:	6f 93       	push	r22
  cc:	7f 93       	push	r23
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
  d2:	af 93       	push	r26
  d4:	bf 93       	push	r27
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	Led_Toggle(LED0);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 34 03 	call	0x668	; 0x668 <Led_Toggle>
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__vector_1+0x28>

000000e2 <Keypad_Get_Row>:

static s8 Keypad_Get_Row(void)
{
	s8 loc_Row = -1;

	if (Dio_Read_Channel(DIO_PORTC,DIO_PIN0) == DIO_LOW)
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Dio_Read_Channel>
  ea:	88 23       	and	r24, r24
  ec:	09 f4       	brne	.+2      	; 0xf0 <Keypad_Get_Row+0xe>
	else
	{
		/*	Do Nothing	*/
	}
return loc_Row;
}
  ee:	08 95       	ret

	if (Dio_Read_Channel(DIO_PORTC,DIO_PIN0) == DIO_LOW)
	{
		loc_Row = 0;
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN1) == DIO_LOW)
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Dio_Read_Channel>
  f8:	88 23       	and	r24, r24
  fa:	11 f4       	brne	.+4      	; 0x100 <Keypad_Get_Row+0x1e>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	08 95       	ret
	{
		loc_Row = 1;
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN2) == DIO_LOW)
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Dio_Read_Channel>
 108:	88 23       	and	r24, r24
 10a:	11 f4       	brne	.+4      	; 0x110 <Keypad_Get_Row+0x2e>
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	08 95       	ret
		{
			loc_Row = 2;
		}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN3) == DIO_LOW)
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	63 e0       	ldi	r22, 0x03	; 3
 114:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Dio_Read_Channel>
 118:	88 23       	and	r24, r24
 11a:	11 f4       	brne	.+4      	; 0x120 <Keypad_Get_Row+0x3e>
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	08 95       	ret
 120:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		/*	Do Nothing	*/
	}
return loc_Row;
}
 122:	08 95       	ret

00000124 <Keypad_Init>:
}

void Keypad_Init(void)
{
	/*	Configure Rows Pins as Input	*/
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN0, DIO_INPUT);
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN1, DIO_INPUT);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN2, DIO_INPUT);
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	62 e0       	ldi	r22, 0x02	; 2
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN3, DIO_INPUT);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	63 e0       	ldi	r22, 0x03	; 3
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>

	/*	Enable Pull Up Resistor For Rows Channels	*/
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN0);
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	0e 94 60 05 	call	0xac0	; 0xac0 <Dio_PullUp_Enable>
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN1);
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	0e 94 60 05 	call	0xac0	; 0xac0 <Dio_PullUp_Enable>
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN2);
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	0e 94 60 05 	call	0xac0	; 0xac0 <Dio_PullUp_Enable>
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN3);
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	63 e0       	ldi	r22, 0x03	; 3
 168:	0e 94 60 05 	call	0xac0	; 0xac0 <Dio_PullUp_Enable>

	/*	Configure Columns Pins as Output	*/
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	64 e0       	ldi	r22, 0x04	; 4
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	65 e0       	ldi	r22, 0x05	; 5
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	66 e0       	ldi	r22, 0x06	; 6
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	67 e0       	ldi	r22, 0x07	; 7
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>

	/*	Initialize all Columns Outputs with zeros	*/
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_LOW);
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_LOW);
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	65 e0       	ldi	r22, 0x05	; 5
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_LOW);
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	66 e0       	ldi	r22, 0x06	; 6
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_LOW);
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	67 e0       	ldi	r22, 0x07	; 7
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
}
 1bc:	08 95       	ret

000001be <Keypad_Read>:



u8 Keypad_Read(void)
{
 1be:	1f 93       	push	r17
	s8 loc_Row = -1;
	s8 loc_Col = -1;
	u8 loc_button;

	Keypad_Init();
 1c0:	0e 94 92 00 	call	0x124	; 0x124 <Keypad_Init>
};


static boolean Keypad_Is_Pressed(void)
{
	if (
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Dio_Read_Channel>
 1cc:	88 23       	and	r24, r24
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <Keypad_Read+0x14>
 1d0:	7a c0       	rjmp	.+244    	; 0x2c6 <Keypad_Read+0x108>
	u8 loc_button;

	Keypad_Init();
	if(Keypad_Is_Pressed() == TRUE)
	{
		loc_Row = Keypad_Get_Row();
 1d2:	0e 94 71 00 	call	0xe2	; 0xe2 <Keypad_Get_Row>
 1d6:	18 2f       	mov	r17, r24
}

static s8 Keypad_Get_Column(s8 current_row)
{
	s8 Loc_Column = -1;
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_LOW);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	65 e0       	ldi	r22, 0x05	; 5
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	66 e0       	ldi	r22, 0x06	; 6
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	67 e0       	ldi	r22, 0x07	; 7
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>

	if (Keypad_Get_Row() == current_row)
 200:	0e 94 71 00 	call	0xe2	; 0xe2 <Keypad_Get_Row>
 204:	18 17       	cp	r17, r24
 206:	09 f4       	brne	.+2      	; 0x20a <Keypad_Read+0x4c>
 208:	4d c0       	rjmp	.+154    	; 0x2a4 <Keypad_Read+0xe6>
	{
		Loc_Column = 0;
		return Loc_Column;
	}

	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	64 e0       	ldi	r22, 0x04	; 4
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_LOW);
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	65 e0       	ldi	r22, 0x05	; 5
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	66 e0       	ldi	r22, 0x06	; 6
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	67 e0       	ldi	r22, 0x07	; 7
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>

	if (Keypad_Get_Row() == current_row)
 232:	0e 94 71 00 	call	0xe2	; 0xe2 <Keypad_Get_Row>
 236:	18 17       	cp	r17, r24
 238:	09 f4       	brne	.+2      	; 0x23c <Keypad_Read+0x7e>
 23a:	5f c0       	rjmp	.+190    	; 0x2fa <Keypad_Read+0x13c>
	{
		Loc_Column = 1;
		return Loc_Column;
	}

	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	64 e0       	ldi	r22, 0x04	; 4
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	65 e0       	ldi	r22, 0x05	; 5
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_LOW);
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	66 e0       	ldi	r22, 0x06	; 6
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	67 e0       	ldi	r22, 0x07	; 7
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>

	if (Keypad_Get_Row() == current_row)
 264:	0e 94 71 00 	call	0xe2	; 0xe2 <Keypad_Get_Row>
 268:	18 17       	cp	r17, r24
 26a:	09 f4       	brne	.+2      	; 0x26e <Keypad_Read+0xb0>
 26c:	43 c0       	rjmp	.+134    	; 0x2f4 <Keypad_Read+0x136>
	{
		Loc_Column = 2;
		return Loc_Column;
	}

	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	64 e0       	ldi	r22, 0x04	; 4
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	65 e0       	ldi	r22, 0x05	; 5
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	66 e0       	ldi	r22, 0x06	; 6
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_LOW);
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	67 e0       	ldi	r22, 0x07	; 7
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>

	if (Keypad_Get_Row() == current_row)
 296:	0e 94 71 00 	call	0xe2	; 0xe2 <Keypad_Get_Row>
 29a:	18 17       	cp	r17, r24
 29c:	89 f5       	brne	.+98     	; 0x300 <Keypad_Read+0x142>
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <Keypad_Read+0xea>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_LOW);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);

	if (Keypad_Get_Row() == current_row)
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
	Keypad_Init();
	if(Keypad_Is_Pressed() == TRUE)
	{
		loc_Row = Keypad_Get_Row();
		loc_Col = Keypad_Get_Column(loc_Row);
		loc_button = Keypad_Layout[loc_Row][loc_Col];
 2a8:	e1 2f       	mov	r30, r17
 2aa:	ff 27       	eor	r31, r31
 2ac:	e7 fd       	sbrc	r30, 7
 2ae:	f0 95       	com	r31
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	e8 0f       	add	r30, r24
 2ba:	f9 1f       	adc	r31, r25
 2bc:	e0 5a       	subi	r30, 0xA0	; 160
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	80 81       	ld	r24, Z
	else
	{
		return 0xFF;
	}
	return loc_button;
}
 2c2:	1f 91       	pop	r17
 2c4:	08 95       	ret
};


static boolean Keypad_Is_Pressed(void)
{
	if (
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Dio_Read_Channel>
 2ce:	88 23       	and	r24, r24
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <Keypad_Read+0x116>
 2d2:	7f cf       	rjmp	.-258    	; 0x1d2 <Keypad_Read+0x14>
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Dio_Read_Channel>
 2dc:	88 23       	and	r24, r24
 2de:	09 f4       	brne	.+2      	; 0x2e2 <Keypad_Read+0x124>
 2e0:	78 cf       	rjmp	.-272    	; 0x1d2 <Keypad_Read+0x14>
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Dio_Read_Channel>
 2ea:	88 23       	and	r24, r24
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <Keypad_Read+0x132>
 2ee:	71 cf       	rjmp	.-286    	; 0x1d2 <Keypad_Read+0x14>
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	e7 cf       	rjmp	.-50     	; 0x2c2 <Keypad_Read+0x104>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_LOW);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);

	if (Keypad_Get_Row() == current_row)
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	d7 cf       	rjmp	.-82     	; 0x2a8 <Keypad_Read+0xea>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_LOW);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);

	if (Keypad_Get_Row() == current_row)
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	d4 cf       	rjmp	.-88     	; 0x2a8 <Keypad_Read+0xea>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_LOW);

	if (Keypad_Get_Row() == current_row)
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	9f ef       	ldi	r25, 0xFF	; 255
 304:	d1 cf       	rjmp	.-94     	; 0x2a8 <Keypad_Read+0xea>

00000306 <SSD_Display>:
	Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_LOW);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_LOW);
}

void SSD_Display(u8 num)
{
 306:	0f 93       	push	r16
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	08 2f       	mov	r16, r24
	u8 loc_SSD_First_Digit = (num%10)<<4;
	u8 loc_SSD_Second_Digit = (num/10)<<4;

	if (num <= 99)
 30e:	84 36       	cpi	r24, 0x64	; 100
 310:	90 f5       	brcc	.+100    	; 0x376 <SSD_Display+0x70>
	{
		/*	Enable SSD1	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_HIGH);
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
		/*	Disable SSD2	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_LOW);
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	62 e0       	ldi	r22, 0x02	; 2
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
		/*	Write First Digit	*/
		Dio_Write_Channel_Group(DIO_PORTA, 0xF0, loc_SSD_First_Digit);
 326:	80 2f       	mov	r24, r16
 328:	6a e0       	ldi	r22, 0x0A	; 10
 32a:	0e 94 64 05 	call	0xac8	; 0xac8 <__udivmodqi4>
 32e:	92 95       	swap	r25
 330:	90 7f       	andi	r25, 0xF0	; 240
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	60 ef       	ldi	r22, 0xF0	; 240
 336:	49 2f       	mov	r20, r25
 338:	0e 94 3b 05 	call	0xa76	; 0xa76 <Dio_Write_Channel_Group>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 33c:	c0 ea       	ldi	r28, 0xA0	; 160
 33e:	df e0       	ldi	r29, 0x0F	; 15
 340:	ce 01       	movw	r24, r28
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <SSD_Display+0x3c>
		_delay_ms(1);

		/*	Disable SSD1	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_LOW);
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
		/*	Enable SSD2	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_HIGH);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
		/*	Write Second Digit	*/
		Dio_Write_Channel_Group(DIO_PORTA, 0xF0, loc_SSD_Second_Digit);
 35a:	80 2f       	mov	r24, r16
 35c:	6a e0       	ldi	r22, 0x0A	; 10
 35e:	0e 94 64 05 	call	0xac8	; 0xac8 <__udivmodqi4>
 362:	48 2f       	mov	r20, r24
 364:	42 95       	swap	r20
 366:	40 7f       	andi	r20, 0xF0	; 240
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	60 ef       	ldi	r22, 0xF0	; 240
 36c:	0e 94 3b 05 	call	0xa76	; 0xa76 <Dio_Write_Channel_Group>
 370:	ce 01       	movw	r24, r28
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <SSD_Display+0x6c>
	}
	else
	{
		/*	Do Nothing	*/
	}
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	0f 91       	pop	r16
 37c:	08 95       	ret

0000037e <SSD_Display_With_Delay>:
void SSD_Display_With_Delay(u8 num,u32 delay)
{
 37e:	9f 92       	push	r9
 380:	af 92       	push	r10
 382:	bf 92       	push	r11
 384:	cf 92       	push	r12
 386:	df 92       	push	r13
 388:	ef 92       	push	r14
 38a:	ff 92       	push	r15
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	98 2e       	mov	r9, r24
 396:	5a 01       	movw	r10, r20
 398:	6b 01       	movw	r12, r22
	u32 count = 0;
	for (count =0; count<delay; count+=3)
 39a:	41 15       	cp	r20, r1
 39c:	51 05       	cpc	r21, r1
 39e:	61 05       	cpc	r22, r1
 3a0:	71 05       	cpc	r23, r1
 3a2:	c1 f0       	breq	.+48     	; 0x3d4 <SSD_Display_With_Delay+0x56>
 3a4:	ee 24       	eor	r14, r14
 3a6:	ff 24       	eor	r15, r15
 3a8:	87 01       	movw	r16, r14
 3aa:	c0 ea       	ldi	r28, 0xA0	; 160
 3ac:	df e0       	ldi	r29, 0x0F	; 15
	{
		SSD_Display(num);
 3ae:	89 2d       	mov	r24, r9
 3b0:	0e 94 83 01 	call	0x306	; 0x306 <SSD_Display>
 3b4:	ce 01       	movw	r24, r28
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <SSD_Display_With_Delay+0x38>
	}
}
void SSD_Display_With_Delay(u8 num,u32 delay)
{
	u32 count = 0;
	for (count =0; count<delay; count+=3)
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	a0 e0       	ldi	r26, 0x00	; 0
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	e8 0e       	add	r14, r24
 3c4:	f9 1e       	adc	r15, r25
 3c6:	0a 1f       	adc	r16, r26
 3c8:	1b 1f       	adc	r17, r27
 3ca:	ea 14       	cp	r14, r10
 3cc:	fb 04       	cpc	r15, r11
 3ce:	0c 05       	cpc	r16, r12
 3d0:	1d 05       	cpc	r17, r13
 3d2:	68 f3       	brcs	.-38     	; 0x3ae <SSD_Display_With_Delay+0x30>
	{
		SSD_Display(num);
		_delay_ms(1);
	}
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	df 90       	pop	r13
 3e2:	cf 90       	pop	r12
 3e4:	bf 90       	pop	r11
 3e6:	af 90       	pop	r10
 3e8:	9f 90       	pop	r9
 3ea:	08 95       	ret

000003ec <SSD_Init>:
 */
#include "SSD_Interface.h"
void SSD_Init(void)
{
	/*	Configure SSD Enable Lines as Output	*/
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	62 e0       	ldi	r22, 0x02	; 2
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	/*	Configure SSD DP Line as Output	*/
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	63 e0       	ldi	r22, 0x03	; 3
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	/*	Configure SSD Data Lines as Output		*/
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	64 e0       	ldi	r22, 0x04	; 4
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	65 e0       	ldi	r22, 0x05	; 5
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	66 e0       	ldi	r22, 0x06	; 6
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	67 e0       	ldi	r22, 0x07	; 7
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	/*	Turn OFF SSD	*/
	Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_LOW);
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_LOW);
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
}
 446:	08 95       	ret

00000448 <Lcd_Pulse>:
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	63 e0       	ldi	r22, 0x03	; 3
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 452:	85 e0       	ldi	r24, 0x05	; 5
 454:	8a 95       	dec	r24
 456:	f1 f7       	brne	.-4      	; 0x454 <Lcd_Pulse+0xc>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	63 e0       	ldi	r22, 0x03	; 3
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 462:	80 e4       	ldi	r24, 0x40	; 64
 464:	9f e1       	ldi	r25, 0x1F	; 31
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <Lcd_Pulse+0x1e>
	_delay_ms(2);
}
 46a:	08 95       	ret

0000046c <Lcd_Display_Chr>:
	Lcd_Goto_Row_Column(0, 0);
}


void Lcd_Display_Chr(u8 chr)
{
 46c:	1f 93       	push	r17
 46e:	18 2f       	mov	r17, r24
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	60 ef       	ldi	r22, 0xF0	; 240
 47e:	41 2f       	mov	r20, r17
 480:	0e 94 3b 05 	call	0xa76	; 0xa76 <Dio_Write_Channel_Group>
	/*	Enable pulse	*/
	Lcd_Pulse();
 484:	0e 94 24 02 	call	0x448	; 0x448 <Lcd_Pulse>

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 488:	12 95       	swap	r17
 48a:	10 7f       	andi	r17, 0xF0	; 240
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	60 ef       	ldi	r22, 0xF0	; 240
 490:	41 2f       	mov	r20, r17
 492:	0e 94 3b 05 	call	0xa76	; 0xa76 <Dio_Write_Channel_Group>
	/*	Enable pulse	*/
	Lcd_Pulse();
 496:	0e 94 24 02 	call	0x448	; 0x448 <Lcd_Pulse>


void Lcd_Display_Chr(u8 chr)
{
	Lcd_Data(chr);
}
 49a:	1f 91       	pop	r17
 49c:	08 95       	ret

0000049e <Lcd_Display_str>:
void Lcd_Display_str(u8 str[])
{
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	ec 01       	movw	r28, r24
	while(*str != '\0')
 4a4:	88 81       	ld	r24, Y
 4a6:	88 23       	and	r24, r24
 4a8:	31 f0       	breq	.+12     	; 0x4b6 <Lcd_Display_str+0x18>
	{
		Lcd_Display_Chr(*str);
 4aa:	0e 94 36 02 	call	0x46c	; 0x46c <Lcd_Display_Chr>
		str++;
 4ae:	21 96       	adiw	r28, 0x01	; 1
{
	Lcd_Data(chr);
}
void Lcd_Display_str(u8 str[])
{
	while(*str != '\0')
 4b0:	88 81       	ld	r24, Y
 4b2:	88 23       	and	r24, r24
 4b4:	d1 f7       	brne	.-12     	; 0x4aa <Lcd_Display_str+0xc>
	{
		Lcd_Display_Chr(*str);
		str++;
	}
}
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <Lcd_Cmd>:
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
void Lcd_Cmd(lcd_Cmd_Type command)
{
 4bc:	1f 93       	push	r17
 4be:	18 2f       	mov	r17, r24
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	60 ef       	ldi	r22, 0xF0	; 240
 4ce:	41 2f       	mov	r20, r17
 4d0:	0e 94 3b 05 	call	0xa76	; 0xa76 <Dio_Write_Channel_Group>
	/*	Enable pulse	*/
	Lcd_Pulse();
 4d4:	0e 94 24 02 	call	0x448	; 0x448 <Lcd_Pulse>

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 4d8:	12 95       	swap	r17
 4da:	10 7f       	andi	r17, 0xF0	; 240
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	60 ef       	ldi	r22, 0xF0	; 240
 4e0:	41 2f       	mov	r20, r17
 4e2:	0e 94 3b 05 	call	0xa76	; 0xa76 <Dio_Write_Channel_Group>
	/*	Enable pulse	*/
	Lcd_Pulse();
 4e6:	0e 94 24 02 	call	0x448	; 0x448 <Lcd_Pulse>
}
 4ea:	1f 91       	pop	r17
 4ec:	08 95       	ret

000004ee <Lcd_Goto_Row_Column>:
		str++;
	}
}
void Lcd_Goto_Row_Column(u8 row, u8 column)
{
	switch (row)
 4ee:	88 23       	and	r24, r24
 4f0:	29 f4       	brne	.+10     	; 0x4fc <Lcd_Goto_Row_Column+0xe>
	{
	case 0:
		Lcd_Cmd(0x80+column);
 4f2:	86 2f       	mov	r24, r22
 4f4:	80 58       	subi	r24, 0x80	; 128
 4f6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Lcd_Cmd>
 4fa:	08 95       	ret
		str++;
	}
}
void Lcd_Goto_Row_Column(u8 row, u8 column)
{
	switch (row)
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	09 f0       	breq	.+2      	; 0x502 <Lcd_Goto_Row_Column+0x14>
 500:	08 95       	ret
	case 0:
		Lcd_Cmd(0x80+column);
		break;

	case 1:
		Lcd_Cmd(0xC0+column);
 502:	86 2f       	mov	r24, r22
 504:	80 54       	subi	r24, 0x40	; 64
 506:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Lcd_Cmd>
 50a:	08 95       	ret

0000050c <Lcd_Init>:
	/*	Enable pulse	*/
	Lcd_Pulse();
}

void Lcd_Init(void)
{
 50c:	cf 92       	push	r12
 50e:	df 92       	push	r13
 510:	ef 92       	push	r14
 512:	ff 92       	push	r15
 514:	1f 93       	push	r17
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
	/*	Configure LCD Control Lines as Output	*/
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	62 e0       	ldi	r22, 0x02	; 2
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	63 e0       	ldi	r22, 0x03	; 3
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>

	/*	Configure LCD Data Lines as Output		*/
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	64 e0       	ldi	r22, 0x04	; 4
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	65 e0       	ldi	r22, 0x05	; 5
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	66 e0       	ldi	r22, 0x06	; 6
 550:	41 e0       	ldi	r20, 0x01	; 1
 552:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	67 e0       	ldi	r22, 0x07	; 7
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>

	/*	Set LCD For Write Mode	*/
	Dio_Write_Channel(DIO_PORTB, DIO_PIN2, DIO_LOW);
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	62 e0       	ldi	r22, 0x02	; 2
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
 56a:	80 e6       	ldi	r24, 0x60	; 96
 56c:	9a ee       	ldi	r25, 0xEA	; 234
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <Lcd_Init+0x62>

	_delay_ms(15);

	Lcd_Cmd(0x03);
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Lcd_Cmd>
 578:	80 e2       	ldi	r24, 0x20	; 32
 57a:	9e e4       	ldi	r25, 0x4E	; 78
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <Lcd_Init+0x70>
	_delay_ms(5);

	Lcd_Cmd(0x03);
 580:	83 e0       	ldi	r24, 0x03	; 3
 582:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Lcd_Cmd>
 586:	80 e9       	ldi	r24, 0x90	; 144
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <Lcd_Init+0x7e>
	_delay_us(100);

	Lcd_Cmd(0x03);
 58e:	83 e0       	ldi	r24, 0x03	; 3
 590:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Lcd_Cmd>
	Lcd_Cmd(0x02);
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Lcd_Cmd>
	Lcd_Cmd(0x02);
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Lcd_Cmd>
 5a0:	ee 24       	eor	r14, r14
 5a2:	ff 24       	eor	r15, r15
 5a4:	90 e4       	ldi	r25, 0x40	; 64
 5a6:	c9 2e       	mov	r12, r25
 5a8:	d1 2c       	mov	r13, r1
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;

	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
 5aa:	8c 2d       	mov	r24, r12
 5ac:	0e 94 5e 02 	call	0x4bc	; 0x4bc <Lcd_Cmd>
 5b0:	e7 01       	movw	r28, r14
 5b2:	cc 0f       	add	r28, r28
 5b4:	dd 1f       	adc	r29, r29
 5b6:	cc 0f       	add	r28, r28
 5b8:	dd 1f       	adc	r29, r29
 5ba:	cc 0f       	add	r28, r28
 5bc:	dd 1f       	adc	r29, r29
 5be:	c0 59       	subi	r28, 0x90	; 144
 5c0:	df 4f       	sbci	r29, 0xFF	; 255
 5c2:	10 e0       	ldi	r17, 0x00	; 0
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
 5c4:	89 91       	ld	r24, Y+
 5c6:	0e 94 36 02 	call	0x46c	; 0x46c <Lcd_Display_Chr>
	u8 loc_CharIndx=0;

	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
 5ca:	1f 5f       	subi	r17, 0xFF	; 255
 5cc:	18 30       	cpi	r17, 0x08	; 8
 5ce:	d1 f7       	brne	.-12     	; 0x5c4 <Lcd_Init+0xb8>
 5d0:	08 94       	sec
 5d2:	e1 1c       	adc	r14, r1
 5d4:	f1 1c       	adc	r15, r1
 5d6:	88 e0       	ldi	r24, 0x08	; 8
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	c8 0e       	add	r12, r24
 5dc:	d9 1e       	adc	r13, r25
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;

	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
 5de:	98 e0       	ldi	r25, 0x08	; 8
 5e0:	e9 16       	cp	r14, r25
 5e2:	f1 04       	cpc	r15, r1
 5e4:	11 f7       	brne	.-60     	; 0x5aa <Lcd_Init+0x9e>

	Lcd_Cmd(0x03);
	Lcd_Cmd(0x02);
	Lcd_Cmd(0x02);
	Lcd_WriteCustom();
	Lcd_Goto_Row_Column(0, 0);
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	0e 94 77 02 	call	0x4ee	; 0x4ee <Lcd_Goto_Row_Column>
}
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	1f 91       	pop	r17
 5f4:	ff 90       	pop	r15
 5f6:	ef 90       	pop	r14
 5f8:	df 90       	pop	r13
 5fa:	cf 90       	pop	r12
 5fc:	08 95       	ret

000005fe <Button_Is_Pressed>:

boolean Button_Is_Pressed(button_id_t button)
{
	boolean loc_button_pressed = FALSE;

	switch(button)
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	89 f0       	breq	.+34     	; 0x624 <Button_Is_Pressed+0x26>
 602:	81 30       	cpi	r24, 0x01	; 1
 604:	28 f0       	brcs	.+10     	; 0x610 <Button_Is_Pressed+0x12>
 606:	82 30       	cpi	r24, 0x02	; 2
 608:	b1 f0       	breq	.+44     	; 0x636 <Button_Is_Pressed+0x38>
 60a:	90 e0       	ldi	r25, 0x00	; 0
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
 60c:	89 2f       	mov	r24, r25
 60e:	08 95       	ret
	boolean loc_button_pressed = FALSE;

	switch(button)
	{
	case BUTTON0:
		if (Dio_Read_Channel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Dio_Read_Channel>
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	b9 f7       	brne	.-18     	; 0x60c <Button_Is_Pressed+0xe>
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON2:
		if (Dio_Read_Channel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
 61e:	91 e0       	ldi	r25, 0x01	; 1
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
 620:	89 2f       	mov	r24, r25
 622:	08 95       	ret
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON1:
		if (Dio_Read_Channel(DIO_PORTB, DIO_PIN4) == DIO_HIGH)
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	64 e0       	ldi	r22, 0x04	; 4
 628:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Dio_Read_Channel>
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	b1 f3       	breq	.-20     	; 0x61e <Button_Is_Pressed+0x20>
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
 632:	89 2f       	mov	r24, r25
 634:	08 95       	ret
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON2:
		if (Dio_Read_Channel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
 636:	83 e0       	ldi	r24, 0x03	; 3
 638:	62 e0       	ldi	r22, 0x02	; 2
 63a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Dio_Read_Channel>
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	69 f3       	breq	.-38     	; 0x61e <Button_Is_Pressed+0x20>
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
 644:	89 2f       	mov	r24, r25
 646:	08 95       	ret

00000648 <Button_Init>:

#include "Button_Interface.h"

void Button_Init(void)
{
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	40 e0       	ldi	r20, 0x00	; 0
 64e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	64 e0       	ldi	r22, 0x04	; 4
 656:	40 e0       	ldi	r20, 0x00	; 0
 658:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
 65c:	83 e0       	ldi	r24, 0x03	; 3
 65e:	62 e0       	ldi	r22, 0x02	; 2
 660:	40 e0       	ldi	r20, 0x00	; 0
 662:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
}
 666:	08 95       	ret

00000668 <Led_Toggle>:
	}
}

void Led_Toggle(led_id_t led)
{
	switch (led)
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	79 f0       	breq	.+30     	; 0x68a <Led_Toggle+0x22>
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	28 f4       	brcc	.+10     	; 0x67a <Led_Toggle+0x12>
	{
	case LED0:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN2);
 670:	82 e0       	ldi	r24, 0x02	; 2
 672:	62 e0       	ldi	r22, 0x02	; 2
 674:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Dio_Flip_Channel>
 678:	08 95       	ret
	}
}

void Led_Toggle(led_id_t led)
{
	switch (led)
 67a:	82 30       	cpi	r24, 0x02	; 2
 67c:	09 f0       	breq	.+2      	; 0x680 <Led_Toggle+0x18>
 67e:	08 95       	ret
	case LED1:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN7);
		break;

	case LED2:
		Dio_Flip_Channel(DIO_PORTD, DIO_PIN3);
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	63 e0       	ldi	r22, 0x03	; 3
 684:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Dio_Flip_Channel>
 688:	08 95       	ret
	case LED0:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN2);
		break;

	case LED1:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN7);
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	67 e0       	ldi	r22, 0x07	; 7
 68e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <Dio_Flip_Channel>
 692:	08 95       	ret

00000694 <Led_OFF>:
	}
}

void Led_OFF(led_id_t led)
{
	switch (led)
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	89 f0       	breq	.+34     	; 0x6ba <Led_OFF+0x26>
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	30 f4       	brcc	.+12     	; 0x6a8 <Led_OFF+0x14>
	{
	case LED0:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN2, DIO_LOW);
 69c:	82 e0       	ldi	r24, 0x02	; 2
 69e:	62 e0       	ldi	r22, 0x02	; 2
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
 6a6:	08 95       	ret
	}
}

void Led_OFF(led_id_t led)
{
	switch (led)
 6a8:	82 30       	cpi	r24, 0x02	; 2
 6aa:	09 f0       	breq	.+2      	; 0x6ae <Led_OFF+0x1a>
 6ac:	08 95       	ret
	case LED1:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN7, DIO_LOW);
		break;

	case LED2:
		Dio_Write_Channel(DIO_PORTD, DIO_PIN3, DIO_LOW);
 6ae:	83 e0       	ldi	r24, 0x03	; 3
 6b0:	63 e0       	ldi	r22, 0x03	; 3
 6b2:	40 e0       	ldi	r20, 0x00	; 0
 6b4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
 6b8:	08 95       	ret
	case LED0:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN2, DIO_LOW);
		break;

	case LED1:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN7, DIO_LOW);
 6ba:	82 e0       	ldi	r24, 0x02	; 2
 6bc:	67 e0       	ldi	r22, 0x07	; 7
 6be:	40 e0       	ldi	r20, 0x00	; 0
 6c0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
 6c4:	08 95       	ret

000006c6 <Led_ON>:
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
}

void Led_ON(led_id_t led)
{
	switch (led)
 6c6:	81 30       	cpi	r24, 0x01	; 1
 6c8:	89 f0       	breq	.+34     	; 0x6ec <Led_ON+0x26>
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	30 f4       	brcc	.+12     	; 0x6da <Led_ON+0x14>
	{
	case LED0:

#if(LED0_CONECTION == SOURCE)
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_HIGH);
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	62 e0       	ldi	r22, 0x02	; 2
 6d2:	41 e0       	ldi	r20, 0x01	; 1
 6d4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
 6d8:	08 95       	ret
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
}

void Led_ON(led_id_t led)
{
	switch (led)
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <Led_ON+0x1a>
 6de:	08 95       	ret

	case LED1:
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
		break;
	case LED2:
		Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_HIGH);
 6e0:	83 e0       	ldi	r24, 0x03	; 3
 6e2:	63 e0       	ldi	r22, 0x03	; 3
 6e4:	41 e0       	ldi	r20, 0x01	; 1
 6e6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
 6ea:	08 95       	ret
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
#endif
		break;

	case LED1:
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	67 e0       	ldi	r22, 0x07	; 7
 6f0:	41 e0       	ldi	r20, 0x01	; 1
 6f2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
 6f6:	08 95       	ret

000006f8 <Led_Init>:

#include "Led_Interface.h"

void Led_Init(void)
{
	Dio_Configure_Channel(LED0_PORT, LED0_PIN, DIO_OUTPUT);
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	62 e0       	ldi	r22, 0x02	; 2
 6fc:	41 e0       	ldi	r20, 0x01	; 1
 6fe:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(LED1_PORT, LED1_PIN, DIO_OUTPUT);
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	67 e0       	ldi	r22, 0x07	; 7
 706:	41 e0       	ldi	r20, 0x01	; 1
 708:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>
	Dio_Configure_Channel(LED2_PORT, LED2_PIN, DIO_OUTPUT);
 70c:	83 e0       	ldi	r24, 0x03	; 3
 70e:	63 e0       	ldi	r22, 0x03	; 3
 710:	41 e0       	ldi	r20, 0x01	; 1
 712:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Dio_Configure_Channel>

	Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	62 e0       	ldi	r22, 0x02	; 2
 71a:	40 e0       	ldi	r20, 0x00	; 0
 71c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_LOW);
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	67 e0       	ldi	r22, 0x07	; 7
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
 72a:	83 e0       	ldi	r24, 0x03	; 3
 72c:	63 e0       	ldi	r22, 0x03	; 3
 72e:	40 e0       	ldi	r20, 0x00	; 0
 730:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
}
 734:	08 95       	ret

00000736 <Ext_Interrupt_Enable>:
#include "Ext_INT_Interface.h"


void Ext_Interrupt_Enable(ext_Int_t intID)
{
	switch (intID)
 736:	81 30       	cpi	r24, 0x01	; 1
 738:	69 f0       	breq	.+26     	; 0x754 <Ext_Interrupt_Enable+0x1e>
 73a:	81 30       	cpi	r24, 0x01	; 1
 73c:	20 f4       	brcc	.+8      	; 0x746 <Ext_Interrupt_Enable+0x10>
	{
	case EXT_INT0:
			SET_BIT(EXT_INT_GICR_REG,6);
 73e:	8b b7       	in	r24, 0x3b	; 59
 740:	80 64       	ori	r24, 0x40	; 64
 742:	8b bf       	out	0x3b, r24	; 59
 744:	08 95       	ret
#include "Ext_INT_Interface.h"


void Ext_Interrupt_Enable(ext_Int_t intID)
{
	switch (intID)
 746:	82 30       	cpi	r24, 0x02	; 2
 748:	09 f0       	breq	.+2      	; 0x74c <Ext_Interrupt_Enable+0x16>
 74a:	08 95       	ret
	case EXT_INT1:
			SET_BIT(EXT_INT_GICR_REG,7);
			break;

	case EXT_INT2:
			SET_BIT(EXT_INT_GICR_REG,5);
 74c:	8b b7       	in	r24, 0x3b	; 59
 74e:	80 62       	ori	r24, 0x20	; 32
 750:	8b bf       	out	0x3b, r24	; 59
 752:	08 95       	ret
	case EXT_INT0:
			SET_BIT(EXT_INT_GICR_REG,6);
			break;

	case EXT_INT1:
			SET_BIT(EXT_INT_GICR_REG,7);
 754:	8b b7       	in	r24, 0x3b	; 59
 756:	80 68       	ori	r24, 0x80	; 128
 758:	8b bf       	out	0x3b, r24	; 59
 75a:	08 95       	ret

0000075c <Ext_Interrupt_Disable>:
			break;
	}
}
void Ext_Interrupt_Disable(ext_Int_t intID)
{
	switch (intID)
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	69 f0       	breq	.+26     	; 0x77a <Ext_Interrupt_Disable+0x1e>
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	20 f4       	brcc	.+8      	; 0x76c <Ext_Interrupt_Disable+0x10>
	{
	case EXT_INT0:
		CLEAR_BIT(EXT_INT_GICR_REG,6);
 764:	8b b7       	in	r24, 0x3b	; 59
 766:	8f 7b       	andi	r24, 0xBF	; 191
 768:	8b bf       	out	0x3b, r24	; 59
 76a:	08 95       	ret
			break;
	}
}
void Ext_Interrupt_Disable(ext_Int_t intID)
{
	switch (intID)
 76c:	82 30       	cpi	r24, 0x02	; 2
 76e:	09 f0       	breq	.+2      	; 0x772 <Ext_Interrupt_Disable+0x16>
 770:	08 95       	ret
	case EXT_INT1:
		CLEAR_BIT(EXT_INT_GICR_REG,7);
		break;

	case EXT_INT2:
		CLEAR_BIT(EXT_INT_GICR_REG,5);
 772:	8b b7       	in	r24, 0x3b	; 59
 774:	8f 7d       	andi	r24, 0xDF	; 223
 776:	8b bf       	out	0x3b, r24	; 59
 778:	08 95       	ret
	case EXT_INT0:
		CLEAR_BIT(EXT_INT_GICR_REG,6);
		break;

	case EXT_INT1:
		CLEAR_BIT(EXT_INT_GICR_REG,7);
 77a:	8b b7       	in	r24, 0x3b	; 59
 77c:	8f 77       	andi	r24, 0x7F	; 127
 77e:	8b bf       	out	0x3b, r24	; 59
 780:	08 95       	ret

00000782 <Ext_Interrupt_SncControl>:
	}
}

void Ext_Interrupt_SncControl(ext_Int_t intID, snc_mode_t mode)
{
	switch (intID)
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	89 f0       	breq	.+34     	; 0x7a8 <Ext_Interrupt_SncControl+0x26>
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	20 f4       	brcc	.+8      	; 0x792 <Ext_Interrupt_SncControl+0x10>
	{
		case EXT_INT0:
			EXT_INT_MCUCR_REG |=(mode<<0);
 78a:	85 b7       	in	r24, 0x35	; 53
 78c:	86 2b       	or	r24, r22
 78e:	85 bf       	out	0x35, r24	; 53
 790:	08 95       	ret
	}
}

void Ext_Interrupt_SncControl(ext_Int_t intID, snc_mode_t mode)
{
	switch (intID)
 792:	82 30       	cpi	r24, 0x02	; 2
 794:	09 f0       	breq	.+2      	; 0x798 <Ext_Interrupt_SncControl+0x16>
 796:	08 95       	ret
		case EXT_INT1:
			EXT_INT_MCUCR_REG |=(mode<<2);
			break;

		case EXT_INT2:
			if (mode == FAILING_EDGE)
 798:	62 30       	cpi	r22, 0x02	; 2
 79a:	61 f0       	breq	.+24     	; 0x7b4 <Ext_Interrupt_SncControl+0x32>
			{
				CLEAR_BIT(EXT_INT_MCUCSR_REG,6);
			}
			else if (mode == RISING_EDGE)
 79c:	63 30       	cpi	r22, 0x03	; 3
 79e:	d9 f7       	brne	.-10     	; 0x796 <Ext_Interrupt_SncControl+0x14>
			{
				SET_BIT(EXT_INT_MCUCSR_REG,6);
 7a0:	84 b7       	in	r24, 0x34	; 52
 7a2:	80 64       	ori	r24, 0x40	; 64
 7a4:	84 bf       	out	0x34, r24	; 52
 7a6:	08 95       	ret
		case EXT_INT0:
			EXT_INT_MCUCR_REG |=(mode<<0);
			break;

		case EXT_INT1:
			EXT_INT_MCUCR_REG |=(mode<<2);
 7a8:	85 b7       	in	r24, 0x35	; 53
 7aa:	66 0f       	add	r22, r22
 7ac:	66 0f       	add	r22, r22
 7ae:	86 2b       	or	r24, r22
 7b0:	85 bf       	out	0x35, r24	; 53
 7b2:	08 95       	ret
			break;

		case EXT_INT2:
			if (mode == FAILING_EDGE)
			{
				CLEAR_BIT(EXT_INT_MCUCSR_REG,6);
 7b4:	84 b7       	in	r24, 0x34	; 52
 7b6:	8f 7b       	andi	r24, 0xBF	; 191
 7b8:	84 bf       	out	0x34, r24	; 52
 7ba:	08 95       	ret

000007bc <GINT_EnableAllInterrupts>:

#include <GINT_Interface.h>

void GINT_EnableAllInterrupts(void)
{
	SET_BIT(GINT_SREG_REG,7);
 7bc:	8f b7       	in	r24, 0x3f	; 63
 7be:	80 68       	ori	r24, 0x80	; 128
 7c0:	8f bf       	out	0x3f, r24	; 63
}
 7c2:	08 95       	ret

000007c4 <GINT_DisableAllInterrupts>:
void GINT_DisableAllInterrupts(void)
{
	CLEAR_BIT(GINT_SREG_REG,7);
 7c4:	8f b7       	in	r24, 0x3f	; 63
 7c6:	8f 77       	andi	r24, 0x7F	; 127
 7c8:	8f bf       	out	0x3f, r24	; 63
}
 7ca:	08 95       	ret

000007cc <ADC_Init>:
#include "Adc_Interface.h"

void ADC_Init(void)
{
	/* 	Vref = AVCC	*/
	ADC_ADMUX_REG|=(AVCC5V_REF<<6);
 7cc:	3e 9a       	sbi	0x07, 6	; 7
	/*	Enable ADC, Prescaler = /128	*/
	ADC_ADCSRA_REG=(ADC_ENABLE)|(ADCPS_128);
 7ce:	87 e8       	ldi	r24, 0x87	; 135
 7d0:	86 b9       	out	0x06, r24	; 6
}
 7d2:	08 95       	ret

000007d4 <ADC_Read>:

u16 ADC_Read(adc_Channel_t chnlNo)
{
	u16 result;
	/*	Select Channel	*/
	ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(chnlNo);
 7d4:	97 b1       	in	r25, 0x07	; 7
 7d6:	98 7f       	andi	r25, 0xF8	; 248
 7d8:	98 2b       	or	r25, r24
 7da:	97 b9       	out	0x07, r25	; 7
	/*	Start ADC Conversion	*/
	SET_BIT(ADC_ADCSRA_REG,ADC_START_CONVERSION_BIT_NO);
 7dc:	36 9a       	sbi	0x06, 6	; 6
	/*	Wait Until ADC Conversion Finished	*/
	while(CHECK_BIT(ADC_ADCSRA_REG,ADIF_BIT_NO) != 1)
 7de:	34 9b       	sbis	0x06, 4	; 6
 7e0:	fe cf       	rjmp	.-4      	; 0x7de <ADC_Read+0xa>
	{
		/*	Do Nothing	*/
	}
	/*	Clear Interrupt Flag To Be Ready For Another Conversion	*/
	SET_BIT(ADC_ADCSRA_REG,ADIF_BIT_NO);
 7e2:	34 9a       	sbi	0x06, 4	; 6
	/*	Read ADC Result	*/
	result=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
 7e4:	24 b1       	in	r18, 0x04	; 4
 7e6:	45 b1       	in	r20, 0x05	; 5
 7e8:	94 2f       	mov	r25, r20
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	28 2b       	or	r18, r24
 7f0:	39 2b       	or	r19, r25
	return result;
}
 7f2:	c9 01       	movw	r24, r18
 7f4:	08 95       	ret

000007f6 <Dio_Configure_Channel>:
#include "Dio_Interface.h"


void Dio_Configure_Channel(dio_port_t port, dio_pin_t pin , dio_direction_t direction)
{
	switch (port)
 7f6:	81 30       	cpi	r24, 0x01	; 1
 7f8:	19 f1       	breq	.+70     	; 0x840 <Dio_Configure_Channel+0x4a>
 7fa:	81 30       	cpi	r24, 0x01	; 1
 7fc:	28 f0       	brcs	.+10     	; 0x808 <Dio_Configure_Channel+0x12>
 7fe:	82 30       	cpi	r24, 0x02	; 2
 800:	69 f1       	breq	.+90     	; 0x85c <Dio_Configure_Channel+0x66>
 802:	83 30       	cpi	r24, 0x03	; 3
 804:	79 f0       	breq	.+30     	; 0x824 <Dio_Configure_Channel+0x2e>
 806:	08 95       	ret
	{
	case DIO_PORTA:
			if (direction == DIO_INPUT)
 808:	44 23       	and	r20, r20
 80a:	b1 f5       	brne	.+108    	; 0x878 <__stack+0x19>
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
 80c:	2a b3       	in	r18, 0x1a	; 26
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	02 c0       	rjmp	.+4      	; 0x818 <Dio_Configure_Channel+0x22>
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	6a 95       	dec	r22
 81a:	e2 f7       	brpl	.-8      	; 0x814 <Dio_Configure_Channel+0x1e>
 81c:	80 95       	com	r24
 81e:	82 23       	and	r24, r18
 820:	8a bb       	out	0x1a, r24	; 26
 822:	08 95       	ret
					SET_BIT(DIO_DDRC_REG,pin);
				}
			break;

	case DIO_PORTD:
				if (direction == DIO_INPUT)
 824:	44 23       	and	r20, r20
 826:	09 f4       	brne	.+2      	; 0x82a <Dio_Configure_Channel+0x34>
 828:	48 c0       	rjmp	.+144    	; 0x8ba <__stack+0x5b>
				{
					CLEAR_BIT(DIO_DDRD_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRD_REG,pin);
 82a:	21 b3       	in	r18, 0x11	; 17
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	02 c0       	rjmp	.+4      	; 0x836 <Dio_Configure_Channel+0x40>
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	6a 95       	dec	r22
 838:	e2 f7       	brpl	.-8      	; 0x832 <Dio_Configure_Channel+0x3c>
 83a:	28 2b       	or	r18, r24
 83c:	21 bb       	out	0x11, r18	; 17
 83e:	08 95       	ret
				SET_BIT(DIO_DDRA_REG,pin);
			}
		break;

	case DIO_PORTB:
				if (direction == DIO_INPUT)
 840:	44 23       	and	r20, r20
 842:	81 f5       	brne	.+96     	; 0x8a4 <__stack+0x45>
				{
					CLEAR_BIT(DIO_DDRB_REG,pin);
 844:	27 b3       	in	r18, 0x17	; 23
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <Dio_Configure_Channel+0x5a>
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	6a 95       	dec	r22
 852:	e2 f7       	brpl	.-8      	; 0x84c <Dio_Configure_Channel+0x56>
 854:	80 95       	com	r24
 856:	82 23       	and	r24, r18
 858:	87 bb       	out	0x17, r24	; 23
 85a:	08 95       	ret
					SET_BIT(DIO_DDRB_REG,pin);
				}
			break;

	case DIO_PORTC:
				if (direction == DIO_INPUT)
 85c:	44 23       	and	r20, r20
 85e:	b9 f4       	brne	.+46     	; 0x88e <__stack+0x2f>
				{
					CLEAR_BIT(DIO_DDRC_REG,pin);
 860:	24 b3       	in	r18, 0x14	; 20
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	6a 95       	dec	r22
 86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
 870:	80 95       	com	r24
 872:	82 23       	and	r24, r18
 874:	84 bb       	out	0x14, r24	; 20
 876:	08 95       	ret
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
			}
			else
			{
				SET_BIT(DIO_DDRA_REG,pin);
 878:	2a b3       	in	r18, 0x1a	; 26
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	6a 95       	dec	r22
 886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
 888:	28 2b       	or	r18, r24
 88a:	2a bb       	out	0x1a, r18	; 26
 88c:	08 95       	ret
				{
					CLEAR_BIT(DIO_DDRC_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRC_REG,pin);
 88e:	24 b3       	in	r18, 0x14	; 20
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
 896:	88 0f       	add	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	6a 95       	dec	r22
 89c:	e2 f7       	brpl	.-8      	; 0x896 <__stack+0x37>
 89e:	28 2b       	or	r18, r24
 8a0:	24 bb       	out	0x14, r18	; 20
 8a2:	08 95       	ret
				{
					CLEAR_BIT(DIO_DDRB_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRB_REG,pin);
 8a4:	27 b3       	in	r18, 0x17	; 23
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__stack+0x51>
 8ac:	88 0f       	add	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	6a 95       	dec	r22
 8b2:	e2 f7       	brpl	.-8      	; 0x8ac <__stack+0x4d>
 8b4:	28 2b       	or	r18, r24
 8b6:	27 bb       	out	0x17, r18	; 23
 8b8:	08 95       	ret
			break;

	case DIO_PORTD:
				if (direction == DIO_INPUT)
				{
					CLEAR_BIT(DIO_DDRD_REG,pin);
 8ba:	21 b3       	in	r18, 0x11	; 17
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
 8c2:	88 0f       	add	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	6a 95       	dec	r22
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <__stack+0x63>
 8ca:	80 95       	com	r24
 8cc:	82 23       	and	r24, r18
 8ce:	81 bb       	out	0x11, r24	; 17
 8d0:	08 95       	ret

000008d2 <Dio_Write_Channel>:
	}
}

void Dio_Write_Channel(dio_port_t port, dio_pin_t pin , dio_level_t level)
{
	switch (port)
 8d2:	81 30       	cpi	r24, 0x01	; 1
 8d4:	29 f1       	breq	.+74     	; 0x920 <Dio_Write_Channel+0x4e>
 8d6:	81 30       	cpi	r24, 0x01	; 1
 8d8:	28 f0       	brcs	.+10     	; 0x8e4 <Dio_Write_Channel+0x12>
 8da:	82 30       	cpi	r24, 0x02	; 2
 8dc:	79 f1       	breq	.+94     	; 0x93c <Dio_Write_Channel+0x6a>
 8de:	83 30       	cpi	r24, 0x03	; 3
 8e0:	81 f0       	breq	.+32     	; 0x902 <Dio_Write_Channel+0x30>
 8e2:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
 8e4:	41 30       	cpi	r20, 0x01	; 1
 8e6:	09 f4       	brne	.+2      	; 0x8ea <Dio_Write_Channel+0x18>
 8e8:	4d c0       	rjmp	.+154    	; 0x984 <Dio_Write_Channel+0xb2>
		{
			SET_BIT(DIO_PORTA_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
 8ea:	2b b3       	in	r18, 0x1b	; 27
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <Dio_Write_Channel+0x24>
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	6a 95       	dec	r22
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <Dio_Write_Channel+0x20>
 8fa:	80 95       	com	r24
 8fc:	82 23       	and	r24, r18
 8fe:	8b bb       	out	0x1b, r24	; 27
 900:	08 95       	ret
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
 902:	41 30       	cpi	r20, 0x01	; 1
 904:	09 f4       	brne	.+2      	; 0x908 <Dio_Write_Channel+0x36>
 906:	49 c0       	rjmp	.+146    	; 0x99a <Dio_Write_Channel+0xc8>
		{
			SET_BIT(DIO_PORTD_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
 908:	22 b3       	in	r18, 0x12	; 18
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	02 c0       	rjmp	.+4      	; 0x914 <Dio_Write_Channel+0x42>
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	6a 95       	dec	r22
 916:	e2 f7       	brpl	.-8      	; 0x910 <Dio_Write_Channel+0x3e>
 918:	80 95       	com	r24
 91a:	82 23       	and	r24, r18
 91c:	82 bb       	out	0x12, r24	; 18
 91e:	08 95       	ret
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
 920:	41 30       	cpi	r20, 0x01	; 1
 922:	29 f1       	breq	.+74     	; 0x96e <Dio_Write_Channel+0x9c>
		{
			SET_BIT(DIO_PORTB_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
 924:	28 b3       	in	r18, 0x18	; 24
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <Dio_Write_Channel+0x5e>
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	6a 95       	dec	r22
 932:	e2 f7       	brpl	.-8      	; 0x92c <Dio_Write_Channel+0x5a>
 934:	80 95       	com	r24
 936:	82 23       	and	r24, r18
 938:	88 bb       	out	0x18, r24	; 24
 93a:	08 95       	ret
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
 93c:	41 30       	cpi	r20, 0x01	; 1
 93e:	61 f0       	breq	.+24     	; 0x958 <Dio_Write_Channel+0x86>
		{
			SET_BIT(DIO_PORTC_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
 940:	25 b3       	in	r18, 0x15	; 21
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <Dio_Write_Channel+0x7a>
 948:	88 0f       	add	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	6a 95       	dec	r22
 94e:	e2 f7       	brpl	.-8      	; 0x948 <Dio_Write_Channel+0x76>
 950:	80 95       	com	r24
 952:	82 23       	and	r24, r18
 954:	85 bb       	out	0x15, r24	; 21
 956:	08 95       	ret
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTC_REG,pin);
 958:	25 b3       	in	r18, 0x15	; 21
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	02 c0       	rjmp	.+4      	; 0x964 <Dio_Write_Channel+0x92>
 960:	88 0f       	add	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	6a 95       	dec	r22
 966:	e2 f7       	brpl	.-8      	; 0x960 <Dio_Write_Channel+0x8e>
 968:	28 2b       	or	r18, r24
 96a:	25 bb       	out	0x15, r18	; 21
 96c:	08 95       	ret
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTB_REG,pin);
 96e:	28 b3       	in	r18, 0x18	; 24
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	02 c0       	rjmp	.+4      	; 0x97a <Dio_Write_Channel+0xa8>
 976:	88 0f       	add	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	6a 95       	dec	r22
 97c:	e2 f7       	brpl	.-8      	; 0x976 <Dio_Write_Channel+0xa4>
 97e:	28 2b       	or	r18, r24
 980:	28 bb       	out	0x18, r18	; 24
 982:	08 95       	ret
	switch (port)
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTA_REG,pin);
 984:	2b b3       	in	r18, 0x1b	; 27
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	02 c0       	rjmp	.+4      	; 0x990 <Dio_Write_Channel+0xbe>
 98c:	88 0f       	add	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	6a 95       	dec	r22
 992:	e2 f7       	brpl	.-8      	; 0x98c <Dio_Write_Channel+0xba>
 994:	28 2b       	or	r18, r24
 996:	2b bb       	out	0x1b, r18	; 27
 998:	08 95       	ret
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTD_REG,pin);
 99a:	22 b3       	in	r18, 0x12	; 18
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <Dio_Write_Channel+0xd4>
 9a2:	88 0f       	add	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	6a 95       	dec	r22
 9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <Dio_Write_Channel+0xd0>
 9aa:	28 2b       	or	r18, r24
 9ac:	22 bb       	out	0x12, r18	; 18
 9ae:	08 95       	ret

000009b0 <Dio_Flip_Channel>:
	}
}

void Dio_Flip_Channel(dio_port_t port, dio_pin_t pin)
{
	switch(port)
 9b0:	81 30       	cpi	r24, 0x01	; 1
 9b2:	e9 f0       	breq	.+58     	; 0x9ee <Dio_Flip_Channel+0x3e>
 9b4:	81 30       	cpi	r24, 0x01	; 1
 9b6:	28 f0       	brcs	.+10     	; 0x9c2 <Dio_Flip_Channel+0x12>
 9b8:	82 30       	cpi	r24, 0x02	; 2
 9ba:	21 f1       	breq	.+72     	; 0xa04 <Dio_Flip_Channel+0x54>
 9bc:	83 30       	cpi	r24, 0x03	; 3
 9be:	61 f0       	breq	.+24     	; 0x9d8 <Dio_Flip_Channel+0x28>
 9c0:	08 95       	ret
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
 9c2:	2b b3       	in	r18, 0x1b	; 27
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <Dio_Flip_Channel+0x1e>
 9ca:	88 0f       	add	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	6a 95       	dec	r22
 9d0:	e2 f7       	brpl	.-8      	; 0x9ca <Dio_Flip_Channel+0x1a>
 9d2:	28 27       	eor	r18, r24
 9d4:	2b bb       	out	0x1b, r18	; 27
 9d6:	08 95       	ret
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
		break;

	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
 9d8:	22 b3       	in	r18, 0x12	; 18
 9da:	81 e0       	ldi	r24, 0x01	; 1
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <Dio_Flip_Channel+0x34>
 9e0:	88 0f       	add	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	6a 95       	dec	r22
 9e6:	e2 f7       	brpl	.-8      	; 0x9e0 <Dio_Flip_Channel+0x30>
 9e8:	28 27       	eor	r18, r24
 9ea:	22 bb       	out	0x12, r18	; 18
 9ec:	08 95       	ret
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
		break;

	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
 9ee:	28 b3       	in	r18, 0x18	; 24
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <Dio_Flip_Channel+0x4a>
 9f6:	88 0f       	add	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	6a 95       	dec	r22
 9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <Dio_Flip_Channel+0x46>
 9fe:	28 27       	eor	r18, r24
 a00:	28 bb       	out	0x18, r18	; 24
 a02:	08 95       	ret
		break;

	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
 a04:	25 b3       	in	r18, 0x15	; 21
 a06:	81 e0       	ldi	r24, 0x01	; 1
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <Dio_Flip_Channel+0x60>
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	6a 95       	dec	r22
 a12:	e2 f7       	brpl	.-8      	; 0xa0c <Dio_Flip_Channel+0x5c>
 a14:	28 27       	eor	r18, r24
 a16:	25 bb       	out	0x15, r18	; 21
 a18:	08 95       	ret

00000a1a <Dio_Read_Channel>:

dio_level_t Dio_Read_Channel(dio_port_t port, dio_pin_t pin)
{
	dio_level_t loc_result = DIO_LOW;

	switch (port)
 a1a:	81 30       	cpi	r24, 0x01	; 1
 a1c:	d1 f0       	breq	.+52     	; 0xa52 <Dio_Read_Channel+0x38>
 a1e:	81 30       	cpi	r24, 0x01	; 1
 a20:	30 f0       	brcs	.+12     	; 0xa2e <Dio_Read_Channel+0x14>
 a22:	82 30       	cpi	r24, 0x02	; 2
 a24:	f9 f0       	breq	.+62     	; 0xa64 <Dio_Read_Channel+0x4a>
 a26:	83 30       	cpi	r24, 0x03	; 3
 a28:	59 f0       	breq	.+22     	; 0xa40 <Dio_Read_Channel+0x26>
 a2a:	80 e0       	ldi	r24, 0x00	; 0
 a2c:	08 95       	ret
	{
	case DIO_PORTA:
		loc_result=CHECK_BIT(DIO_PINA_REG,pin);
 a2e:	89 b3       	in	r24, 0x19	; 25
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <Dio_Read_Channel+0x1e>
 a34:	95 95       	asr	r25
 a36:	87 95       	ror	r24
 a38:	6a 95       	dec	r22
 a3a:	e2 f7       	brpl	.-8      	; 0xa34 <Dio_Read_Channel+0x1a>
 a3c:	81 70       	andi	r24, 0x01	; 1
 a3e:	08 95       	ret
			loc_result = DIO_LOW;
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
 a40:	80 b3       	in	r24, 0x10	; 16
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <Dio_Read_Channel+0x30>
 a46:	95 95       	asr	r25
 a48:	87 95       	ror	r24
 a4a:	6a 95       	dec	r22
 a4c:	e2 f7       	brpl	.-8      	; 0xa46 <Dio_Read_Channel+0x2c>
 a4e:	81 70       	andi	r24, 0x01	; 1
			loc_result = DIO_LOW;
		}
		break;
	}
	return loc_result;
}
 a50:	08 95       	ret
//			loc_result = DIO_LOW;
//		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
 a52:	86 b3       	in	r24, 0x16	; 22
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <Dio_Read_Channel+0x42>
 a58:	95 95       	asr	r25
 a5a:	87 95       	ror	r24
 a5c:	6a 95       	dec	r22
 a5e:	e2 f7       	brpl	.-8      	; 0xa58 <Dio_Read_Channel+0x3e>
 a60:	81 70       	andi	r24, 0x01	; 1
 a62:	08 95       	ret
			loc_result = DIO_LOW;
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
 a64:	83 b3       	in	r24, 0x13	; 19
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <Dio_Read_Channel+0x54>
 a6a:	95 95       	asr	r25
 a6c:	87 95       	ror	r24
 a6e:	6a 95       	dec	r22
 a70:	e2 f7       	brpl	.-8      	; 0xa6a <Dio_Read_Channel+0x50>
 a72:	81 70       	andi	r24, 0x01	; 1
 a74:	08 95       	ret

00000a76 <Dio_Write_Channel_Group>:



void Dio_Write_Channel_Group(dio_port_t port,u8 mask,u8 data)
{
	switch (port)
 a76:	81 30       	cpi	r24, 0x01	; 1
 a78:	a9 f0       	breq	.+42     	; 0xaa4 <Dio_Write_Channel_Group+0x2e>
 a7a:	81 30       	cpi	r24, 0x01	; 1
 a7c:	28 f0       	brcs	.+10     	; 0xa88 <Dio_Write_Channel_Group+0x12>
 a7e:	82 30       	cpi	r24, 0x02	; 2
 a80:	c1 f0       	breq	.+48     	; 0xab2 <Dio_Write_Channel_Group+0x3c>
 a82:	83 30       	cpi	r24, 0x03	; 3
 a84:	41 f0       	breq	.+16     	; 0xa96 <Dio_Write_Channel_Group+0x20>
 a86:	08 95       	ret
	{
		case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data&mask);
 a88:	8b b3       	in	r24, 0x1b	; 27
 a8a:	46 23       	and	r20, r22
 a8c:	60 95       	com	r22
 a8e:	86 23       	and	r24, r22
 a90:	84 2b       	or	r24, r20
 a92:	8b bb       	out	0x1b, r24	; 27
 a94:	08 95       	ret
		case DIO_PORTC:
			DIO_PORTC_REG = (DIO_PORTC_REG&~mask)|(data&mask);
		break;

		case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG&~mask)|(data&mask);
 a96:	82 b3       	in	r24, 0x12	; 18
 a98:	46 23       	and	r20, r22
 a9a:	60 95       	com	r22
 a9c:	86 23       	and	r24, r22
 a9e:	84 2b       	or	r24, r20
 aa0:	82 bb       	out	0x12, r24	; 18
 aa2:	08 95       	ret
		case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data&mask);
		break;

		case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG&~mask)|(data&mask);
 aa4:	88 b3       	in	r24, 0x18	; 24
 aa6:	46 23       	and	r20, r22
 aa8:	60 95       	com	r22
 aaa:	86 23       	and	r24, r22
 aac:	84 2b       	or	r24, r20
 aae:	88 bb       	out	0x18, r24	; 24
 ab0:	08 95       	ret
		break;

		case DIO_PORTC:
			DIO_PORTC_REG = (DIO_PORTC_REG&~mask)|(data&mask);
 ab2:	85 b3       	in	r24, 0x15	; 21
 ab4:	46 23       	and	r20, r22
 ab6:	60 95       	com	r22
 ab8:	86 23       	and	r24, r22
 aba:	84 2b       	or	r24, r20
 abc:	85 bb       	out	0x15, r24	; 21
 abe:	08 95       	ret

00000ac0 <Dio_PullUp_Enable>:
	}
}

void Dio_PullUp_Enable(dio_port_t port, dio_pin_t pin)
{
	Dio_Write_Channel(port, pin, DIO_HIGH);
 ac0:	41 e0       	ldi	r20, 0x01	; 1
 ac2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Dio_Write_Channel>
}
 ac6:	08 95       	ret

00000ac8 <__udivmodqi4>:
 ac8:	99 1b       	sub	r25, r25
 aca:	79 e0       	ldi	r23, 0x09	; 9
 acc:	04 c0       	rjmp	.+8      	; 0xad6 <__udivmodqi4_ep>

00000ace <__udivmodqi4_loop>:
 ace:	99 1f       	adc	r25, r25
 ad0:	96 17       	cp	r25, r22
 ad2:	08 f0       	brcs	.+2      	; 0xad6 <__udivmodqi4_ep>
 ad4:	96 1b       	sub	r25, r22

00000ad6 <__udivmodqi4_ep>:
 ad6:	88 1f       	adc	r24, r24
 ad8:	7a 95       	dec	r23
 ada:	c9 f7       	brne	.-14     	; 0xace <__udivmodqi4_loop>
 adc:	80 95       	com	r24
 ade:	08 95       	ret

00000ae0 <_exit>:
 ae0:	f8 94       	cli

00000ae2 <__stop_program>:
 ae2:	ff cf       	rjmp	.-2      	; 0xae2 <__stop_program>
