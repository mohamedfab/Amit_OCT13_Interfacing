
Amit_OCT13_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000135c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  0000135c  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000288c  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000120a  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 41 00 	call	0x82	; 0x82 <main>
      7a:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "Std_Types.h"
#include "Led_Interface.h"
#include "Lcd_Interface.h"
#include <stdio.h>
int main ()
{
      82:	0f 93       	push	r16
      84:	1f 93       	push	r17
      86:	df 93       	push	r29
      88:	cf 93       	push	r28
      8a:	cd b7       	in	r28, 0x3d	; 61
      8c:	de b7       	in	r29, 0x3e	; 62
      8e:	2a 97       	sbiw	r28, 0x0a	; 10
      90:	0f b6       	in	r0, 0x3f	; 63
      92:	f8 94       	cli
      94:	de bf       	out	0x3e, r29	; 62
      96:	0f be       	out	0x3f, r0	; 63
      98:	cd bf       	out	0x3d, r28	; 61
	Lcd_Init();
      9a:	0e 94 86 01 	call	0x30c	; 0x30c <Lcd_Init>
	u8 var = 200;
	u8 ch[10];
	sprintf(ch,"%d",var);
      9e:	00 d0       	rcall	.+0      	; 0xa0 <main+0x1e>
      a0:	00 d0       	rcall	.+0      	; 0xa2 <main+0x20>
      a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x22>
      a4:	ed b7       	in	r30, 0x3d	; 61
      a6:	fe b7       	in	r31, 0x3e	; 62
      a8:	31 96       	adiw	r30, 0x01	; 1
      aa:	8e 01       	movw	r16, r28
      ac:	0f 5f       	subi	r16, 0xFF	; 255
      ae:	1f 4f       	sbci	r17, 0xFF	; 255
      b0:	ad b7       	in	r26, 0x3d	; 61
      b2:	be b7       	in	r27, 0x3e	; 62
      b4:	12 96       	adiw	r26, 0x02	; 2
      b6:	1c 93       	st	X, r17
      b8:	0e 93       	st	-X, r16
      ba:	11 97       	sbiw	r26, 0x01	; 1
      bc:	80 e6       	ldi	r24, 0x60	; 96
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	93 83       	std	Z+3, r25	; 0x03
      c2:	82 83       	std	Z+2, r24	; 0x02
      c4:	88 ec       	ldi	r24, 0xC8	; 200
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	95 83       	std	Z+5, r25	; 0x05
      ca:	84 83       	std	Z+4, r24	; 0x04
      cc:	0e 94 d4 06 	call	0xda8	; 0xda8 <sprintf>
	Lcd_Display_str(ch);
      d0:	8d b7       	in	r24, 0x3d	; 61
      d2:	9e b7       	in	r25, 0x3e	; 62
      d4:	06 96       	adiw	r24, 0x06	; 6
      d6:	0f b6       	in	r0, 0x3f	; 63
      d8:	f8 94       	cli
      da:	9e bf       	out	0x3e, r25	; 62
      dc:	0f be       	out	0x3f, r0	; 63
      de:	8d bf       	out	0x3d, r24	; 61
      e0:	c8 01       	movw	r24, r16
      e2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Lcd_Display_str>
      e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x64>

000000e8 <Lcd_Cmd>:
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
void Lcd_Cmd(lcd_Cmd_Type command)
{
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	18 2f       	mov	r17, r24
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	60 ef       	ldi	r22, 0xF0	; 240
     100:	41 2f       	mov	r20, r17
     102:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	63 e0       	ldi	r22, 0x03	; 3
     10a:	41 e0       	ldi	r20, 0x01	; 1
     10c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     110:	05 e0       	ldi	r16, 0x05	; 5
     112:	80 2f       	mov	r24, r16
     114:	8a 95       	dec	r24
     116:	f1 f7       	brne	.-4      	; 0x114 <Lcd_Cmd+0x2c>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	63 e0       	ldi	r22, 0x03	; 3
     11c:	40 e0       	ldi	r20, 0x00	; 0
     11e:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     122:	80 e4       	ldi	r24, 0x40	; 64
     124:	e8 2e       	mov	r14, r24
     126:	8f e1       	ldi	r24, 0x1F	; 31
     128:	f8 2e       	mov	r15, r24
     12a:	c7 01       	movw	r24, r14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <Lcd_Cmd+0x44>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     130:	12 95       	swap	r17
     132:	10 7f       	andi	r17, 0xF0	; 240
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	60 ef       	ldi	r22, 0xF0	; 240
     138:	41 2f       	mov	r20, r17
     13a:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	63 e0       	ldi	r22, 0x03	; 3
     142:	41 e0       	ldi	r20, 0x01	; 1
     144:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     148:	0a 95       	dec	r16
     14a:	f1 f7       	brne	.-4      	; 0x148 <Lcd_Cmd+0x60>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	63 e0       	ldi	r22, 0x03	; 3
     150:	40 e0       	ldi	r20, 0x00	; 0
     152:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     156:	c7 01       	movw	r24, r14
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <Lcd_Cmd+0x70>

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();
}
     15c:	1f 91       	pop	r17
     15e:	0f 91       	pop	r16
     160:	ff 90       	pop	r15
     162:	ef 90       	pop	r14
     164:	08 95       	ret

00000166 <Lcd_Display_Chr>:
	Lcd_Goto_Row_Column(0, 0);
}


void Lcd_Display_Chr(u8 chr)
{
     166:	ef 92       	push	r14
     168:	ff 92       	push	r15
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	18 2f       	mov	r17, r24
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	61 e0       	ldi	r22, 0x01	; 1
     174:	41 e0       	ldi	r20, 0x01	; 1
     176:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	60 ef       	ldi	r22, 0xF0	; 240
     17e:	41 2f       	mov	r20, r17
     180:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	63 e0       	ldi	r22, 0x03	; 3
     188:	41 e0       	ldi	r20, 0x01	; 1
     18a:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     18e:	05 e0       	ldi	r16, 0x05	; 5
     190:	80 2f       	mov	r24, r16
     192:	8a 95       	dec	r24
     194:	f1 f7       	brne	.-4      	; 0x192 <Lcd_Display_Chr+0x2c>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	63 e0       	ldi	r22, 0x03	; 3
     19a:	40 e0       	ldi	r20, 0x00	; 0
     19c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a0:	90 e4       	ldi	r25, 0x40	; 64
     1a2:	e9 2e       	mov	r14, r25
     1a4:	9f e1       	ldi	r25, 0x1F	; 31
     1a6:	f9 2e       	mov	r15, r25
     1a8:	c7 01       	movw	r24, r14
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <Lcd_Display_Chr+0x44>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     1ae:	12 95       	swap	r17
     1b0:	10 7f       	andi	r17, 0xF0	; 240
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	60 ef       	ldi	r22, 0xF0	; 240
     1b6:	41 2f       	mov	r20, r17
     1b8:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	63 e0       	ldi	r22, 0x03	; 3
     1c0:	41 e0       	ldi	r20, 0x01	; 1
     1c2:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1c6:	0a 95       	dec	r16
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <Lcd_Display_Chr+0x60>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	63 e0       	ldi	r22, 0x03	; 3
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d4:	c7 01       	movw	r24, r14
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <Lcd_Display_Chr+0x70>


void Lcd_Display_Chr(u8 chr)
{
	Lcd_Data(chr);
}
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <Lcd_Display_str>:
void Lcd_Display_str(u8 str[])
{
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	ec 01       	movw	r28, r24
	while(*str != '\0')
     1f2:	18 81       	ld	r17, Y
     1f4:	11 23       	and	r17, r17
     1f6:	09 f4       	brne	.+2      	; 0x1fa <Lcd_Display_str+0x16>
     1f8:	3a c0       	rjmp	.+116    	; 0x26e <Lcd_Display_str+0x8a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1fa:	05 e0       	ldi	r16, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1fc:	20 e4       	ldi	r18, 0x40	; 64
     1fe:	e2 2e       	mov	r14, r18
     200:	2f e1       	ldi	r18, 0x1F	; 31
     202:	f2 2e       	mov	r15, r18
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	41 e0       	ldi	r20, 0x01	; 1
     20a:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	60 ef       	ldi	r22, 0xF0	; 240
     212:	41 2f       	mov	r20, r17
     214:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	63 e0       	ldi	r22, 0x03	; 3
     21c:	41 e0       	ldi	r20, 0x01	; 1
     21e:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     222:	80 2f       	mov	r24, r16
     224:	8a 95       	dec	r24
     226:	f1 f7       	brne	.-4      	; 0x224 <Lcd_Display_str+0x40>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	63 e0       	ldi	r22, 0x03	; 3
     22c:	40 e0       	ldi	r20, 0x00	; 0
     22e:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     232:	c7 01       	movw	r24, r14
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <Lcd_Display_str+0x50>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     238:	12 95       	swap	r17
     23a:	10 7f       	andi	r17, 0xF0	; 240
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	60 ef       	ldi	r22, 0xF0	; 240
     240:	41 2f       	mov	r20, r17
     242:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	63 e0       	ldi	r22, 0x03	; 3
     24a:	41 e0       	ldi	r20, 0x01	; 1
     24c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     250:	80 2f       	mov	r24, r16
     252:	8a 95       	dec	r24
     254:	f1 f7       	brne	.-4      	; 0x252 <Lcd_Display_str+0x6e>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	63 e0       	ldi	r22, 0x03	; 3
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     260:	c7 01       	movw	r24, r14
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <Lcd_Display_str+0x7e>
void Lcd_Display_str(u8 str[])
{
	while(*str != '\0')
	{
		Lcd_Display_Chr(*str);
		str++;
     266:	21 96       	adiw	r28, 0x01	; 1
{
	Lcd_Data(chr);
}
void Lcd_Display_str(u8 str[])
{
	while(*str != '\0')
     268:	18 81       	ld	r17, Y
     26a:	11 23       	and	r17, r17
     26c:	59 f6       	brne	.-106    	; 0x204 <Lcd_Display_str+0x20>
	{
		Lcd_Display_Chr(*str);
		str++;
	}
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	ff 90       	pop	r15
     278:	ef 90       	pop	r14
     27a:	08 95       	ret

0000027c <Lcd_Goto_Row_Column>:
void Lcd_Goto_Row_Column(u8 row, u8 column)
{
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
	switch (row)
     284:	88 23       	and	r24, r24
     286:	09 f0       	breq	.+2      	; 0x28a <Lcd_Goto_Row_Column+0xe>
     288:	3c c0       	rjmp	.+120    	; 0x302 <Lcd_Goto_Row_Column+0x86>
	{
	case 0:
		Lcd_Cmd(0x80+column);
     28a:	16 2f       	mov	r17, r22
     28c:	10 58       	subi	r17, 0x80	; 128
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	60 ef       	ldi	r22, 0xF0	; 240
     29c:	41 2f       	mov	r20, r17
     29e:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	63 e0       	ldi	r22, 0x03	; 3
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ac:	05 e0       	ldi	r16, 0x05	; 5
     2ae:	80 2f       	mov	r24, r16
     2b0:	8a 95       	dec	r24
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <Lcd_Goto_Row_Column+0x34>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	63 e0       	ldi	r22, 0x03	; 3
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2be:	30 e4       	ldi	r19, 0x40	; 64
     2c0:	e3 2e       	mov	r14, r19
     2c2:	3f e1       	ldi	r19, 0x1F	; 31
     2c4:	f3 2e       	mov	r15, r19
     2c6:	c7 01       	movw	r24, r14
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <Lcd_Goto_Row_Column+0x4c>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     2cc:	12 95       	swap	r17
     2ce:	10 7f       	andi	r17, 0xF0	; 240
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	60 ef       	ldi	r22, 0xF0	; 240
     2d4:	41 2f       	mov	r20, r17
     2d6:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	63 e0       	ldi	r22, 0x03	; 3
     2de:	41 e0       	ldi	r20, 0x01	; 1
     2e0:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2e4:	0a 95       	dec	r16
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <Lcd_Goto_Row_Column+0x68>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	63 e0       	ldi	r22, 0x03	; 3
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f2:	c7 01       	movw	r24, r14
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <Lcd_Goto_Row_Column+0x78>

	case 1:
		Lcd_Cmd(0xC0+column);
		break;
	}
}
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	08 95       	ret
		str++;
	}
}
void Lcd_Goto_Row_Column(u8 row, u8 column)
{
	switch (row)
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	c9 f7       	brne	.-14     	; 0x2f8 <Lcd_Goto_Row_Column+0x7c>
	case 0:
		Lcd_Cmd(0x80+column);
		break;

	case 1:
		Lcd_Cmd(0xC0+column);
     306:	16 2f       	mov	r17, r22
     308:	10 54       	subi	r17, 0x40	; 64
     30a:	c1 cf       	rjmp	.-126    	; 0x28e <Lcd_Goto_Row_Column+0x12>

0000030c <Lcd_Init>:
	/*	Enable pulse	*/
	Lcd_Pulse();
}

void Lcd_Init(void)
{
     30c:	9f 92       	push	r9
     30e:	af 92       	push	r10
     310:	bf 92       	push	r11
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
	/*	Configure LCD Control Lines as Output	*/
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	41 e0       	ldi	r20, 0x01	; 1
     328:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	62 e0       	ldi	r22, 0x02	; 2
     330:	41 e0       	ldi	r20, 0x01	; 1
     332:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	63 e0       	ldi	r22, 0x03	; 3
     33a:	41 e0       	ldi	r20, 0x01	; 1
     33c:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>

	/*	Configure LCD Data Lines as Output		*/
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	64 e0       	ldi	r22, 0x04	; 4
     344:	41 e0       	ldi	r20, 0x01	; 1
     346:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	65 e0       	ldi	r22, 0x05	; 5
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	66 e0       	ldi	r22, 0x06	; 6
     358:	41 e0       	ldi	r20, 0x01	; 1
     35a:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	67 e0       	ldi	r22, 0x07	; 7
     362:	41 e0       	ldi	r20, 0x01	; 1
     364:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>

	/*	Set LCD For Write Mode	*/
	Dio_Write_Channel(DIO_PORTB, DIO_PIN2, DIO_LOW);
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	62 e0       	ldi	r22, 0x02	; 2
     36c:	40 e0       	ldi	r20, 0x00	; 0
     36e:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
     372:	80 e6       	ldi	r24, 0x60	; 96
     374:	9a ee       	ldi	r25, 0xEA	; 234
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <Lcd_Init+0x6a>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	61 e0       	ldi	r22, 0x01	; 1
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	60 ef       	ldi	r22, 0xF0	; 240
     388:	43 e0       	ldi	r20, 0x03	; 3
     38a:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	63 e0       	ldi	r22, 0x03	; 3
     392:	41 e0       	ldi	r20, 0x01	; 1
     394:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     398:	e5 e0       	ldi	r30, 0x05	; 5
     39a:	fe 2e       	mov	r15, r30
     39c:	8f 2d       	mov	r24, r15
     39e:	8a 95       	dec	r24
     3a0:	f1 f7       	brne	.-4      	; 0x39e <Lcd_Init+0x92>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	63 e0       	ldi	r22, 0x03	; 3
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ac:	00 e4       	ldi	r16, 0x40	; 64
     3ae:	1f e1       	ldi	r17, 0x1F	; 31
     3b0:	c8 01       	movw	r24, r16
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <Lcd_Init+0xa6>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	60 ef       	ldi	r22, 0xF0	; 240
     3ba:	40 e3       	ldi	r20, 0x30	; 48
     3bc:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	63 e0       	ldi	r22, 0x03	; 3
     3c4:	41 e0       	ldi	r20, 0x01	; 1
     3c6:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3ca:	8f 2d       	mov	r24, r15
     3cc:	8a 95       	dec	r24
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <Lcd_Init+0xc0>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	63 e0       	ldi	r22, 0x03	; 3
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3da:	c8 01       	movw	r24, r16
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	f1 f7       	brne	.-4      	; 0x3dc <Lcd_Init+0xd0>
     3e0:	80 e2       	ldi	r24, 0x20	; 32
     3e2:	9e e4       	ldi	r25, 0x4E	; 78
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <Lcd_Init+0xd8>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	60 ef       	ldi	r22, 0xF0	; 240
     3f6:	43 e0       	ldi	r20, 0x03	; 3
     3f8:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	63 e0       	ldi	r22, 0x03	; 3
     400:	41 e0       	ldi	r20, 0x01	; 1
     402:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     406:	8f 2d       	mov	r24, r15
     408:	8a 95       	dec	r24
     40a:	f1 f7       	brne	.-4      	; 0x408 <Lcd_Init+0xfc>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	63 e0       	ldi	r22, 0x03	; 3
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     416:	c8 01       	movw	r24, r16
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <Lcd_Init+0x10c>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	60 ef       	ldi	r22, 0xF0	; 240
     420:	40 e3       	ldi	r20, 0x30	; 48
     422:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	63 e0       	ldi	r22, 0x03	; 3
     42a:	41 e0       	ldi	r20, 0x01	; 1
     42c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     430:	8f 2d       	mov	r24, r15
     432:	8a 95       	dec	r24
     434:	f1 f7       	brne	.-4      	; 0x432 <Lcd_Init+0x126>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	63 e0       	ldi	r22, 0x03	; 3
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     440:	c8 01       	movw	r24, r16
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <Lcd_Init+0x136>
     446:	80 e9       	ldi	r24, 0x90	; 144
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <Lcd_Init+0x13e>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	60 ef       	ldi	r22, 0xF0	; 240
     45c:	43 e0       	ldi	r20, 0x03	; 3
     45e:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	63 e0       	ldi	r22, 0x03	; 3
     466:	41 e0       	ldi	r20, 0x01	; 1
     468:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     46c:	8f 2d       	mov	r24, r15
     46e:	8a 95       	dec	r24
     470:	f1 f7       	brne	.-4      	; 0x46e <Lcd_Init+0x162>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	63 e0       	ldi	r22, 0x03	; 3
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     47c:	c8 01       	movw	r24, r16
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <Lcd_Init+0x172>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	60 ef       	ldi	r22, 0xF0	; 240
     486:	40 e3       	ldi	r20, 0x30	; 48
     488:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	63 e0       	ldi	r22, 0x03	; 3
     490:	41 e0       	ldi	r20, 0x01	; 1
     492:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     496:	8f 2d       	mov	r24, r15
     498:	8a 95       	dec	r24
     49a:	f1 f7       	brne	.-4      	; 0x498 <Lcd_Init+0x18c>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	63 e0       	ldi	r22, 0x03	; 3
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4a6:	c8 01       	movw	r24, r16
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <Lcd_Init+0x19c>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	60 ef       	ldi	r22, 0xF0	; 240
     4ba:	42 e0       	ldi	r20, 0x02	; 2
     4bc:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	63 e0       	ldi	r22, 0x03	; 3
     4c4:	41 e0       	ldi	r20, 0x01	; 1
     4c6:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4ca:	8f 2d       	mov	r24, r15
     4cc:	8a 95       	dec	r24
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <Lcd_Init+0x1c0>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	63 e0       	ldi	r22, 0x03	; 3
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4da:	c8 01       	movw	r24, r16
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <Lcd_Init+0x1d0>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	60 ef       	ldi	r22, 0xF0	; 240
     4e4:	40 e2       	ldi	r20, 0x20	; 32
     4e6:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	63 e0       	ldi	r22, 0x03	; 3
     4ee:	41 e0       	ldi	r20, 0x01	; 1
     4f0:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4f4:	8f 2d       	mov	r24, r15
     4f6:	8a 95       	dec	r24
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <Lcd_Init+0x1ea>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	63 e0       	ldi	r22, 0x03	; 3
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     504:	c8 01       	movw	r24, r16
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	f1 f7       	brne	.-4      	; 0x506 <Lcd_Init+0x1fa>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	60 ef       	ldi	r22, 0xF0	; 240
     518:	42 e0       	ldi	r20, 0x02	; 2
     51a:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	63 e0       	ldi	r22, 0x03	; 3
     522:	41 e0       	ldi	r20, 0x01	; 1
     524:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     528:	8f 2d       	mov	r24, r15
     52a:	8a 95       	dec	r24
     52c:	f1 f7       	brne	.-4      	; 0x52a <Lcd_Init+0x21e>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	63 e0       	ldi	r22, 0x03	; 3
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     538:	c8 01       	movw	r24, r16
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <Lcd_Init+0x22e>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	60 ef       	ldi	r22, 0xF0	; 240
     542:	40 e2       	ldi	r20, 0x20	; 32
     544:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	63 e0       	ldi	r22, 0x03	; 3
     54c:	41 e0       	ldi	r20, 0x01	; 1
     54e:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     552:	fa 94       	dec	r15
     554:	f1 f7       	brne	.-4      	; 0x552 <Lcd_Init+0x246>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	63 e0       	ldi	r22, 0x03	; 3
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     560:	c8 01       	movw	r24, r16
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <Lcd_Init+0x256>
     566:	73 e6       	ldi	r23, 0x63	; 99
     568:	e7 2e       	mov	r14, r23
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	f7 2e       	mov	r15, r23
     56e:	60 e4       	ldi	r22, 0x40	; 64
     570:	c6 2e       	mov	r12, r22
     572:	d1 2c       	mov	r13, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     574:	05 e0       	ldi	r16, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     576:	c0 e4       	ldi	r28, 0x40	; 64
     578:	df e1       	ldi	r29, 0x1F	; 31
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;

	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
     57a:	1c 2d       	mov	r17, r12
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	60 ef       	ldi	r22, 0xF0	; 240
     58a:	4c 2d       	mov	r20, r12
     58c:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	63 e0       	ldi	r22, 0x03	; 3
     594:	41 e0       	ldi	r20, 0x01	; 1
     596:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     59a:	55 e0       	ldi	r21, 0x05	; 5
     59c:	95 2e       	mov	r9, r21
     59e:	80 2f       	mov	r24, r16
     5a0:	8a 95       	dec	r24
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <Lcd_Init+0x294>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	63 e0       	ldi	r22, 0x03	; 3
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5ae:	40 e4       	ldi	r20, 0x40	; 64
     5b0:	a4 2e       	mov	r10, r20
     5b2:	4f e1       	ldi	r20, 0x1F	; 31
     5b4:	b4 2e       	mov	r11, r20
     5b6:	ce 01       	movw	r24, r28
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <Lcd_Init+0x2ac>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     5bc:	12 95       	swap	r17
     5be:	10 7f       	andi	r17, 0xF0	; 240
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	60 ef       	ldi	r22, 0xF0	; 240
     5c4:	41 2f       	mov	r20, r17
     5c6:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	63 e0       	ldi	r22, 0x03	; 3
     5ce:	41 e0       	ldi	r20, 0x01	; 1
     5d0:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5d4:	80 2f       	mov	r24, r16
     5d6:	8a 95       	dec	r24
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <Lcd_Init+0x2ca>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	63 e0       	ldi	r22, 0x03	; 3
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5e4:	ce 01       	movw	r24, r28
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <Lcd_Init+0x2da>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     5ea:	f7 01       	movw	r30, r14
     5ec:	10 81       	ld	r17, Z
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	41 e0       	ldi	r20, 0x01	; 1
     5f4:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	60 ef       	ldi	r22, 0xF0	; 240
     5fc:	41 2f       	mov	r20, r17
     5fe:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	63 e0       	ldi	r22, 0x03	; 3
     606:	41 e0       	ldi	r20, 0x01	; 1
     608:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     60c:	80 2f       	mov	r24, r16
     60e:	8a 95       	dec	r24
     610:	f1 f7       	brne	.-4      	; 0x60e <Lcd_Init+0x302>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     61c:	ce 01       	movw	r24, r28
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <Lcd_Init+0x312>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     622:	12 95       	swap	r17
     624:	10 7f       	andi	r17, 0xF0	; 240
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	60 ef       	ldi	r22, 0xF0	; 240
     62a:	41 2f       	mov	r20, r17
     62c:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	63 e0       	ldi	r22, 0x03	; 3
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     63a:	80 2f       	mov	r24, r16
     63c:	8a 95       	dec	r24
     63e:	f1 f7       	brne	.-4      	; 0x63c <Lcd_Init+0x330>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	63 e0       	ldi	r22, 0x03	; 3
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     64a:	ce 01       	movw	r24, r28
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <Lcd_Init+0x340>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     650:	f7 01       	movw	r30, r14
     652:	11 81       	ldd	r17, Z+1	; 0x01
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	60 ef       	ldi	r22, 0xF0	; 240
     662:	41 2f       	mov	r20, r17
     664:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	63 e0       	ldi	r22, 0x03	; 3
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     672:	80 2f       	mov	r24, r16
     674:	8a 95       	dec	r24
     676:	f1 f7       	brne	.-4      	; 0x674 <Lcd_Init+0x368>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	63 e0       	ldi	r22, 0x03	; 3
     67c:	40 e0       	ldi	r20, 0x00	; 0
     67e:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     682:	ce 01       	movw	r24, r28
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <Lcd_Init+0x378>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     688:	12 95       	swap	r17
     68a:	10 7f       	andi	r17, 0xF0	; 240
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	60 ef       	ldi	r22, 0xF0	; 240
     690:	41 2f       	mov	r20, r17
     692:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	63 e0       	ldi	r22, 0x03	; 3
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6a0:	80 2f       	mov	r24, r16
     6a2:	8a 95       	dec	r24
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <Lcd_Init+0x396>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	63 e0       	ldi	r22, 0x03	; 3
     6aa:	40 e0       	ldi	r20, 0x00	; 0
     6ac:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6b0:	ce 01       	movw	r24, r28
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <Lcd_Init+0x3a6>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     6b6:	f7 01       	movw	r30, r14
     6b8:	12 81       	ldd	r17, Z+2	; 0x02
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	41 e0       	ldi	r20, 0x01	; 1
     6c0:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	60 ef       	ldi	r22, 0xF0	; 240
     6c8:	41 2f       	mov	r20, r17
     6ca:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	63 e0       	ldi	r22, 0x03	; 3
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6d8:	80 2f       	mov	r24, r16
     6da:	8a 95       	dec	r24
     6dc:	f1 f7       	brne	.-4      	; 0x6da <Lcd_Init+0x3ce>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	63 e0       	ldi	r22, 0x03	; 3
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6e8:	ce 01       	movw	r24, r28
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <Lcd_Init+0x3de>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     6ee:	12 95       	swap	r17
     6f0:	10 7f       	andi	r17, 0xF0	; 240
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	60 ef       	ldi	r22, 0xF0	; 240
     6f6:	41 2f       	mov	r20, r17
     6f8:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	63 e0       	ldi	r22, 0x03	; 3
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     706:	80 2f       	mov	r24, r16
     708:	8a 95       	dec	r24
     70a:	f1 f7       	brne	.-4      	; 0x708 <Lcd_Init+0x3fc>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	63 e0       	ldi	r22, 0x03	; 3
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     716:	ce 01       	movw	r24, r28
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <Lcd_Init+0x40c>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     71c:	f7 01       	movw	r30, r14
     71e:	13 81       	ldd	r17, Z+3	; 0x03
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	41 e0       	ldi	r20, 0x01	; 1
     726:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	60 ef       	ldi	r22, 0xF0	; 240
     72e:	41 2f       	mov	r20, r17
     730:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	63 e0       	ldi	r22, 0x03	; 3
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     73e:	80 2f       	mov	r24, r16
     740:	8a 95       	dec	r24
     742:	f1 f7       	brne	.-4      	; 0x740 <Lcd_Init+0x434>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	63 e0       	ldi	r22, 0x03	; 3
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     74e:	ce 01       	movw	r24, r28
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <Lcd_Init+0x444>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     754:	12 95       	swap	r17
     756:	10 7f       	andi	r17, 0xF0	; 240
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	60 ef       	ldi	r22, 0xF0	; 240
     75c:	41 2f       	mov	r20, r17
     75e:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	63 e0       	ldi	r22, 0x03	; 3
     766:	41 e0       	ldi	r20, 0x01	; 1
     768:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     76c:	80 2f       	mov	r24, r16
     76e:	8a 95       	dec	r24
     770:	f1 f7       	brne	.-4      	; 0x76e <Lcd_Init+0x462>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	63 e0       	ldi	r22, 0x03	; 3
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     77c:	ce 01       	movw	r24, r28
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <Lcd_Init+0x472>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     782:	f7 01       	movw	r30, r14
     784:	14 81       	ldd	r17, Z+4	; 0x04
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	41 e0       	ldi	r20, 0x01	; 1
     78c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	60 ef       	ldi	r22, 0xF0	; 240
     794:	41 2f       	mov	r20, r17
     796:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	41 e0       	ldi	r20, 0x01	; 1
     7a0:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7a4:	80 2f       	mov	r24, r16
     7a6:	8a 95       	dec	r24
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <Lcd_Init+0x49a>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	63 e0       	ldi	r22, 0x03	; 3
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7b4:	ce 01       	movw	r24, r28
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <Lcd_Init+0x4aa>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     7ba:	12 95       	swap	r17
     7bc:	10 7f       	andi	r17, 0xF0	; 240
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	60 ef       	ldi	r22, 0xF0	; 240
     7c2:	41 2f       	mov	r20, r17
     7c4:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	63 e0       	ldi	r22, 0x03	; 3
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7d2:	80 2f       	mov	r24, r16
     7d4:	8a 95       	dec	r24
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <Lcd_Init+0x4c8>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	63 e0       	ldi	r22, 0x03	; 3
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <Lcd_Init+0x4d8>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     7e8:	f7 01       	movw	r30, r14
     7ea:	15 81       	ldd	r17, Z+5	; 0x05
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	60 ef       	ldi	r22, 0xF0	; 240
     7fa:	41 2f       	mov	r20, r17
     7fc:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	63 e0       	ldi	r22, 0x03	; 3
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     80a:	80 2f       	mov	r24, r16
     80c:	8a 95       	dec	r24
     80e:	f1 f7       	brne	.-4      	; 0x80c <Lcd_Init+0x500>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	63 e0       	ldi	r22, 0x03	; 3
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     81a:	ce 01       	movw	r24, r28
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	f1 f7       	brne	.-4      	; 0x81c <Lcd_Init+0x510>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     820:	12 95       	swap	r17
     822:	10 7f       	andi	r17, 0xF0	; 240
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	60 ef       	ldi	r22, 0xF0	; 240
     828:	41 2f       	mov	r20, r17
     82a:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	63 e0       	ldi	r22, 0x03	; 3
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     838:	80 2f       	mov	r24, r16
     83a:	8a 95       	dec	r24
     83c:	f1 f7       	brne	.-4      	; 0x83a <Lcd_Init+0x52e>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	63 e0       	ldi	r22, 0x03	; 3
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     848:	ce 01       	movw	r24, r28
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <Lcd_Init+0x53e>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     84e:	f7 01       	movw	r30, r14
     850:	16 81       	ldd	r17, Z+6	; 0x06
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	60 ef       	ldi	r22, 0xF0	; 240
     860:	41 2f       	mov	r20, r17
     862:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	63 e0       	ldi	r22, 0x03	; 3
     86a:	41 e0       	ldi	r20, 0x01	; 1
     86c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     870:	80 2f       	mov	r24, r16
     872:	8a 95       	dec	r24
     874:	f1 f7       	brne	.-4      	; 0x872 <__stack+0x13>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	63 e0       	ldi	r22, 0x03	; 3
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     880:	ce 01       	movw	r24, r28
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <__stack+0x23>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     886:	12 95       	swap	r17
     888:	10 7f       	andi	r17, 0xF0	; 240
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	60 ef       	ldi	r22, 0xF0	; 240
     88e:	41 2f       	mov	r20, r17
     890:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	63 e0       	ldi	r22, 0x03	; 3
     898:	41 e0       	ldi	r20, 0x01	; 1
     89a:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     89e:	80 2f       	mov	r24, r16
     8a0:	8a 95       	dec	r24
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__stack+0x41>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	63 e0       	ldi	r22, 0x03	; 3
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <__stack+0x51>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     8b4:	f7 01       	movw	r30, r14
     8b6:	17 81       	ldd	r17, Z+7	; 0x07
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	41 e0       	ldi	r20, 0x01	; 1
     8be:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	60 ef       	ldi	r22, 0xF0	; 240
     8c6:	41 2f       	mov	r20, r17
     8c8:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	63 e0       	ldi	r22, 0x03	; 3
     8d0:	41 e0       	ldi	r20, 0x01	; 1
     8d2:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8d6:	80 2f       	mov	r24, r16
     8d8:	8a 95       	dec	r24
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <__stack+0x79>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	63 e0       	ldi	r22, 0x03	; 3
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8e6:	ce 01       	movw	r24, r28
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <__stack+0x89>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     8ec:	12 95       	swap	r17
     8ee:	10 7f       	andi	r17, 0xF0	; 240
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	60 ef       	ldi	r22, 0xF0	; 240
     8f4:	41 2f       	mov	r20, r17
     8f6:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	63 e0       	ldi	r22, 0x03	; 3
     8fe:	41 e0       	ldi	r20, 0x01	; 1
     900:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     904:	80 2f       	mov	r24, r16
     906:	8a 95       	dec	r24
     908:	f1 f7       	brne	.-4      	; 0x906 <__stack+0xa7>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	63 e0       	ldi	r22, 0x03	; 3
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     914:	ce 01       	movw	r24, r28
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <__stack+0xb7>
     91a:	88 e0       	ldi	r24, 0x08	; 8
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	c8 0e       	add	r12, r24
     920:	d9 1e       	adc	r13, r25
     922:	e8 0e       	add	r14, r24
     924:	f9 1e       	adc	r15, r25
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;

	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
     926:	90 e8       	ldi	r25, 0x80	; 128
     928:	c9 16       	cp	r12, r25
     92a:	d1 04       	cpc	r13, r1
     92c:	09 f0       	breq	.+2      	; 0x930 <__stack+0xd1>
     92e:	25 ce       	rjmp	.-950    	; 0x57a <Lcd_Init+0x26e>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	60 ef       	ldi	r22, 0xF0	; 240
     93e:	40 e8       	ldi	r20, 0x80	; 128
     940:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	63 e0       	ldi	r22, 0x03	; 3
     948:	41 e0       	ldi	r20, 0x01	; 1
     94a:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     94e:	89 2d       	mov	r24, r9
     950:	8a 95       	dec	r24
     952:	f1 f7       	brne	.-4      	; 0x950 <__stack+0xf1>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	63 e0       	ldi	r22, 0x03	; 3
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     95e:	c5 01       	movw	r24, r10
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	f1 f7       	brne	.-4      	; 0x960 <__stack+0x101>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	60 ef       	ldi	r22, 0xF0	; 240
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	0e 94 af 06 	call	0xd5e	; 0xd5e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	63 e0       	ldi	r22, 0x03	; 3
     972:	41 e0       	ldi	r20, 0x01	; 1
     974:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     978:	89 2d       	mov	r24, r9
     97a:	8a 95       	dec	r24
     97c:	f1 f7       	brne	.-4      	; 0x97a <__stack+0x11b>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	63 e0       	ldi	r22, 0x03	; 3
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     988:	c5 01       	movw	r24, r10
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <__stack+0x12b>
	Lcd_Cmd(0x03);
	Lcd_Cmd(0x02);
	Lcd_Cmd(0x02);
	Lcd_WriteCustom();
	Lcd_Goto_Row_Column(0, 0);
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	bf 90       	pop	r11
     9a0:	af 90       	pop	r10
     9a2:	9f 90       	pop	r9
     9a4:	08 95       	ret

000009a6 <Button_Is_Pressed>:

boolean Button_Is_Pressed(button_id_t button)
{
	boolean loc_button_pressed = FALSE;

	switch(button)
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	89 f0       	breq	.+34     	; 0x9cc <Button_Is_Pressed+0x26>
     9aa:	81 30       	cpi	r24, 0x01	; 1
     9ac:	28 f0       	brcs	.+10     	; 0x9b8 <Button_Is_Pressed+0x12>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	b1 f0       	breq	.+44     	; 0x9de <Button_Is_Pressed+0x38>
     9b2:	90 e0       	ldi	r25, 0x00	; 0
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
     9b4:	89 2f       	mov	r24, r25
     9b6:	08 95       	ret
	boolean loc_button_pressed = FALSE;

	switch(button)
	{
	case BUTTON0:
		if (Dio_Read_Channel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	0e 94 81 06 	call	0xd02	; 0xd02 <Dio_Read_Channel>
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	b9 f7       	brne	.-18     	; 0x9b4 <Button_Is_Pressed+0xe>
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON2:
		if (Dio_Read_Channel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
     9c6:	91 e0       	ldi	r25, 0x01	; 1
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
     9c8:	89 2f       	mov	r24, r25
     9ca:	08 95       	ret
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON1:
		if (Dio_Read_Channel(DIO_PORTB, DIO_PIN4) == DIO_HIGH)
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	64 e0       	ldi	r22, 0x04	; 4
     9d0:	0e 94 81 06 	call	0xd02	; 0xd02 <Dio_Read_Channel>
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	b1 f3       	breq	.-20     	; 0x9c6 <Button_Is_Pressed+0x20>
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
     9da:	89 2f       	mov	r24, r25
     9dc:	08 95       	ret
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON2:
		if (Dio_Read_Channel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
     9de:	83 e0       	ldi	r24, 0x03	; 3
     9e0:	62 e0       	ldi	r22, 0x02	; 2
     9e2:	0e 94 81 06 	call	0xd02	; 0xd02 <Dio_Read_Channel>
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	69 f3       	breq	.-38     	; 0x9c6 <Button_Is_Pressed+0x20>
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
     9ec:	89 2f       	mov	r24, r25
     9ee:	08 95       	ret

000009f0 <Button_Init>:

#include "Button_Interface.h"

void Button_Init(void)
{
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	64 e0       	ldi	r22, 0x04	; 4
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	62 e0       	ldi	r22, 0x02	; 2
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>
}
     a0e:	08 95       	ret

00000a10 <Led_Toggle>:
	}
}

void Led_Toggle(led_id_t led)
{
	switch (led)
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	79 f0       	breq	.+30     	; 0xa32 <Led_Toggle+0x22>
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	28 f4       	brcc	.+10     	; 0xa22 <Led_Toggle+0x12>
	{
	case LED0:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN2);
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	62 e0       	ldi	r22, 0x02	; 2
     a1c:	0e 94 4c 06 	call	0xc98	; 0xc98 <Dio_Flip_Channel>
     a20:	08 95       	ret
	}
}

void Led_Toggle(led_id_t led)
{
	switch (led)
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	09 f0       	breq	.+2      	; 0xa28 <Led_Toggle+0x18>
     a26:	08 95       	ret
	case LED1:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN7);
		break;

	case LED2:
		Dio_Flip_Channel(DIO_PORTD, DIO_PIN3);
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	63 e0       	ldi	r22, 0x03	; 3
     a2c:	0e 94 4c 06 	call	0xc98	; 0xc98 <Dio_Flip_Channel>
     a30:	08 95       	ret
	case LED0:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN2);
		break;

	case LED1:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN7);
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	67 e0       	ldi	r22, 0x07	; 7
     a36:	0e 94 4c 06 	call	0xc98	; 0xc98 <Dio_Flip_Channel>
     a3a:	08 95       	ret

00000a3c <Led_OFF>:
	}
}

void Led_OFF(led_id_t led)
{
	switch (led)
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	89 f0       	breq	.+34     	; 0xa62 <Led_OFF+0x26>
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	30 f4       	brcc	.+12     	; 0xa50 <Led_OFF+0x14>
	{
	case LED0:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN2, DIO_LOW);
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	62 e0       	ldi	r22, 0x02	; 2
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
     a4e:	08 95       	ret
	}
}

void Led_OFF(led_id_t led)
{
	switch (led)
     a50:	82 30       	cpi	r24, 0x02	; 2
     a52:	09 f0       	breq	.+2      	; 0xa56 <Led_OFF+0x1a>
     a54:	08 95       	ret
	case LED1:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN7, DIO_LOW);
		break;

	case LED2:
		Dio_Write_Channel(DIO_PORTD, DIO_PIN3, DIO_LOW);
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	63 e0       	ldi	r22, 0x03	; 3
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
     a60:	08 95       	ret
	case LED0:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN2, DIO_LOW);
		break;

	case LED1:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN7, DIO_LOW);
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	67 e0       	ldi	r22, 0x07	; 7
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
     a6c:	08 95       	ret

00000a6e <Led_ON>:
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
}

void Led_ON(led_id_t led)
{
	switch (led)
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	89 f0       	breq	.+34     	; 0xa94 <Led_ON+0x26>
     a72:	81 30       	cpi	r24, 0x01	; 1
     a74:	30 f4       	brcc	.+12     	; 0xa82 <Led_ON+0x14>
	{
	case LED0:

#if(LED0_CONECTION == SOURCE)
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_HIGH);
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	62 e0       	ldi	r22, 0x02	; 2
     a7a:	41 e0       	ldi	r20, 0x01	; 1
     a7c:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
     a80:	08 95       	ret
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
}

void Led_ON(led_id_t led)
{
	switch (led)
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	09 f0       	breq	.+2      	; 0xa88 <Led_ON+0x1a>
     a86:	08 95       	ret

	case LED1:
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
		break;
	case LED2:
		Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_HIGH);
     a88:	83 e0       	ldi	r24, 0x03	; 3
     a8a:	63 e0       	ldi	r22, 0x03	; 3
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
     a92:	08 95       	ret
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
#endif
		break;

	case LED1:
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	67 e0       	ldi	r22, 0x07	; 7
     a98:	41 e0       	ldi	r20, 0x01	; 1
     a9a:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
     a9e:	08 95       	ret

00000aa0 <Led_Init>:

#include "Led_Interface.h"

void Led_Init(void)
{
	Dio_Configure_Channel(LED0_PORT, LED0_PIN, DIO_OUTPUT);
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	62 e0       	ldi	r22, 0x02	; 2
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>
	Dio_Configure_Channel(LED1_PORT, LED1_PIN, DIO_OUTPUT);
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	67 e0       	ldi	r22, 0x07	; 7
     aae:	41 e0       	ldi	r20, 0x01	; 1
     ab0:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>
	Dio_Configure_Channel(LED2_PORT, LED2_PIN, DIO_OUTPUT);
     ab4:	83 e0       	ldi	r24, 0x03	; 3
     ab6:	63 e0       	ldi	r22, 0x03	; 3
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	0e 94 6f 05 	call	0xade	; 0xade <Dio_Configure_Channel>

	Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	62 e0       	ldi	r22, 0x02	; 2
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_LOW);
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	67 e0       	ldi	r22, 0x07	; 7
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	63 e0       	ldi	r22, 0x03	; 3
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	0e 94 dd 05 	call	0xbba	; 0xbba <Dio_Write_Channel>
}
     adc:	08 95       	ret

00000ade <Dio_Configure_Channel>:
#include "Dio_Interface.h"


void Dio_Configure_Channel(dio_port_t port, dio_pin_t pin , dio_direction_t direction)
{
	switch (port)
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	19 f1       	breq	.+70     	; 0xb28 <Dio_Configure_Channel+0x4a>
     ae2:	81 30       	cpi	r24, 0x01	; 1
     ae4:	28 f0       	brcs	.+10     	; 0xaf0 <Dio_Configure_Channel+0x12>
     ae6:	82 30       	cpi	r24, 0x02	; 2
     ae8:	69 f1       	breq	.+90     	; 0xb44 <Dio_Configure_Channel+0x66>
     aea:	83 30       	cpi	r24, 0x03	; 3
     aec:	79 f0       	breq	.+30     	; 0xb0c <Dio_Configure_Channel+0x2e>
     aee:	08 95       	ret
	{
	case DIO_PORTA:
			if (direction == DIO_INPUT)
     af0:	44 23       	and	r20, r20
     af2:	b1 f5       	brne	.+108    	; 0xb60 <Dio_Configure_Channel+0x82>
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
     af4:	2a b3       	in	r18, 0x1a	; 26
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <Dio_Configure_Channel+0x22>
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	6a 95       	dec	r22
     b02:	e2 f7       	brpl	.-8      	; 0xafc <Dio_Configure_Channel+0x1e>
     b04:	80 95       	com	r24
     b06:	82 23       	and	r24, r18
     b08:	8a bb       	out	0x1a, r24	; 26
     b0a:	08 95       	ret
					SET_BIT(DIO_DDRC_REG,pin);
				}
			break;

	case DIO_PORTD:
				if (direction == DIO_INPUT)
     b0c:	44 23       	and	r20, r20
     b0e:	09 f4       	brne	.+2      	; 0xb12 <Dio_Configure_Channel+0x34>
     b10:	48 c0       	rjmp	.+144    	; 0xba2 <Dio_Configure_Channel+0xc4>
				{
					CLEAR_BIT(DIO_DDRD_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRD_REG,pin);
     b12:	21 b3       	in	r18, 0x11	; 17
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <Dio_Configure_Channel+0x40>
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	6a 95       	dec	r22
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <Dio_Configure_Channel+0x3c>
     b22:	28 2b       	or	r18, r24
     b24:	21 bb       	out	0x11, r18	; 17
     b26:	08 95       	ret
				SET_BIT(DIO_DDRA_REG,pin);
			}
		break;

	case DIO_PORTB:
				if (direction == DIO_INPUT)
     b28:	44 23       	and	r20, r20
     b2a:	81 f5       	brne	.+96     	; 0xb8c <Dio_Configure_Channel+0xae>
				{
					CLEAR_BIT(DIO_DDRB_REG,pin);
     b2c:	27 b3       	in	r18, 0x17	; 23
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <Dio_Configure_Channel+0x5a>
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	6a 95       	dec	r22
     b3a:	e2 f7       	brpl	.-8      	; 0xb34 <Dio_Configure_Channel+0x56>
     b3c:	80 95       	com	r24
     b3e:	82 23       	and	r24, r18
     b40:	87 bb       	out	0x17, r24	; 23
     b42:	08 95       	ret
					SET_BIT(DIO_DDRB_REG,pin);
				}
			break;

	case DIO_PORTC:
				if (direction == DIO_INPUT)
     b44:	44 23       	and	r20, r20
     b46:	b9 f4       	brne	.+46     	; 0xb76 <Dio_Configure_Channel+0x98>
				{
					CLEAR_BIT(DIO_DDRC_REG,pin);
     b48:	24 b3       	in	r18, 0x14	; 20
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <Dio_Configure_Channel+0x76>
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	6a 95       	dec	r22
     b56:	e2 f7       	brpl	.-8      	; 0xb50 <Dio_Configure_Channel+0x72>
     b58:	80 95       	com	r24
     b5a:	82 23       	and	r24, r18
     b5c:	84 bb       	out	0x14, r24	; 20
     b5e:	08 95       	ret
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
			}
			else
			{
				SET_BIT(DIO_DDRA_REG,pin);
     b60:	2a b3       	in	r18, 0x1a	; 26
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <Dio_Configure_Channel+0x8e>
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	6a 95       	dec	r22
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <Dio_Configure_Channel+0x8a>
     b70:	28 2b       	or	r18, r24
     b72:	2a bb       	out	0x1a, r18	; 26
     b74:	08 95       	ret
				{
					CLEAR_BIT(DIO_DDRC_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRC_REG,pin);
     b76:	24 b3       	in	r18, 0x14	; 20
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <Dio_Configure_Channel+0xa4>
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	6a 95       	dec	r22
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <Dio_Configure_Channel+0xa0>
     b86:	28 2b       	or	r18, r24
     b88:	24 bb       	out	0x14, r18	; 20
     b8a:	08 95       	ret
				{
					CLEAR_BIT(DIO_DDRB_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRB_REG,pin);
     b8c:	27 b3       	in	r18, 0x17	; 23
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <Dio_Configure_Channel+0xba>
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	6a 95       	dec	r22
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <Dio_Configure_Channel+0xb6>
     b9c:	28 2b       	or	r18, r24
     b9e:	27 bb       	out	0x17, r18	; 23
     ba0:	08 95       	ret
			break;

	case DIO_PORTD:
				if (direction == DIO_INPUT)
				{
					CLEAR_BIT(DIO_DDRD_REG,pin);
     ba2:	21 b3       	in	r18, 0x11	; 17
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <Dio_Configure_Channel+0xd0>
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	6a 95       	dec	r22
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <Dio_Configure_Channel+0xcc>
     bb2:	80 95       	com	r24
     bb4:	82 23       	and	r24, r18
     bb6:	81 bb       	out	0x11, r24	; 17
     bb8:	08 95       	ret

00000bba <Dio_Write_Channel>:
	}
}

void Dio_Write_Channel(dio_port_t port, dio_pin_t pin , dio_level_t level)
{
	switch (port)
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	29 f1       	breq	.+74     	; 0xc08 <Dio_Write_Channel+0x4e>
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	28 f0       	brcs	.+10     	; 0xbcc <Dio_Write_Channel+0x12>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	79 f1       	breq	.+94     	; 0xc24 <Dio_Write_Channel+0x6a>
     bc6:	83 30       	cpi	r24, 0x03	; 3
     bc8:	81 f0       	breq	.+32     	; 0xbea <Dio_Write_Channel+0x30>
     bca:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
     bcc:	41 30       	cpi	r20, 0x01	; 1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <Dio_Write_Channel+0x18>
     bd0:	4d c0       	rjmp	.+154    	; 0xc6c <Dio_Write_Channel+0xb2>
		{
			SET_BIT(DIO_PORTA_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
     bd2:	2b b3       	in	r18, 0x1b	; 27
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <Dio_Write_Channel+0x24>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	6a 95       	dec	r22
     be0:	e2 f7       	brpl	.-8      	; 0xbda <Dio_Write_Channel+0x20>
     be2:	80 95       	com	r24
     be4:	82 23       	and	r24, r18
     be6:	8b bb       	out	0x1b, r24	; 27
     be8:	08 95       	ret
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
     bea:	41 30       	cpi	r20, 0x01	; 1
     bec:	09 f4       	brne	.+2      	; 0xbf0 <Dio_Write_Channel+0x36>
     bee:	49 c0       	rjmp	.+146    	; 0xc82 <Dio_Write_Channel+0xc8>
		{
			SET_BIT(DIO_PORTD_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
     bf0:	22 b3       	in	r18, 0x12	; 18
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <Dio_Write_Channel+0x42>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	6a 95       	dec	r22
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <Dio_Write_Channel+0x3e>
     c00:	80 95       	com	r24
     c02:	82 23       	and	r24, r18
     c04:	82 bb       	out	0x12, r24	; 18
     c06:	08 95       	ret
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
     c08:	41 30       	cpi	r20, 0x01	; 1
     c0a:	29 f1       	breq	.+74     	; 0xc56 <Dio_Write_Channel+0x9c>
		{
			SET_BIT(DIO_PORTB_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
     c0c:	28 b3       	in	r18, 0x18	; 24
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <Dio_Write_Channel+0x5e>
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	6a 95       	dec	r22
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <Dio_Write_Channel+0x5a>
     c1c:	80 95       	com	r24
     c1e:	82 23       	and	r24, r18
     c20:	88 bb       	out	0x18, r24	; 24
     c22:	08 95       	ret
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
     c24:	41 30       	cpi	r20, 0x01	; 1
     c26:	61 f0       	breq	.+24     	; 0xc40 <Dio_Write_Channel+0x86>
		{
			SET_BIT(DIO_PORTC_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
     c28:	25 b3       	in	r18, 0x15	; 21
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <Dio_Write_Channel+0x7a>
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	6a 95       	dec	r22
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <Dio_Write_Channel+0x76>
     c38:	80 95       	com	r24
     c3a:	82 23       	and	r24, r18
     c3c:	85 bb       	out	0x15, r24	; 21
     c3e:	08 95       	ret
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTC_REG,pin);
     c40:	25 b3       	in	r18, 0x15	; 21
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <Dio_Write_Channel+0x92>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	6a 95       	dec	r22
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <Dio_Write_Channel+0x8e>
     c50:	28 2b       	or	r18, r24
     c52:	25 bb       	out	0x15, r18	; 21
     c54:	08 95       	ret
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTB_REG,pin);
     c56:	28 b3       	in	r18, 0x18	; 24
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <Dio_Write_Channel+0xa8>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	6a 95       	dec	r22
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <Dio_Write_Channel+0xa4>
     c66:	28 2b       	or	r18, r24
     c68:	28 bb       	out	0x18, r18	; 24
     c6a:	08 95       	ret
	switch (port)
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTA_REG,pin);
     c6c:	2b b3       	in	r18, 0x1b	; 27
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <Dio_Write_Channel+0xbe>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	6a 95       	dec	r22
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <Dio_Write_Channel+0xba>
     c7c:	28 2b       	or	r18, r24
     c7e:	2b bb       	out	0x1b, r18	; 27
     c80:	08 95       	ret
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTD_REG,pin);
     c82:	22 b3       	in	r18, 0x12	; 18
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <Dio_Write_Channel+0xd4>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	6a 95       	dec	r22
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <Dio_Write_Channel+0xd0>
     c92:	28 2b       	or	r18, r24
     c94:	22 bb       	out	0x12, r18	; 18
     c96:	08 95       	ret

00000c98 <Dio_Flip_Channel>:
	}
}

void Dio_Flip_Channel(dio_port_t port, dio_pin_t pin)
{
	switch(port)
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	e9 f0       	breq	.+58     	; 0xcd6 <Dio_Flip_Channel+0x3e>
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	28 f0       	brcs	.+10     	; 0xcaa <Dio_Flip_Channel+0x12>
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	21 f1       	breq	.+72     	; 0xcec <Dio_Flip_Channel+0x54>
     ca4:	83 30       	cpi	r24, 0x03	; 3
     ca6:	61 f0       	breq	.+24     	; 0xcc0 <Dio_Flip_Channel+0x28>
     ca8:	08 95       	ret
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
     caa:	2b b3       	in	r18, 0x1b	; 27
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <Dio_Flip_Channel+0x1e>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	6a 95       	dec	r22
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <Dio_Flip_Channel+0x1a>
     cba:	28 27       	eor	r18, r24
     cbc:	2b bb       	out	0x1b, r18	; 27
     cbe:	08 95       	ret
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
		break;

	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
     cc0:	22 b3       	in	r18, 0x12	; 18
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <Dio_Flip_Channel+0x34>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	6a 95       	dec	r22
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <Dio_Flip_Channel+0x30>
     cd0:	28 27       	eor	r18, r24
     cd2:	22 bb       	out	0x12, r18	; 18
     cd4:	08 95       	ret
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
		break;

	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
     cd6:	28 b3       	in	r18, 0x18	; 24
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <Dio_Flip_Channel+0x4a>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	6a 95       	dec	r22
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <Dio_Flip_Channel+0x46>
     ce6:	28 27       	eor	r18, r24
     ce8:	28 bb       	out	0x18, r18	; 24
     cea:	08 95       	ret
		break;

	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
     cec:	25 b3       	in	r18, 0x15	; 21
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <Dio_Flip_Channel+0x60>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	6a 95       	dec	r22
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <Dio_Flip_Channel+0x5c>
     cfc:	28 27       	eor	r18, r24
     cfe:	25 bb       	out	0x15, r18	; 21
     d00:	08 95       	ret

00000d02 <Dio_Read_Channel>:

dio_level_t Dio_Read_Channel(dio_port_t port, dio_pin_t pin)
{
	dio_level_t loc_result = DIO_LOW;

	switch (port)
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	d1 f0       	breq	.+52     	; 0xd3a <Dio_Read_Channel+0x38>
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	30 f0       	brcs	.+12     	; 0xd16 <Dio_Read_Channel+0x14>
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	f9 f0       	breq	.+62     	; 0xd4c <Dio_Read_Channel+0x4a>
     d0e:	83 30       	cpi	r24, 0x03	; 3
     d10:	59 f0       	breq	.+22     	; 0xd28 <Dio_Read_Channel+0x26>
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	08 95       	ret
	{
	case DIO_PORTA:
		loc_result=CHECK_BIT(DIO_PINA_REG,pin);
     d16:	89 b3       	in	r24, 0x19	; 25
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <Dio_Read_Channel+0x1e>
     d1c:	95 95       	asr	r25
     d1e:	87 95       	ror	r24
     d20:	6a 95       	dec	r22
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <Dio_Read_Channel+0x1a>
     d24:	81 70       	andi	r24, 0x01	; 1
     d26:	08 95       	ret
			loc_result = DIO_LOW;
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
     d28:	80 b3       	in	r24, 0x10	; 16
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <Dio_Read_Channel+0x30>
     d2e:	95 95       	asr	r25
     d30:	87 95       	ror	r24
     d32:	6a 95       	dec	r22
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <Dio_Read_Channel+0x2c>
     d36:	81 70       	andi	r24, 0x01	; 1
			loc_result = DIO_LOW;
		}
		break;
	}
	return loc_result;
}
     d38:	08 95       	ret
//			loc_result = DIO_LOW;
//		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
     d3a:	86 b3       	in	r24, 0x16	; 22
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <Dio_Read_Channel+0x42>
     d40:	95 95       	asr	r25
     d42:	87 95       	ror	r24
     d44:	6a 95       	dec	r22
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <Dio_Read_Channel+0x3e>
     d48:	81 70       	andi	r24, 0x01	; 1
     d4a:	08 95       	ret
			loc_result = DIO_LOW;
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
     d4c:	83 b3       	in	r24, 0x13	; 19
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <Dio_Read_Channel+0x54>
     d52:	95 95       	asr	r25
     d54:	87 95       	ror	r24
     d56:	6a 95       	dec	r22
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <Dio_Read_Channel+0x50>
     d5a:	81 70       	andi	r24, 0x01	; 1
     d5c:	08 95       	ret

00000d5e <Dio_Write_Channel_Group>:



void Dio_Write_Channel_Group(dio_port_t port,u8 mask,u8 data)
{
	switch (port)
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	a9 f0       	breq	.+42     	; 0xd8c <Dio_Write_Channel_Group+0x2e>
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	28 f0       	brcs	.+10     	; 0xd70 <Dio_Write_Channel_Group+0x12>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	c1 f0       	breq	.+48     	; 0xd9a <Dio_Write_Channel_Group+0x3c>
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	41 f0       	breq	.+16     	; 0xd7e <Dio_Write_Channel_Group+0x20>
     d6e:	08 95       	ret
	{
		case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data&mask);
     d70:	8b b3       	in	r24, 0x1b	; 27
     d72:	46 23       	and	r20, r22
     d74:	60 95       	com	r22
     d76:	86 23       	and	r24, r22
     d78:	84 2b       	or	r24, r20
     d7a:	8b bb       	out	0x1b, r24	; 27
     d7c:	08 95       	ret
		case DIO_PORTC:
			DIO_PORTC_REG = (DIO_PORTC_REG&~mask)|(data&mask);
		break;

		case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG&~mask)|(data&mask);
     d7e:	82 b3       	in	r24, 0x12	; 18
     d80:	46 23       	and	r20, r22
     d82:	60 95       	com	r22
     d84:	86 23       	and	r24, r22
     d86:	84 2b       	or	r24, r20
     d88:	82 bb       	out	0x12, r24	; 18
     d8a:	08 95       	ret
		case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data&mask);
		break;

		case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG&~mask)|(data&mask);
     d8c:	88 b3       	in	r24, 0x18	; 24
     d8e:	46 23       	and	r20, r22
     d90:	60 95       	com	r22
     d92:	86 23       	and	r24, r22
     d94:	84 2b       	or	r24, r20
     d96:	88 bb       	out	0x18, r24	; 24
     d98:	08 95       	ret
		break;

		case DIO_PORTC:
			DIO_PORTC_REG = (DIO_PORTC_REG&~mask)|(data&mask);
     d9a:	85 b3       	in	r24, 0x15	; 21
     d9c:	46 23       	and	r20, r22
     d9e:	60 95       	com	r22
     da0:	86 23       	and	r24, r22
     da2:	84 2b       	or	r24, r20
     da4:	85 bb       	out	0x15, r24	; 21
     da6:	08 95       	ret

00000da8 <sprintf>:
     da8:	ae e0       	ldi	r26, 0x0E	; 14
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea ed       	ldi	r30, 0xDA	; 218
     dae:	f6 e0       	ldi	r31, 0x06	; 6
     db0:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__prologue_saves__+0x1c>
     db4:	0d 89       	ldd	r16, Y+21	; 0x15
     db6:	1e 89       	ldd	r17, Y+22	; 0x16
     db8:	86 e0       	ldi	r24, 0x06	; 6
     dba:	8c 83       	std	Y+4, r24	; 0x04
     dbc:	1a 83       	std	Y+2, r17	; 0x02
     dbe:	09 83       	std	Y+1, r16	; 0x01
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	9f e7       	ldi	r25, 0x7F	; 127
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
     dc8:	9e 01       	movw	r18, r28
     dca:	27 5e       	subi	r18, 0xE7	; 231
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	6f 89       	ldd	r22, Y+23	; 0x17
     dd4:	78 8d       	ldd	r23, Y+24	; 0x18
     dd6:	a9 01       	movw	r20, r18
     dd8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <vfprintf>
     ddc:	2f 81       	ldd	r18, Y+7	; 0x07
     dde:	38 85       	ldd	r19, Y+8	; 0x08
     de0:	02 0f       	add	r16, r18
     de2:	13 1f       	adc	r17, r19
     de4:	f8 01       	movw	r30, r16
     de6:	10 82       	st	Z, r1
     de8:	2e 96       	adiw	r28, 0x0e	; 14
     dea:	e4 e0       	ldi	r30, 0x04	; 4
     dec:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__epilogue_restores__+0x1c>

00000df0 <vfprintf>:
     df0:	ab e0       	ldi	r26, 0x0B	; 11
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	ee ef       	ldi	r30, 0xFE	; 254
     df6:	f6 e0       	ldi	r31, 0x06	; 6
     df8:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__prologue_saves__>
     dfc:	3c 01       	movw	r6, r24
     dfe:	2b 01       	movw	r4, r22
     e00:	5a 01       	movw	r10, r20
     e02:	fc 01       	movw	r30, r24
     e04:	17 82       	std	Z+7, r1	; 0x07
     e06:	16 82       	std	Z+6, r1	; 0x06
     e08:	83 81       	ldd	r24, Z+3	; 0x03
     e0a:	81 fd       	sbrc	r24, 1
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <vfprintf+0x24>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	c6 c1       	rjmp	.+908    	; 0x11a0 <vfprintf+0x3b0>
     e14:	9a e0       	ldi	r25, 0x0A	; 10
     e16:	89 2e       	mov	r8, r25
     e18:	1e 01       	movw	r2, r28
     e1a:	08 94       	sec
     e1c:	21 1c       	adc	r2, r1
     e1e:	31 1c       	adc	r3, r1
     e20:	f3 01       	movw	r30, r6
     e22:	23 81       	ldd	r18, Z+3	; 0x03
     e24:	f2 01       	movw	r30, r4
     e26:	23 fd       	sbrc	r18, 3
     e28:	85 91       	lpm	r24, Z+
     e2a:	23 ff       	sbrs	r18, 3
     e2c:	81 91       	ld	r24, Z+
     e2e:	2f 01       	movw	r4, r30
     e30:	88 23       	and	r24, r24
     e32:	09 f4       	brne	.+2      	; 0xe36 <vfprintf+0x46>
     e34:	b2 c1       	rjmp	.+868    	; 0x119a <vfprintf+0x3aa>
     e36:	85 32       	cpi	r24, 0x25	; 37
     e38:	39 f4       	brne	.+14     	; 0xe48 <vfprintf+0x58>
     e3a:	23 fd       	sbrc	r18, 3
     e3c:	85 91       	lpm	r24, Z+
     e3e:	23 ff       	sbrs	r18, 3
     e40:	81 91       	ld	r24, Z+
     e42:	2f 01       	movw	r4, r30
     e44:	85 32       	cpi	r24, 0x25	; 37
     e46:	29 f4       	brne	.+10     	; 0xe52 <vfprintf+0x62>
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	b3 01       	movw	r22, r6
     e4c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     e50:	e7 cf       	rjmp	.-50     	; 0xe20 <vfprintf+0x30>
     e52:	98 2f       	mov	r25, r24
     e54:	ff 24       	eor	r15, r15
     e56:	ee 24       	eor	r14, r14
     e58:	99 24       	eor	r9, r9
     e5a:	ff e1       	ldi	r31, 0x1F	; 31
     e5c:	ff 15       	cp	r31, r15
     e5e:	d0 f0       	brcs	.+52     	; 0xe94 <vfprintf+0xa4>
     e60:	9b 32       	cpi	r25, 0x2B	; 43
     e62:	69 f0       	breq	.+26     	; 0xe7e <vfprintf+0x8e>
     e64:	9c 32       	cpi	r25, 0x2C	; 44
     e66:	28 f4       	brcc	.+10     	; 0xe72 <vfprintf+0x82>
     e68:	90 32       	cpi	r25, 0x20	; 32
     e6a:	59 f0       	breq	.+22     	; 0xe82 <vfprintf+0x92>
     e6c:	93 32       	cpi	r25, 0x23	; 35
     e6e:	91 f4       	brne	.+36     	; 0xe94 <vfprintf+0xa4>
     e70:	0e c0       	rjmp	.+28     	; 0xe8e <vfprintf+0x9e>
     e72:	9d 32       	cpi	r25, 0x2D	; 45
     e74:	49 f0       	breq	.+18     	; 0xe88 <vfprintf+0x98>
     e76:	90 33       	cpi	r25, 0x30	; 48
     e78:	69 f4       	brne	.+26     	; 0xe94 <vfprintf+0xa4>
     e7a:	41 e0       	ldi	r20, 0x01	; 1
     e7c:	24 c0       	rjmp	.+72     	; 0xec6 <vfprintf+0xd6>
     e7e:	52 e0       	ldi	r21, 0x02	; 2
     e80:	f5 2a       	or	r15, r21
     e82:	84 e0       	ldi	r24, 0x04	; 4
     e84:	f8 2a       	or	r15, r24
     e86:	28 c0       	rjmp	.+80     	; 0xed8 <vfprintf+0xe8>
     e88:	98 e0       	ldi	r25, 0x08	; 8
     e8a:	f9 2a       	or	r15, r25
     e8c:	25 c0       	rjmp	.+74     	; 0xed8 <vfprintf+0xe8>
     e8e:	e0 e1       	ldi	r30, 0x10	; 16
     e90:	fe 2a       	or	r15, r30
     e92:	22 c0       	rjmp	.+68     	; 0xed8 <vfprintf+0xe8>
     e94:	f7 fc       	sbrc	r15, 7
     e96:	29 c0       	rjmp	.+82     	; 0xeea <vfprintf+0xfa>
     e98:	89 2f       	mov	r24, r25
     e9a:	80 53       	subi	r24, 0x30	; 48
     e9c:	8a 30       	cpi	r24, 0x0A	; 10
     e9e:	70 f4       	brcc	.+28     	; 0xebc <vfprintf+0xcc>
     ea0:	f6 fe       	sbrs	r15, 6
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <vfprintf+0xbe>
     ea4:	98 9c       	mul	r9, r8
     ea6:	90 2c       	mov	r9, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	98 0e       	add	r9, r24
     eac:	15 c0       	rjmp	.+42     	; 0xed8 <vfprintf+0xe8>
     eae:	e8 9c       	mul	r14, r8
     eb0:	e0 2c       	mov	r14, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	e8 0e       	add	r14, r24
     eb6:	f0 e2       	ldi	r31, 0x20	; 32
     eb8:	ff 2a       	or	r15, r31
     eba:	0e c0       	rjmp	.+28     	; 0xed8 <vfprintf+0xe8>
     ebc:	9e 32       	cpi	r25, 0x2E	; 46
     ebe:	29 f4       	brne	.+10     	; 0xeca <vfprintf+0xda>
     ec0:	f6 fc       	sbrc	r15, 6
     ec2:	6b c1       	rjmp	.+726    	; 0x119a <vfprintf+0x3aa>
     ec4:	40 e4       	ldi	r20, 0x40	; 64
     ec6:	f4 2a       	or	r15, r20
     ec8:	07 c0       	rjmp	.+14     	; 0xed8 <vfprintf+0xe8>
     eca:	9c 36       	cpi	r25, 0x6C	; 108
     ecc:	19 f4       	brne	.+6      	; 0xed4 <vfprintf+0xe4>
     ece:	50 e8       	ldi	r21, 0x80	; 128
     ed0:	f5 2a       	or	r15, r21
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <vfprintf+0xe8>
     ed4:	98 36       	cpi	r25, 0x68	; 104
     ed6:	49 f4       	brne	.+18     	; 0xeea <vfprintf+0xfa>
     ed8:	f2 01       	movw	r30, r4
     eda:	23 fd       	sbrc	r18, 3
     edc:	95 91       	lpm	r25, Z+
     ede:	23 ff       	sbrs	r18, 3
     ee0:	91 91       	ld	r25, Z+
     ee2:	2f 01       	movw	r4, r30
     ee4:	99 23       	and	r25, r25
     ee6:	09 f0       	breq	.+2      	; 0xeea <vfprintf+0xfa>
     ee8:	b8 cf       	rjmp	.-144    	; 0xe5a <vfprintf+0x6a>
     eea:	89 2f       	mov	r24, r25
     eec:	85 54       	subi	r24, 0x45	; 69
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	18 f0       	brcs	.+6      	; 0xef8 <vfprintf+0x108>
     ef2:	80 52       	subi	r24, 0x20	; 32
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	38 f4       	brcc	.+14     	; 0xf06 <vfprintf+0x116>
     ef8:	44 e0       	ldi	r20, 0x04	; 4
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	a4 0e       	add	r10, r20
     efe:	b5 1e       	adc	r11, r21
     f00:	5f e3       	ldi	r21, 0x3F	; 63
     f02:	59 83       	std	Y+1, r21	; 0x01
     f04:	0f c0       	rjmp	.+30     	; 0xf24 <vfprintf+0x134>
     f06:	93 36       	cpi	r25, 0x63	; 99
     f08:	31 f0       	breq	.+12     	; 0xf16 <vfprintf+0x126>
     f0a:	93 37       	cpi	r25, 0x73	; 115
     f0c:	79 f0       	breq	.+30     	; 0xf2c <vfprintf+0x13c>
     f0e:	93 35       	cpi	r25, 0x53	; 83
     f10:	09 f0       	breq	.+2      	; 0xf14 <vfprintf+0x124>
     f12:	56 c0       	rjmp	.+172    	; 0xfc0 <vfprintf+0x1d0>
     f14:	20 c0       	rjmp	.+64     	; 0xf56 <vfprintf+0x166>
     f16:	f5 01       	movw	r30, r10
     f18:	80 81       	ld	r24, Z
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	42 e0       	ldi	r20, 0x02	; 2
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	a4 0e       	add	r10, r20
     f22:	b5 1e       	adc	r11, r21
     f24:	61 01       	movw	r12, r2
     f26:	01 e0       	ldi	r16, 0x01	; 1
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	12 c0       	rjmp	.+36     	; 0xf50 <vfprintf+0x160>
     f2c:	f5 01       	movw	r30, r10
     f2e:	c0 80       	ld	r12, Z
     f30:	d1 80       	ldd	r13, Z+1	; 0x01
     f32:	f6 fc       	sbrc	r15, 6
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <vfprintf+0x14c>
     f36:	6f ef       	ldi	r22, 0xFF	; 255
     f38:	7f ef       	ldi	r23, 0xFF	; 255
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <vfprintf+0x150>
     f3c:	69 2d       	mov	r22, r9
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	42 e0       	ldi	r20, 0x02	; 2
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	a4 0e       	add	r10, r20
     f46:	b5 1e       	adc	r11, r21
     f48:	c6 01       	movw	r24, r12
     f4a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <strnlen>
     f4e:	8c 01       	movw	r16, r24
     f50:	5f e7       	ldi	r21, 0x7F	; 127
     f52:	f5 22       	and	r15, r21
     f54:	14 c0       	rjmp	.+40     	; 0xf7e <vfprintf+0x18e>
     f56:	f5 01       	movw	r30, r10
     f58:	c0 80       	ld	r12, Z
     f5a:	d1 80       	ldd	r13, Z+1	; 0x01
     f5c:	f6 fc       	sbrc	r15, 6
     f5e:	03 c0       	rjmp	.+6      	; 0xf66 <vfprintf+0x176>
     f60:	6f ef       	ldi	r22, 0xFF	; 255
     f62:	7f ef       	ldi	r23, 0xFF	; 255
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <vfprintf+0x17a>
     f66:	69 2d       	mov	r22, r9
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	42 e0       	ldi	r20, 0x02	; 2
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	a4 0e       	add	r10, r20
     f70:	b5 1e       	adc	r11, r21
     f72:	c6 01       	movw	r24, r12
     f74:	0e 94 d5 08 	call	0x11aa	; 0x11aa <strnlen_P>
     f78:	8c 01       	movw	r16, r24
     f7a:	50 e8       	ldi	r21, 0x80	; 128
     f7c:	f5 2a       	or	r15, r21
     f7e:	f3 fe       	sbrs	r15, 3
     f80:	07 c0       	rjmp	.+14     	; 0xf90 <vfprintf+0x1a0>
     f82:	1a c0       	rjmp	.+52     	; 0xfb8 <vfprintf+0x1c8>
     f84:	80 e2       	ldi	r24, 0x20	; 32
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	b3 01       	movw	r22, r6
     f8a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     f8e:	ea 94       	dec	r14
     f90:	8e 2d       	mov	r24, r14
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	08 17       	cp	r16, r24
     f96:	19 07       	cpc	r17, r25
     f98:	a8 f3       	brcs	.-22     	; 0xf84 <vfprintf+0x194>
     f9a:	0e c0       	rjmp	.+28     	; 0xfb8 <vfprintf+0x1c8>
     f9c:	f6 01       	movw	r30, r12
     f9e:	f7 fc       	sbrc	r15, 7
     fa0:	85 91       	lpm	r24, Z+
     fa2:	f7 fe       	sbrs	r15, 7
     fa4:	81 91       	ld	r24, Z+
     fa6:	6f 01       	movw	r12, r30
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	b3 01       	movw	r22, r6
     fac:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     fb0:	e1 10       	cpse	r14, r1
     fb2:	ea 94       	dec	r14
     fb4:	01 50       	subi	r16, 0x01	; 1
     fb6:	10 40       	sbci	r17, 0x00	; 0
     fb8:	01 15       	cp	r16, r1
     fba:	11 05       	cpc	r17, r1
     fbc:	79 f7       	brne	.-34     	; 0xf9c <vfprintf+0x1ac>
     fbe:	ea c0       	rjmp	.+468    	; 0x1194 <vfprintf+0x3a4>
     fc0:	94 36       	cpi	r25, 0x64	; 100
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <vfprintf+0x1d8>
     fc4:	99 36       	cpi	r25, 0x69	; 105
     fc6:	69 f5       	brne	.+90     	; 0x1022 <vfprintf+0x232>
     fc8:	f7 fe       	sbrs	r15, 7
     fca:	08 c0       	rjmp	.+16     	; 0xfdc <vfprintf+0x1ec>
     fcc:	f5 01       	movw	r30, r10
     fce:	20 81       	ld	r18, Z
     fd0:	31 81       	ldd	r19, Z+1	; 0x01
     fd2:	42 81       	ldd	r20, Z+2	; 0x02
     fd4:	53 81       	ldd	r21, Z+3	; 0x03
     fd6:	84 e0       	ldi	r24, 0x04	; 4
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0a c0       	rjmp	.+20     	; 0xff0 <vfprintf+0x200>
     fdc:	f5 01       	movw	r30, r10
     fde:	80 81       	ld	r24, Z
     fe0:	91 81       	ldd	r25, Z+1	; 0x01
     fe2:	9c 01       	movw	r18, r24
     fe4:	44 27       	eor	r20, r20
     fe6:	37 fd       	sbrc	r19, 7
     fe8:	40 95       	com	r20
     fea:	54 2f       	mov	r21, r20
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	a8 0e       	add	r10, r24
     ff2:	b9 1e       	adc	r11, r25
     ff4:	9f e6       	ldi	r25, 0x6F	; 111
     ff6:	f9 22       	and	r15, r25
     ff8:	57 ff       	sbrs	r21, 7
     ffa:	09 c0       	rjmp	.+18     	; 0x100e <vfprintf+0x21e>
     ffc:	50 95       	com	r21
     ffe:	40 95       	com	r20
    1000:	30 95       	com	r19
    1002:	21 95       	neg	r18
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	4f 4f       	sbci	r20, 0xFF	; 255
    1008:	5f 4f       	sbci	r21, 0xFF	; 255
    100a:	e0 e8       	ldi	r30, 0x80	; 128
    100c:	fe 2a       	or	r15, r30
    100e:	ca 01       	movw	r24, r20
    1010:	b9 01       	movw	r22, r18
    1012:	a1 01       	movw	r20, r2
    1014:	2a e0       	ldi	r18, 0x0A	; 10
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	0e 94 17 09 	call	0x122e	; 0x122e <__ultoa_invert>
    101c:	d8 2e       	mov	r13, r24
    101e:	d2 18       	sub	r13, r2
    1020:	40 c0       	rjmp	.+128    	; 0x10a2 <vfprintf+0x2b2>
    1022:	95 37       	cpi	r25, 0x75	; 117
    1024:	29 f4       	brne	.+10     	; 0x1030 <vfprintf+0x240>
    1026:	1f 2d       	mov	r17, r15
    1028:	1f 7e       	andi	r17, 0xEF	; 239
    102a:	2a e0       	ldi	r18, 0x0A	; 10
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	1d c0       	rjmp	.+58     	; 0x106a <vfprintf+0x27a>
    1030:	1f 2d       	mov	r17, r15
    1032:	19 7f       	andi	r17, 0xF9	; 249
    1034:	9f 36       	cpi	r25, 0x6F	; 111
    1036:	61 f0       	breq	.+24     	; 0x1050 <vfprintf+0x260>
    1038:	90 37       	cpi	r25, 0x70	; 112
    103a:	20 f4       	brcc	.+8      	; 0x1044 <vfprintf+0x254>
    103c:	98 35       	cpi	r25, 0x58	; 88
    103e:	09 f0       	breq	.+2      	; 0x1042 <vfprintf+0x252>
    1040:	ac c0       	rjmp	.+344    	; 0x119a <vfprintf+0x3aa>
    1042:	0f c0       	rjmp	.+30     	; 0x1062 <vfprintf+0x272>
    1044:	90 37       	cpi	r25, 0x70	; 112
    1046:	39 f0       	breq	.+14     	; 0x1056 <vfprintf+0x266>
    1048:	98 37       	cpi	r25, 0x78	; 120
    104a:	09 f0       	breq	.+2      	; 0x104e <vfprintf+0x25e>
    104c:	a6 c0       	rjmp	.+332    	; 0x119a <vfprintf+0x3aa>
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <vfprintf+0x268>
    1050:	28 e0       	ldi	r18, 0x08	; 8
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	0a c0       	rjmp	.+20     	; 0x106a <vfprintf+0x27a>
    1056:	10 61       	ori	r17, 0x10	; 16
    1058:	14 fd       	sbrc	r17, 4
    105a:	14 60       	ori	r17, 0x04	; 4
    105c:	20 e1       	ldi	r18, 0x10	; 16
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	04 c0       	rjmp	.+8      	; 0x106a <vfprintf+0x27a>
    1062:	14 fd       	sbrc	r17, 4
    1064:	16 60       	ori	r17, 0x06	; 6
    1066:	20 e1       	ldi	r18, 0x10	; 16
    1068:	32 e0       	ldi	r19, 0x02	; 2
    106a:	17 ff       	sbrs	r17, 7
    106c:	08 c0       	rjmp	.+16     	; 0x107e <vfprintf+0x28e>
    106e:	f5 01       	movw	r30, r10
    1070:	60 81       	ld	r22, Z
    1072:	71 81       	ldd	r23, Z+1	; 0x01
    1074:	82 81       	ldd	r24, Z+2	; 0x02
    1076:	93 81       	ldd	r25, Z+3	; 0x03
    1078:	44 e0       	ldi	r20, 0x04	; 4
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	08 c0       	rjmp	.+16     	; 0x108e <vfprintf+0x29e>
    107e:	f5 01       	movw	r30, r10
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	bc 01       	movw	r22, r24
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	42 e0       	ldi	r20, 0x02	; 2
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	a4 0e       	add	r10, r20
    1090:	b5 1e       	adc	r11, r21
    1092:	a1 01       	movw	r20, r2
    1094:	0e 94 17 09 	call	0x122e	; 0x122e <__ultoa_invert>
    1098:	d8 2e       	mov	r13, r24
    109a:	d2 18       	sub	r13, r2
    109c:	8f e7       	ldi	r24, 0x7F	; 127
    109e:	f8 2e       	mov	r15, r24
    10a0:	f1 22       	and	r15, r17
    10a2:	f6 fe       	sbrs	r15, 6
    10a4:	0b c0       	rjmp	.+22     	; 0x10bc <vfprintf+0x2cc>
    10a6:	5e ef       	ldi	r21, 0xFE	; 254
    10a8:	f5 22       	and	r15, r21
    10aa:	d9 14       	cp	r13, r9
    10ac:	38 f4       	brcc	.+14     	; 0x10bc <vfprintf+0x2cc>
    10ae:	f4 fe       	sbrs	r15, 4
    10b0:	07 c0       	rjmp	.+14     	; 0x10c0 <vfprintf+0x2d0>
    10b2:	f2 fc       	sbrc	r15, 2
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <vfprintf+0x2d0>
    10b6:	8f ee       	ldi	r24, 0xEF	; 239
    10b8:	f8 22       	and	r15, r24
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <vfprintf+0x2d0>
    10bc:	1d 2d       	mov	r17, r13
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <vfprintf+0x2d2>
    10c0:	19 2d       	mov	r17, r9
    10c2:	f4 fe       	sbrs	r15, 4
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <vfprintf+0x2f0>
    10c6:	fe 01       	movw	r30, r28
    10c8:	ed 0d       	add	r30, r13
    10ca:	f1 1d       	adc	r31, r1
    10cc:	80 81       	ld	r24, Z
    10ce:	80 33       	cpi	r24, 0x30	; 48
    10d0:	19 f4       	brne	.+6      	; 0x10d8 <vfprintf+0x2e8>
    10d2:	99 ee       	ldi	r25, 0xE9	; 233
    10d4:	f9 22       	and	r15, r25
    10d6:	08 c0       	rjmp	.+16     	; 0x10e8 <vfprintf+0x2f8>
    10d8:	1f 5f       	subi	r17, 0xFF	; 255
    10da:	f2 fe       	sbrs	r15, 2
    10dc:	05 c0       	rjmp	.+10     	; 0x10e8 <vfprintf+0x2f8>
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <vfprintf+0x2f6>
    10e0:	8f 2d       	mov	r24, r15
    10e2:	86 78       	andi	r24, 0x86	; 134
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <vfprintf+0x2f8>
    10e6:	1f 5f       	subi	r17, 0xFF	; 255
    10e8:	0f 2d       	mov	r16, r15
    10ea:	f3 fc       	sbrc	r15, 3
    10ec:	14 c0       	rjmp	.+40     	; 0x1116 <vfprintf+0x326>
    10ee:	f0 fe       	sbrs	r15, 0
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <vfprintf+0x320>
    10f2:	1e 15       	cp	r17, r14
    10f4:	10 f0       	brcs	.+4      	; 0x10fa <vfprintf+0x30a>
    10f6:	9d 2c       	mov	r9, r13
    10f8:	0b c0       	rjmp	.+22     	; 0x1110 <vfprintf+0x320>
    10fa:	9d 2c       	mov	r9, r13
    10fc:	9e 0c       	add	r9, r14
    10fe:	91 1a       	sub	r9, r17
    1100:	1e 2d       	mov	r17, r14
    1102:	06 c0       	rjmp	.+12     	; 0x1110 <vfprintf+0x320>
    1104:	80 e2       	ldi	r24, 0x20	; 32
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	b3 01       	movw	r22, r6
    110a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    110e:	1f 5f       	subi	r17, 0xFF	; 255
    1110:	1e 15       	cp	r17, r14
    1112:	c0 f3       	brcs	.-16     	; 0x1104 <vfprintf+0x314>
    1114:	04 c0       	rjmp	.+8      	; 0x111e <vfprintf+0x32e>
    1116:	1e 15       	cp	r17, r14
    1118:	10 f4       	brcc	.+4      	; 0x111e <vfprintf+0x32e>
    111a:	e1 1a       	sub	r14, r17
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <vfprintf+0x330>
    111e:	ee 24       	eor	r14, r14
    1120:	04 ff       	sbrs	r16, 4
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <vfprintf+0x352>
    1124:	80 e3       	ldi	r24, 0x30	; 48
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	b3 01       	movw	r22, r6
    112a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    112e:	02 ff       	sbrs	r16, 2
    1130:	1d c0       	rjmp	.+58     	; 0x116c <vfprintf+0x37c>
    1132:	01 fd       	sbrc	r16, 1
    1134:	03 c0       	rjmp	.+6      	; 0x113c <vfprintf+0x34c>
    1136:	88 e7       	ldi	r24, 0x78	; 120
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e c0       	rjmp	.+28     	; 0x1158 <vfprintf+0x368>
    113c:	88 e5       	ldi	r24, 0x58	; 88
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0b c0       	rjmp	.+22     	; 0x1158 <vfprintf+0x368>
    1142:	80 2f       	mov	r24, r16
    1144:	86 78       	andi	r24, 0x86	; 134
    1146:	91 f0       	breq	.+36     	; 0x116c <vfprintf+0x37c>
    1148:	01 ff       	sbrs	r16, 1
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <vfprintf+0x360>
    114c:	8b e2       	ldi	r24, 0x2B	; 43
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <vfprintf+0x362>
    1150:	80 e2       	ldi	r24, 0x20	; 32
    1152:	f7 fc       	sbrc	r15, 7
    1154:	8d e2       	ldi	r24, 0x2D	; 45
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	b3 01       	movw	r22, r6
    115a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    115e:	06 c0       	rjmp	.+12     	; 0x116c <vfprintf+0x37c>
    1160:	80 e3       	ldi	r24, 0x30	; 48
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	b3 01       	movw	r22, r6
    1166:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    116a:	9a 94       	dec	r9
    116c:	d9 14       	cp	r13, r9
    116e:	c0 f3       	brcs	.-16     	; 0x1160 <vfprintf+0x370>
    1170:	da 94       	dec	r13
    1172:	f1 01       	movw	r30, r2
    1174:	ed 0d       	add	r30, r13
    1176:	f1 1d       	adc	r31, r1
    1178:	80 81       	ld	r24, Z
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	b3 01       	movw	r22, r6
    117e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    1182:	dd 20       	and	r13, r13
    1184:	a9 f7       	brne	.-22     	; 0x1170 <vfprintf+0x380>
    1186:	06 c0       	rjmp	.+12     	; 0x1194 <vfprintf+0x3a4>
    1188:	80 e2       	ldi	r24, 0x20	; 32
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	b3 01       	movw	r22, r6
    118e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    1192:	ea 94       	dec	r14
    1194:	ee 20       	and	r14, r14
    1196:	c1 f7       	brne	.-16     	; 0x1188 <vfprintf+0x398>
    1198:	43 ce       	rjmp	.-890    	; 0xe20 <vfprintf+0x30>
    119a:	f3 01       	movw	r30, r6
    119c:	66 81       	ldd	r22, Z+6	; 0x06
    119e:	77 81       	ldd	r23, Z+7	; 0x07
    11a0:	cb 01       	movw	r24, r22
    11a2:	2b 96       	adiw	r28, 0x0b	; 11
    11a4:	e2 e1       	ldi	r30, 0x12	; 18
    11a6:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__epilogue_restores__>

000011aa <strnlen_P>:
    11aa:	fc 01       	movw	r30, r24
    11ac:	05 90       	lpm	r0, Z+
    11ae:	61 50       	subi	r22, 0x01	; 1
    11b0:	70 40       	sbci	r23, 0x00	; 0
    11b2:	01 10       	cpse	r0, r1
    11b4:	d8 f7       	brcc	.-10     	; 0x11ac <strnlen_P+0x2>
    11b6:	80 95       	com	r24
    11b8:	90 95       	com	r25
    11ba:	8e 0f       	add	r24, r30
    11bc:	9f 1f       	adc	r25, r31
    11be:	08 95       	ret

000011c0 <strnlen>:
    11c0:	fc 01       	movw	r30, r24
    11c2:	61 50       	subi	r22, 0x01	; 1
    11c4:	70 40       	sbci	r23, 0x00	; 0
    11c6:	01 90       	ld	r0, Z+
    11c8:	01 10       	cpse	r0, r1
    11ca:	d8 f7       	brcc	.-10     	; 0x11c2 <strnlen+0x2>
    11cc:	80 95       	com	r24
    11ce:	90 95       	com	r25
    11d0:	8e 0f       	add	r24, r30
    11d2:	9f 1f       	adc	r25, r31
    11d4:	08 95       	ret

000011d6 <fputc>:
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	8c 01       	movw	r16, r24
    11e0:	eb 01       	movw	r28, r22
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	81 ff       	sbrs	r24, 1
    11e6:	1b c0       	rjmp	.+54     	; 0x121e <fputc+0x48>
    11e8:	82 ff       	sbrs	r24, 2
    11ea:	0d c0       	rjmp	.+26     	; 0x1206 <fputc+0x30>
    11ec:	2e 81       	ldd	r18, Y+6	; 0x06
    11ee:	3f 81       	ldd	r19, Y+7	; 0x07
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	28 17       	cp	r18, r24
    11f6:	39 07       	cpc	r19, r25
    11f8:	64 f4       	brge	.+24     	; 0x1212 <fputc+0x3c>
    11fa:	e8 81       	ld	r30, Y
    11fc:	f9 81       	ldd	r31, Y+1	; 0x01
    11fe:	01 93       	st	Z+, r16
    1200:	f9 83       	std	Y+1, r31	; 0x01
    1202:	e8 83       	st	Y, r30
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <fputc+0x3c>
    1206:	e8 85       	ldd	r30, Y+8	; 0x08
    1208:	f9 85       	ldd	r31, Y+9	; 0x09
    120a:	80 2f       	mov	r24, r16
    120c:	09 95       	icall
    120e:	89 2b       	or	r24, r25
    1210:	31 f4       	brne	.+12     	; 0x121e <fputc+0x48>
    1212:	8e 81       	ldd	r24, Y+6	; 0x06
    1214:	9f 81       	ldd	r25, Y+7	; 0x07
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	9f 83       	std	Y+7, r25	; 0x07
    121a:	8e 83       	std	Y+6, r24	; 0x06
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <fputc+0x4c>
    121e:	0f ef       	ldi	r16, 0xFF	; 255
    1220:	1f ef       	ldi	r17, 0xFF	; 255
    1222:	c8 01       	movw	r24, r16
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	08 95       	ret

0000122e <__ultoa_invert>:
    122e:	fa 01       	movw	r30, r20
    1230:	aa 27       	eor	r26, r26
    1232:	28 30       	cpi	r18, 0x08	; 8
    1234:	51 f1       	breq	.+84     	; 0x128a <__ultoa_invert+0x5c>
    1236:	20 31       	cpi	r18, 0x10	; 16
    1238:	81 f1       	breq	.+96     	; 0x129a <__ultoa_invert+0x6c>
    123a:	e8 94       	clt
    123c:	6f 93       	push	r22
    123e:	6e 7f       	andi	r22, 0xFE	; 254
    1240:	6e 5f       	subi	r22, 0xFE	; 254
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	8f 4f       	sbci	r24, 0xFF	; 255
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	af 4f       	sbci	r26, 0xFF	; 255
    124a:	b1 e0       	ldi	r27, 0x01	; 1
    124c:	3e d0       	rcall	.+124    	; 0x12ca <__ultoa_invert+0x9c>
    124e:	b4 e0       	ldi	r27, 0x04	; 4
    1250:	3c d0       	rcall	.+120    	; 0x12ca <__ultoa_invert+0x9c>
    1252:	67 0f       	add	r22, r23
    1254:	78 1f       	adc	r23, r24
    1256:	89 1f       	adc	r24, r25
    1258:	9a 1f       	adc	r25, r26
    125a:	a1 1d       	adc	r26, r1
    125c:	68 0f       	add	r22, r24
    125e:	79 1f       	adc	r23, r25
    1260:	8a 1f       	adc	r24, r26
    1262:	91 1d       	adc	r25, r1
    1264:	a1 1d       	adc	r26, r1
    1266:	6a 0f       	add	r22, r26
    1268:	71 1d       	adc	r23, r1
    126a:	81 1d       	adc	r24, r1
    126c:	91 1d       	adc	r25, r1
    126e:	a1 1d       	adc	r26, r1
    1270:	20 d0       	rcall	.+64     	; 0x12b2 <__ultoa_invert+0x84>
    1272:	09 f4       	brne	.+2      	; 0x1276 <__ultoa_invert+0x48>
    1274:	68 94       	set
    1276:	3f 91       	pop	r19
    1278:	2a e0       	ldi	r18, 0x0A	; 10
    127a:	26 9f       	mul	r18, r22
    127c:	11 24       	eor	r1, r1
    127e:	30 19       	sub	r19, r0
    1280:	30 5d       	subi	r19, 0xD0	; 208
    1282:	31 93       	st	Z+, r19
    1284:	de f6       	brtc	.-74     	; 0x123c <__ultoa_invert+0xe>
    1286:	cf 01       	movw	r24, r30
    1288:	08 95       	ret
    128a:	46 2f       	mov	r20, r22
    128c:	47 70       	andi	r20, 0x07	; 7
    128e:	40 5d       	subi	r20, 0xD0	; 208
    1290:	41 93       	st	Z+, r20
    1292:	b3 e0       	ldi	r27, 0x03	; 3
    1294:	0f d0       	rcall	.+30     	; 0x12b4 <__ultoa_invert+0x86>
    1296:	c9 f7       	brne	.-14     	; 0x128a <__ultoa_invert+0x5c>
    1298:	f6 cf       	rjmp	.-20     	; 0x1286 <__ultoa_invert+0x58>
    129a:	46 2f       	mov	r20, r22
    129c:	4f 70       	andi	r20, 0x0F	; 15
    129e:	40 5d       	subi	r20, 0xD0	; 208
    12a0:	4a 33       	cpi	r20, 0x3A	; 58
    12a2:	18 f0       	brcs	.+6      	; 0x12aa <__ultoa_invert+0x7c>
    12a4:	49 5d       	subi	r20, 0xD9	; 217
    12a6:	31 fd       	sbrc	r19, 1
    12a8:	40 52       	subi	r20, 0x20	; 32
    12aa:	41 93       	st	Z+, r20
    12ac:	02 d0       	rcall	.+4      	; 0x12b2 <__ultoa_invert+0x84>
    12ae:	a9 f7       	brne	.-22     	; 0x129a <__ultoa_invert+0x6c>
    12b0:	ea cf       	rjmp	.-44     	; 0x1286 <__ultoa_invert+0x58>
    12b2:	b4 e0       	ldi	r27, 0x04	; 4
    12b4:	a6 95       	lsr	r26
    12b6:	97 95       	ror	r25
    12b8:	87 95       	ror	r24
    12ba:	77 95       	ror	r23
    12bc:	67 95       	ror	r22
    12be:	ba 95       	dec	r27
    12c0:	c9 f7       	brne	.-14     	; 0x12b4 <__ultoa_invert+0x86>
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	61 05       	cpc	r22, r1
    12c6:	71 05       	cpc	r23, r1
    12c8:	08 95       	ret
    12ca:	9b 01       	movw	r18, r22
    12cc:	ac 01       	movw	r20, r24
    12ce:	0a 2e       	mov	r0, r26
    12d0:	06 94       	lsr	r0
    12d2:	57 95       	ror	r21
    12d4:	47 95       	ror	r20
    12d6:	37 95       	ror	r19
    12d8:	27 95       	ror	r18
    12da:	ba 95       	dec	r27
    12dc:	c9 f7       	brne	.-14     	; 0x12d0 <__ultoa_invert+0xa2>
    12de:	62 0f       	add	r22, r18
    12e0:	73 1f       	adc	r23, r19
    12e2:	84 1f       	adc	r24, r20
    12e4:	95 1f       	adc	r25, r21
    12e6:	a0 1d       	adc	r26, r0
    12e8:	08 95       	ret

000012ea <__prologue_saves__>:
    12ea:	2f 92       	push	r2
    12ec:	3f 92       	push	r3
    12ee:	4f 92       	push	r4
    12f0:	5f 92       	push	r5
    12f2:	6f 92       	push	r6
    12f4:	7f 92       	push	r7
    12f6:	8f 92       	push	r8
    12f8:	9f 92       	push	r9
    12fa:	af 92       	push	r10
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	ca 1b       	sub	r28, r26
    1314:	db 0b       	sbc	r29, r27
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	09 94       	ijmp

00001322 <__epilogue_restores__>:
    1322:	2a 88       	ldd	r2, Y+18	; 0x12
    1324:	39 88       	ldd	r3, Y+17	; 0x11
    1326:	48 88       	ldd	r4, Y+16	; 0x10
    1328:	5f 84       	ldd	r5, Y+15	; 0x0f
    132a:	6e 84       	ldd	r6, Y+14	; 0x0e
    132c:	7d 84       	ldd	r7, Y+13	; 0x0d
    132e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1330:	9b 84       	ldd	r9, Y+11	; 0x0b
    1332:	aa 84       	ldd	r10, Y+10	; 0x0a
    1334:	b9 84       	ldd	r11, Y+9	; 0x09
    1336:	c8 84       	ldd	r12, Y+8	; 0x08
    1338:	df 80       	ldd	r13, Y+7	; 0x07
    133a:	ee 80       	ldd	r14, Y+6	; 0x06
    133c:	fd 80       	ldd	r15, Y+5	; 0x05
    133e:	0c 81       	ldd	r16, Y+4	; 0x04
    1340:	1b 81       	ldd	r17, Y+3	; 0x03
    1342:	aa 81       	ldd	r26, Y+2	; 0x02
    1344:	b9 81       	ldd	r27, Y+1	; 0x01
    1346:	ce 0f       	add	r28, r30
    1348:	d1 1d       	adc	r29, r1
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	ed 01       	movw	r28, r26
    1356:	08 95       	ret

00001358 <_exit>:
    1358:	f8 94       	cli

0000135a <__stop_program>:
    135a:	ff cf       	rjmp	.-2      	; 0x135a <__stop_program>
