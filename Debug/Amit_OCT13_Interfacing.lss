
Amit_OCT13_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f92  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000f92  00001006  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002dcc  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000012e5  00000000  00000000  00003e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "Lcd_Interface.h"
#include <stdio.h>
#include "SSD_Interface.h"
#include "Button_Interface.h"
int main ()
{
  82:	1f 93       	push	r17
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
	s8 counter =0 ;
	SSD_Init();
  88:	0e 94 b1 00 	call	0x162	; 0x162 <SSD_Init>
	Button_Init();
  8c:	0e 94 df 05 	call	0xbbe	; 0xbbe <Button_Init>
  90:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  92:	c0 e4       	ldi	r28, 0x40	; 64
  94:	dc e9       	ldi	r29, 0x9C	; 156

	while (1)
	{
		if (Button_Is_Pressed(BUTTON0) == TRUE)
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 ba 05 	call	0xb74	; 0xb74 <Button_Is_Pressed>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	69 f0       	breq	.+26     	; 0xba <main+0x38>
			if (counter>=100)
			{
				counter = 0;
			}
		}
		if (Button_Is_Pressed(BUTTON2) == TRUE)
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 ba 05 	call	0xb74	; 0xb74 <Button_Is_Pressed>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	c1 f0       	breq	.+48     	; 0xda <main+0x58>
		{
			_delay_ms(10);
			counter--;
			if (counter<0)
  aa:	81 2f       	mov	r24, r17
			{
				counter = 0;
			}
		}
		SSD_Display(counter);
  ac:	0e 94 75 00 	call	0xea	; 0xea <SSD_Display>
	SSD_Init();
	Button_Init();

	while (1)
	{
		if (Button_Is_Pressed(BUTTON0) == TRUE)
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 ba 05 	call	0xb74	; 0xb74 <Button_Is_Pressed>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	99 f7       	brne	.-26     	; 0xa0 <main+0x1e>
		{
			SSD_Display_With_Delay(counter,250);
  ba:	81 2f       	mov	r24, r17
  bc:	4a ef       	ldi	r20, 0xFA	; 250
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	0e 94 df 00 	call	0x1be	; 0x1be <SSD_Display_With_Delay>
				counter++;
  c8:	1f 5f       	subi	r17, 0xFF	; 255
			if (counter>=100)
  ca:	14 36       	cpi	r17, 0x64	; 100
  cc:	4c f3       	brlt	.-46     	; 0xa0 <main+0x1e>
  ce:	10 e0       	ldi	r17, 0x00	; 0
			{
				counter = 0;
			}
		}
		if (Button_Is_Pressed(BUTTON2) == TRUE)
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 ba 05 	call	0xb74	; 0xb74 <Button_Is_Pressed>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	41 f7       	brne	.-48     	; 0xaa <main+0x28>
  da:	ce 01       	movw	r24, r28
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x5a>
		{
			_delay_ms(10);
			counter--;
  e0:	11 50       	subi	r17, 0x01	; 1
  e2:	18 f7       	brcc	.-58     	; 0xaa <main+0x28>
			if (counter<0)
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	e1 cf       	rjmp	.-62     	; 0xac <main+0x2a>

000000ea <SSD_Display>:
	Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_LOW);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_LOW);
}

void SSD_Display(u8 num)
{
  ea:	0f 93       	push	r16
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	08 2f       	mov	r16, r24
	u8 loc_SSD_First_Digit = (num%10)<<4;
	u8 loc_SSD_Second_Digit = (num/10)<<4;

	if (num <= 99)
  f2:	84 36       	cpi	r24, 0x64	; 100
  f4:	90 f5       	brcc	.+100    	; 0x15a <SSD_Display+0x70>
	{
		/*	Enable SSD1	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_HIGH);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
		/*	Disable SSD2	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_LOW);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
		/*	Write First Digit	*/
		Dio_Write_Channel_Group(DIO_PORTA, 0xF0, loc_SSD_First_Digit);
 10a:	80 2f       	mov	r24, r16
 10c:	6a e0       	ldi	r22, 0x0A	; 10
 10e:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
 112:	92 95       	swap	r25
 114:	90 7f       	andi	r25, 0xF0	; 240
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	60 ef       	ldi	r22, 0xF0	; 240
 11a:	49 2f       	mov	r20, r25
 11c:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 120:	c0 ea       	ldi	r28, 0xA0	; 160
 122:	df e0       	ldi	r29, 0x0F	; 15
 124:	ce 01       	movw	r24, r28
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <SSD_Display+0x3c>
		_delay_ms(1);

		/*	Disable SSD1	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_LOW);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
		/*	Enable SSD2	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_HIGH);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
		/*	Write Second Digit	*/
		Dio_Write_Channel_Group(DIO_PORTA, 0xF0, loc_SSD_Second_Digit);
 13e:	80 2f       	mov	r24, r16
 140:	6a e0       	ldi	r22, 0x0A	; 10
 142:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
 146:	48 2f       	mov	r20, r24
 148:	42 95       	swap	r20
 14a:	40 7f       	andi	r20, 0xF0	; 240
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	60 ef       	ldi	r22, 0xF0	; 240
 150:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 154:	ce 01       	movw	r24, r28
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <SSD_Display+0x6c>
	}
	else
	{
		/*	Do Nothing	*/
	}
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	0f 91       	pop	r16
 160:	08 95       	ret

00000162 <SSD_Init>:
 */
#include "SSD_Interface.h"
void SSD_Init(void)
{
	/*	Configure SSD Enable Lines as Output	*/
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	/*	Configure SSD DP Line as Output	*/
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	63 e0       	ldi	r22, 0x03	; 3
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	/*	Configure SSD Data Lines as Output		*/
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	64 e0       	ldi	r22, 0x04	; 4
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	65 e0       	ldi	r22, 0x05	; 5
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	66 e0       	ldi	r22, 0x06	; 6
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	67 e0       	ldi	r22, 0x07	; 7
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	/*	Turn OFF SSD	*/
	Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_LOW);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_LOW);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	62 e0       	ldi	r22, 0x02	; 2
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
}
 1bc:	08 95       	ret

000001be <SSD_Display_With_Delay>:
	{
		/*	Do Nothing	*/
	}
}
void SSD_Display_With_Delay(u8 num,u32 delay)
{
 1be:	8f 92       	push	r8
 1c0:	9f 92       	push	r9
 1c2:	af 92       	push	r10
 1c4:	bf 92       	push	r11
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	28 2f       	mov	r18, r24
 1d8:	5a 01       	movw	r10, r20
 1da:	6b 01       	movw	r12, r22
	u32 count = 0;
	for (count =0; count<delay; count+=3)
 1dc:	41 15       	cp	r20, r1
 1de:	51 05       	cpc	r21, r1
 1e0:	61 05       	cpc	r22, r1
 1e2:	71 05       	cpc	r23, r1
 1e4:	09 f1       	breq	.+66     	; 0x228 <SSD_Display_With_Delay+0x6a>
 1e6:	6a e0       	ldi	r22, 0x0A	; 10
 1e8:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
 1ec:	89 2e       	mov	r8, r25
 1ee:	82 94       	swap	r8
 1f0:	90 ef       	ldi	r25, 0xF0	; 240
 1f2:	89 22       	and	r8, r25
 1f4:	82 2f       	mov	r24, r18
 1f6:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
 1fa:	98 2e       	mov	r9, r24
 1fc:	92 94       	swap	r9
 1fe:	80 ef       	ldi	r24, 0xF0	; 240
 200:	98 22       	and	r9, r24
 202:	24 36       	cpi	r18, 0x64	; 100
 204:	f0 f0       	brcs	.+60     	; 0x242 <SSD_Display_With_Delay+0x84>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	20 ea       	ldi	r18, 0xA0	; 160
 210:	3f e0       	ldi	r19, 0x0F	; 15
 212:	f9 01       	movw	r30, r18
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <SSD_Display_With_Delay+0x56>
 218:	03 96       	adiw	r24, 0x03	; 3
 21a:	a1 1d       	adc	r26, r1
 21c:	b1 1d       	adc	r27, r1
 21e:	8a 15       	cp	r24, r10
 220:	9b 05       	cpc	r25, r11
 222:	ac 05       	cpc	r26, r12
 224:	bd 05       	cpc	r27, r13
 226:	a8 f3       	brcs	.-22     	; 0x212 <SSD_Display_With_Delay+0x54>
	{
		SSD_Display(num);
		_delay_ms(1);
	}
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	df 90       	pop	r13
 236:	cf 90       	pop	r12
 238:	bf 90       	pop	r11
 23a:	af 90       	pop	r10
 23c:	9f 90       	pop	r9
 23e:	8f 90       	pop	r8
 240:	08 95       	ret
	}
}
void SSD_Display_With_Delay(u8 num,u32 delay)
{
	u32 count = 0;
	for (count =0; count<delay; count+=3)
 242:	ee 24       	eor	r14, r14
 244:	ff 24       	eor	r15, r15
 246:	87 01       	movw	r16, r14
 248:	c0 ea       	ldi	r28, 0xA0	; 160
 24a:	df e0       	ldi	r29, 0x0F	; 15
	u8 loc_SSD_Second_Digit = (num/10)<<4;

	if (num <= 99)
	{
		/*	Enable SSD1	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_HIGH);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
		/*	Disable SSD2	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_LOW);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
		/*	Write First Digit	*/
		Dio_Write_Channel_Group(DIO_PORTA, 0xF0, loc_SSD_First_Digit);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	60 ef       	ldi	r22, 0xF0	; 240
 264:	48 2d       	mov	r20, r8
 266:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 26a:	ce 01       	movw	r24, r28
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <SSD_Display_With_Delay+0xae>
		_delay_ms(1);

		/*	Disable SSD1	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_LOW);
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
		/*	Enable SSD2	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_HIGH);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
		/*	Write Second Digit	*/
		Dio_Write_Channel_Group(DIO_PORTA, 0xF0, loc_SSD_Second_Digit);
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	60 ef       	ldi	r22, 0xF0	; 240
 288:	49 2d       	mov	r20, r9
 28a:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 28e:	ce 01       	movw	r24, r28
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <SSD_Display_With_Delay+0xd2>
 294:	ce 01       	movw	r24, r28
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <SSD_Display_With_Delay+0xd8>
	}
}
void SSD_Display_With_Delay(u8 num,u32 delay)
{
	u32 count = 0;
	for (count =0; count<delay; count+=3)
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	a0 e0       	ldi	r26, 0x00	; 0
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	e8 0e       	add	r14, r24
 2a4:	f9 1e       	adc	r15, r25
 2a6:	0a 1f       	adc	r16, r26
 2a8:	1b 1f       	adc	r17, r27
 2aa:	ea 14       	cp	r14, r10
 2ac:	fb 04       	cpc	r15, r11
 2ae:	0c 05       	cpc	r16, r12
 2b0:	1d 05       	cpc	r17, r13
 2b2:	60 f2       	brcs	.-104    	; 0x24c <SSD_Display_With_Delay+0x8e>
 2b4:	b9 cf       	rjmp	.-142    	; 0x228 <SSD_Display_With_Delay+0x6a>

000002b6 <Lcd_Cmd>:
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
void Lcd_Cmd(lcd_Cmd_Type command)
{
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	18 2f       	mov	r17, r24
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	60 ef       	ldi	r22, 0xF0	; 240
 2ce:	41 2f       	mov	r20, r17
 2d0:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2de:	05 e0       	ldi	r16, 0x05	; 5
 2e0:	80 2f       	mov	r24, r16
 2e2:	8a 95       	dec	r24
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <Lcd_Cmd+0x2c>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2f0:	80 e4       	ldi	r24, 0x40	; 64
 2f2:	e8 2e       	mov	r14, r24
 2f4:	8f e1       	ldi	r24, 0x1F	; 31
 2f6:	f8 2e       	mov	r15, r24
 2f8:	c7 01       	movw	r24, r14
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <Lcd_Cmd+0x44>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 2fe:	12 95       	swap	r17
 300:	10 7f       	andi	r17, 0xF0	; 240
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	60 ef       	ldi	r22, 0xF0	; 240
 306:	41 2f       	mov	r20, r17
 308:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	63 e0       	ldi	r22, 0x03	; 3
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 316:	0a 95       	dec	r16
 318:	f1 f7       	brne	.-4      	; 0x316 <Lcd_Cmd+0x60>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	63 e0       	ldi	r22, 0x03	; 3
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 324:	c7 01       	movw	r24, r14
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <Lcd_Cmd+0x70>

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();
}
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	08 95       	ret

00000334 <Lcd_Display_Chr>:
	Lcd_Goto_Row_Column(0, 0);
}


void Lcd_Display_Chr(u8 chr)
{
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	18 2f       	mov	r17, r24
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	60 ef       	ldi	r22, 0xF0	; 240
 34c:	41 2f       	mov	r20, r17
 34e:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	63 e0       	ldi	r22, 0x03	; 3
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 35c:	05 e0       	ldi	r16, 0x05	; 5
 35e:	80 2f       	mov	r24, r16
 360:	8a 95       	dec	r24
 362:	f1 f7       	brne	.-4      	; 0x360 <Lcd_Display_Chr+0x2c>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	63 e0       	ldi	r22, 0x03	; 3
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 36e:	90 e4       	ldi	r25, 0x40	; 64
 370:	e9 2e       	mov	r14, r25
 372:	9f e1       	ldi	r25, 0x1F	; 31
 374:	f9 2e       	mov	r15, r25
 376:	c7 01       	movw	r24, r14
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <Lcd_Display_Chr+0x44>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 37c:	12 95       	swap	r17
 37e:	10 7f       	andi	r17, 0xF0	; 240
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	60 ef       	ldi	r22, 0xF0	; 240
 384:	41 2f       	mov	r20, r17
 386:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	63 e0       	ldi	r22, 0x03	; 3
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 394:	0a 95       	dec	r16
 396:	f1 f7       	brne	.-4      	; 0x394 <Lcd_Display_Chr+0x60>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	63 e0       	ldi	r22, 0x03	; 3
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3a2:	c7 01       	movw	r24, r14
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <Lcd_Display_Chr+0x70>


void Lcd_Display_Chr(u8 chr)
{
	Lcd_Data(chr);
}
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	08 95       	ret

000003b2 <Lcd_Display_str>:
void Lcd_Display_str(u8 str[])
{
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	ec 01       	movw	r28, r24
	while(*str != '\0')
 3c0:	18 81       	ld	r17, Y
 3c2:	11 23       	and	r17, r17
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <Lcd_Display_str+0x16>
 3c6:	3a c0       	rjmp	.+116    	; 0x43c <Lcd_Display_str+0x8a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3c8:	05 e0       	ldi	r16, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3ca:	20 e4       	ldi	r18, 0x40	; 64
 3cc:	e2 2e       	mov	r14, r18
 3ce:	2f e1       	ldi	r18, 0x1F	; 31
 3d0:	f2 2e       	mov	r15, r18
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	60 ef       	ldi	r22, 0xF0	; 240
 3e0:	41 2f       	mov	r20, r17
 3e2:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	63 e0       	ldi	r22, 0x03	; 3
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3f0:	80 2f       	mov	r24, r16
 3f2:	8a 95       	dec	r24
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <Lcd_Display_str+0x40>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	63 e0       	ldi	r22, 0x03	; 3
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 400:	c7 01       	movw	r24, r14
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <Lcd_Display_str+0x50>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 406:	12 95       	swap	r17
 408:	10 7f       	andi	r17, 0xF0	; 240
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	60 ef       	ldi	r22, 0xF0	; 240
 40e:	41 2f       	mov	r20, r17
 410:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	63 e0       	ldi	r22, 0x03	; 3
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 41e:	80 2f       	mov	r24, r16
 420:	8a 95       	dec	r24
 422:	f1 f7       	brne	.-4      	; 0x420 <Lcd_Display_str+0x6e>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	63 e0       	ldi	r22, 0x03	; 3
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 42e:	c7 01       	movw	r24, r14
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <Lcd_Display_str+0x7e>
void Lcd_Display_str(u8 str[])
{
	while(*str != '\0')
	{
		Lcd_Display_Chr(*str);
		str++;
 434:	21 96       	adiw	r28, 0x01	; 1
{
	Lcd_Data(chr);
}
void Lcd_Display_str(u8 str[])
{
	while(*str != '\0')
 436:	18 81       	ld	r17, Y
 438:	11 23       	and	r17, r17
 43a:	59 f6       	brne	.-106    	; 0x3d2 <Lcd_Display_str+0x20>
	{
		Lcd_Display_Chr(*str);
		str++;
	}
}
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	08 95       	ret

0000044a <Lcd_Goto_Row_Column>:
void Lcd_Goto_Row_Column(u8 row, u8 column)
{
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
	switch (row)
 452:	88 23       	and	r24, r24
 454:	09 f0       	breq	.+2      	; 0x458 <Lcd_Goto_Row_Column+0xe>
 456:	3c c0       	rjmp	.+120    	; 0x4d0 <Lcd_Goto_Row_Column+0x86>
	{
	case 0:
		Lcd_Cmd(0x80+column);
 458:	16 2f       	mov	r17, r22
 45a:	10 58       	subi	r17, 0x80	; 128
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	60 ef       	ldi	r22, 0xF0	; 240
 46a:	41 2f       	mov	r20, r17
 46c:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	63 e0       	ldi	r22, 0x03	; 3
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 47a:	05 e0       	ldi	r16, 0x05	; 5
 47c:	80 2f       	mov	r24, r16
 47e:	8a 95       	dec	r24
 480:	f1 f7       	brne	.-4      	; 0x47e <Lcd_Goto_Row_Column+0x34>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	63 e0       	ldi	r22, 0x03	; 3
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 48c:	30 e4       	ldi	r19, 0x40	; 64
 48e:	e3 2e       	mov	r14, r19
 490:	3f e1       	ldi	r19, 0x1F	; 31
 492:	f3 2e       	mov	r15, r19
 494:	c7 01       	movw	r24, r14
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <Lcd_Goto_Row_Column+0x4c>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 49a:	12 95       	swap	r17
 49c:	10 7f       	andi	r17, 0xF0	; 240
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	60 ef       	ldi	r22, 0xF0	; 240
 4a2:	41 2f       	mov	r20, r17
 4a4:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	63 e0       	ldi	r22, 0x03	; 3
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4b2:	0a 95       	dec	r16
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <Lcd_Goto_Row_Column+0x68>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	63 e0       	ldi	r22, 0x03	; 3
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4c0:	c7 01       	movw	r24, r14
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <Lcd_Goto_Row_Column+0x78>

	case 1:
		Lcd_Cmd(0xC0+column);
		break;
	}
}
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	08 95       	ret
		str++;
	}
}
void Lcd_Goto_Row_Column(u8 row, u8 column)
{
	switch (row)
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	c9 f7       	brne	.-14     	; 0x4c6 <Lcd_Goto_Row_Column+0x7c>
	case 0:
		Lcd_Cmd(0x80+column);
		break;

	case 1:
		Lcd_Cmd(0xC0+column);
 4d4:	16 2f       	mov	r17, r22
 4d6:	10 54       	subi	r17, 0x40	; 64
 4d8:	c1 cf       	rjmp	.-126    	; 0x45c <Lcd_Goto_Row_Column+0x12>

000004da <Lcd_Init>:
	/*	Enable pulse	*/
	Lcd_Pulse();
}

void Lcd_Init(void)
{
 4da:	9f 92       	push	r9
 4dc:	af 92       	push	r10
 4de:	bf 92       	push	r11
 4e0:	cf 92       	push	r12
 4e2:	df 92       	push	r13
 4e4:	ef 92       	push	r14
 4e6:	ff 92       	push	r15
 4e8:	0f 93       	push	r16
 4ea:	1f 93       	push	r17
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
	/*	Configure LCD Control Lines as Output	*/
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	63 e0       	ldi	r22, 0x03	; 3
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>

	/*	Configure LCD Data Lines as Output		*/
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	64 e0       	ldi	r22, 0x04	; 4
 512:	41 e0       	ldi	r20, 0x01	; 1
 514:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	65 e0       	ldi	r22, 0x05	; 5
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	66 e0       	ldi	r22, 0x06	; 6
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	67 e0       	ldi	r22, 0x07	; 7
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>

	/*	Set LCD For Write Mode	*/
	Dio_Write_Channel(DIO_PORTB, DIO_PIN2, DIO_LOW);
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	62 e0       	ldi	r22, 0x02	; 2
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
 540:	80 e6       	ldi	r24, 0x60	; 96
 542:	9a ee       	ldi	r25, 0xEA	; 234
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <Lcd_Init+0x6a>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	60 ef       	ldi	r22, 0xF0	; 240
 556:	43 e0       	ldi	r20, 0x03	; 3
 558:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	63 e0       	ldi	r22, 0x03	; 3
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 566:	e5 e0       	ldi	r30, 0x05	; 5
 568:	fe 2e       	mov	r15, r30
 56a:	8f 2d       	mov	r24, r15
 56c:	8a 95       	dec	r24
 56e:	f1 f7       	brne	.-4      	; 0x56c <Lcd_Init+0x92>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	63 e0       	ldi	r22, 0x03	; 3
 574:	40 e0       	ldi	r20, 0x00	; 0
 576:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 57a:	00 e4       	ldi	r16, 0x40	; 64
 57c:	1f e1       	ldi	r17, 0x1F	; 31
 57e:	c8 01       	movw	r24, r16
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <Lcd_Init+0xa6>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	60 ef       	ldi	r22, 0xF0	; 240
 588:	40 e3       	ldi	r20, 0x30	; 48
 58a:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	63 e0       	ldi	r22, 0x03	; 3
 592:	41 e0       	ldi	r20, 0x01	; 1
 594:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 598:	8f 2d       	mov	r24, r15
 59a:	8a 95       	dec	r24
 59c:	f1 f7       	brne	.-4      	; 0x59a <Lcd_Init+0xc0>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	63 e0       	ldi	r22, 0x03	; 3
 5a2:	40 e0       	ldi	r20, 0x00	; 0
 5a4:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5a8:	c8 01       	movw	r24, r16
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <Lcd_Init+0xd0>
 5ae:	80 e2       	ldi	r24, 0x20	; 32
 5b0:	9e e4       	ldi	r25, 0x4E	; 78
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <Lcd_Init+0xd8>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	60 ef       	ldi	r22, 0xF0	; 240
 5c4:	43 e0       	ldi	r20, 0x03	; 3
 5c6:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	63 e0       	ldi	r22, 0x03	; 3
 5ce:	41 e0       	ldi	r20, 0x01	; 1
 5d0:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5d4:	8f 2d       	mov	r24, r15
 5d6:	8a 95       	dec	r24
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <Lcd_Init+0xfc>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	63 e0       	ldi	r22, 0x03	; 3
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5e4:	c8 01       	movw	r24, r16
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <Lcd_Init+0x10c>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	60 ef       	ldi	r22, 0xF0	; 240
 5ee:	40 e3       	ldi	r20, 0x30	; 48
 5f0:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	63 e0       	ldi	r22, 0x03	; 3
 5f8:	41 e0       	ldi	r20, 0x01	; 1
 5fa:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5fe:	8f 2d       	mov	r24, r15
 600:	8a 95       	dec	r24
 602:	f1 f7       	brne	.-4      	; 0x600 <Lcd_Init+0x126>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	63 e0       	ldi	r22, 0x03	; 3
 608:	40 e0       	ldi	r20, 0x00	; 0
 60a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 60e:	c8 01       	movw	r24, r16
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	f1 f7       	brne	.-4      	; 0x610 <Lcd_Init+0x136>
 614:	80 e9       	ldi	r24, 0x90	; 144
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	f1 f7       	brne	.-4      	; 0x618 <Lcd_Init+0x13e>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	61 e0       	ldi	r22, 0x01	; 1
 620:	40 e0       	ldi	r20, 0x00	; 0
 622:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	60 ef       	ldi	r22, 0xF0	; 240
 62a:	43 e0       	ldi	r20, 0x03	; 3
 62c:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	63 e0       	ldi	r22, 0x03	; 3
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 63a:	8f 2d       	mov	r24, r15
 63c:	8a 95       	dec	r24
 63e:	f1 f7       	brne	.-4      	; 0x63c <Lcd_Init+0x162>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	63 e0       	ldi	r22, 0x03	; 3
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 64a:	c8 01       	movw	r24, r16
 64c:	01 97       	sbiw	r24, 0x01	; 1
 64e:	f1 f7       	brne	.-4      	; 0x64c <Lcd_Init+0x172>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	60 ef       	ldi	r22, 0xF0	; 240
 654:	40 e3       	ldi	r20, 0x30	; 48
 656:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	63 e0       	ldi	r22, 0x03	; 3
 65e:	41 e0       	ldi	r20, 0x01	; 1
 660:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 664:	8f 2d       	mov	r24, r15
 666:	8a 95       	dec	r24
 668:	f1 f7       	brne	.-4      	; 0x666 <Lcd_Init+0x18c>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	63 e0       	ldi	r22, 0x03	; 3
 66e:	40 e0       	ldi	r20, 0x00	; 0
 670:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 674:	c8 01       	movw	r24, r16
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <Lcd_Init+0x19c>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	40 e0       	ldi	r20, 0x00	; 0
 680:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	60 ef       	ldi	r22, 0xF0	; 240
 688:	42 e0       	ldi	r20, 0x02	; 2
 68a:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	63 e0       	ldi	r22, 0x03	; 3
 692:	41 e0       	ldi	r20, 0x01	; 1
 694:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 698:	8f 2d       	mov	r24, r15
 69a:	8a 95       	dec	r24
 69c:	f1 f7       	brne	.-4      	; 0x69a <Lcd_Init+0x1c0>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	63 e0       	ldi	r22, 0x03	; 3
 6a2:	40 e0       	ldi	r20, 0x00	; 0
 6a4:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6a8:	c8 01       	movw	r24, r16
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <Lcd_Init+0x1d0>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	60 ef       	ldi	r22, 0xF0	; 240
 6b2:	40 e2       	ldi	r20, 0x20	; 32
 6b4:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	63 e0       	ldi	r22, 0x03	; 3
 6bc:	41 e0       	ldi	r20, 0x01	; 1
 6be:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6c2:	8f 2d       	mov	r24, r15
 6c4:	8a 95       	dec	r24
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <Lcd_Init+0x1ea>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	63 e0       	ldi	r22, 0x03	; 3
 6cc:	40 e0       	ldi	r20, 0x00	; 0
 6ce:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6d2:	c8 01       	movw	r24, r16
 6d4:	01 97       	sbiw	r24, 0x01	; 1
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <Lcd_Init+0x1fa>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	40 e0       	ldi	r20, 0x00	; 0
 6de:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	60 ef       	ldi	r22, 0xF0	; 240
 6e6:	42 e0       	ldi	r20, 0x02	; 2
 6e8:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	63 e0       	ldi	r22, 0x03	; 3
 6f0:	41 e0       	ldi	r20, 0x01	; 1
 6f2:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6f6:	8f 2d       	mov	r24, r15
 6f8:	8a 95       	dec	r24
 6fa:	f1 f7       	brne	.-4      	; 0x6f8 <Lcd_Init+0x21e>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	63 e0       	ldi	r22, 0x03	; 3
 700:	40 e0       	ldi	r20, 0x00	; 0
 702:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 706:	c8 01       	movw	r24, r16
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	f1 f7       	brne	.-4      	; 0x708 <Lcd_Init+0x22e>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	60 ef       	ldi	r22, 0xF0	; 240
 710:	40 e2       	ldi	r20, 0x20	; 32
 712:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	63 e0       	ldi	r22, 0x03	; 3
 71a:	41 e0       	ldi	r20, 0x01	; 1
 71c:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 720:	fa 94       	dec	r15
 722:	f1 f7       	brne	.-4      	; 0x720 <Lcd_Init+0x246>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	63 e0       	ldi	r22, 0x03	; 3
 728:	40 e0       	ldi	r20, 0x00	; 0
 72a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 72e:	c8 01       	movw	r24, r16
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <Lcd_Init+0x256>
 734:	70 e6       	ldi	r23, 0x60	; 96
 736:	e7 2e       	mov	r14, r23
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	f7 2e       	mov	r15, r23
 73c:	60 e4       	ldi	r22, 0x40	; 64
 73e:	c6 2e       	mov	r12, r22
 740:	d1 2c       	mov	r13, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 742:	05 e0       	ldi	r16, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 744:	c0 e4       	ldi	r28, 0x40	; 64
 746:	df e1       	ldi	r29, 0x1F	; 31
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;

	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
 748:	1c 2d       	mov	r17, r12
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	61 e0       	ldi	r22, 0x01	; 1
 74e:	40 e0       	ldi	r20, 0x00	; 0
 750:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	60 ef       	ldi	r22, 0xF0	; 240
 758:	4c 2d       	mov	r20, r12
 75a:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	63 e0       	ldi	r22, 0x03	; 3
 762:	41 e0       	ldi	r20, 0x01	; 1
 764:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 768:	55 e0       	ldi	r21, 0x05	; 5
 76a:	95 2e       	mov	r9, r21
 76c:	80 2f       	mov	r24, r16
 76e:	8a 95       	dec	r24
 770:	f1 f7       	brne	.-4      	; 0x76e <Lcd_Init+0x294>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	63 e0       	ldi	r22, 0x03	; 3
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 77c:	40 e4       	ldi	r20, 0x40	; 64
 77e:	a4 2e       	mov	r10, r20
 780:	4f e1       	ldi	r20, 0x1F	; 31
 782:	b4 2e       	mov	r11, r20
 784:	ce 01       	movw	r24, r28
 786:	01 97       	sbiw	r24, 0x01	; 1
 788:	f1 f7       	brne	.-4      	; 0x786 <Lcd_Init+0x2ac>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 78a:	12 95       	swap	r17
 78c:	10 7f       	andi	r17, 0xF0	; 240
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	60 ef       	ldi	r22, 0xF0	; 240
 792:	41 2f       	mov	r20, r17
 794:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	63 e0       	ldi	r22, 0x03	; 3
 79c:	41 e0       	ldi	r20, 0x01	; 1
 79e:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 7a2:	80 2f       	mov	r24, r16
 7a4:	8a 95       	dec	r24
 7a6:	f1 f7       	brne	.-4      	; 0x7a4 <Lcd_Init+0x2ca>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	63 e0       	ldi	r22, 0x03	; 3
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 7b2:	ce 01       	movw	r24, r28
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	f1 f7       	brne	.-4      	; 0x7b4 <Lcd_Init+0x2da>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
 7b8:	f7 01       	movw	r30, r14
 7ba:	10 81       	ld	r17, Z
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	61 e0       	ldi	r22, 0x01	; 1
 7c0:	41 e0       	ldi	r20, 0x01	; 1
 7c2:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	60 ef       	ldi	r22, 0xF0	; 240
 7ca:	41 2f       	mov	r20, r17
 7cc:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	63 e0       	ldi	r22, 0x03	; 3
 7d4:	41 e0       	ldi	r20, 0x01	; 1
 7d6:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 7da:	80 2f       	mov	r24, r16
 7dc:	8a 95       	dec	r24
 7de:	f1 f7       	brne	.-4      	; 0x7dc <Lcd_Init+0x302>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	63 e0       	ldi	r22, 0x03	; 3
 7e4:	40 e0       	ldi	r20, 0x00	; 0
 7e6:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 7ea:	ce 01       	movw	r24, r28
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <Lcd_Init+0x312>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 7f0:	12 95       	swap	r17
 7f2:	10 7f       	andi	r17, 0xF0	; 240
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	60 ef       	ldi	r22, 0xF0	; 240
 7f8:	41 2f       	mov	r20, r17
 7fa:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	63 e0       	ldi	r22, 0x03	; 3
 802:	41 e0       	ldi	r20, 0x01	; 1
 804:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 808:	80 2f       	mov	r24, r16
 80a:	8a 95       	dec	r24
 80c:	f1 f7       	brne	.-4      	; 0x80a <Lcd_Init+0x330>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	63 e0       	ldi	r22, 0x03	; 3
 812:	40 e0       	ldi	r20, 0x00	; 0
 814:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 818:	ce 01       	movw	r24, r28
 81a:	01 97       	sbiw	r24, 0x01	; 1
 81c:	f1 f7       	brne	.-4      	; 0x81a <Lcd_Init+0x340>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
 81e:	f7 01       	movw	r30, r14
 820:	11 81       	ldd	r17, Z+1	; 0x01
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	61 e0       	ldi	r22, 0x01	; 1
 826:	41 e0       	ldi	r20, 0x01	; 1
 828:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	60 ef       	ldi	r22, 0xF0	; 240
 830:	41 2f       	mov	r20, r17
 832:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	63 e0       	ldi	r22, 0x03	; 3
 83a:	41 e0       	ldi	r20, 0x01	; 1
 83c:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 840:	80 2f       	mov	r24, r16
 842:	8a 95       	dec	r24
 844:	f1 f7       	brne	.-4      	; 0x842 <Lcd_Init+0x368>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	63 e0       	ldi	r22, 0x03	; 3
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 850:	ce 01       	movw	r24, r28
 852:	01 97       	sbiw	r24, 0x01	; 1
 854:	f1 f7       	brne	.-4      	; 0x852 <Lcd_Init+0x378>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 856:	12 95       	swap	r17
 858:	10 7f       	andi	r17, 0xF0	; 240
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	60 ef       	ldi	r22, 0xF0	; 240
 85e:	41 2f       	mov	r20, r17
 860:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	63 e0       	ldi	r22, 0x03	; 3
 868:	41 e0       	ldi	r20, 0x01	; 1
 86a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 86e:	80 2f       	mov	r24, r16
 870:	8a 95       	dec	r24
 872:	f1 f7       	brne	.-4      	; 0x870 <__stack+0x11>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	63 e0       	ldi	r22, 0x03	; 3
 878:	40 e0       	ldi	r20, 0x00	; 0
 87a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 87e:	ce 01       	movw	r24, r28
 880:	01 97       	sbiw	r24, 0x01	; 1
 882:	f1 f7       	brne	.-4      	; 0x880 <__stack+0x21>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
 884:	f7 01       	movw	r30, r14
 886:	12 81       	ldd	r17, Z+2	; 0x02
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	61 e0       	ldi	r22, 0x01	; 1
 88c:	41 e0       	ldi	r20, 0x01	; 1
 88e:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	60 ef       	ldi	r22, 0xF0	; 240
 896:	41 2f       	mov	r20, r17
 898:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	63 e0       	ldi	r22, 0x03	; 3
 8a0:	41 e0       	ldi	r20, 0x01	; 1
 8a2:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 8a6:	80 2f       	mov	r24, r16
 8a8:	8a 95       	dec	r24
 8aa:	f1 f7       	brne	.-4      	; 0x8a8 <__stack+0x49>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	63 e0       	ldi	r22, 0x03	; 3
 8b0:	40 e0       	ldi	r20, 0x00	; 0
 8b2:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8b6:	ce 01       	movw	r24, r28
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <__stack+0x59>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 8bc:	12 95       	swap	r17
 8be:	10 7f       	andi	r17, 0xF0	; 240
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	60 ef       	ldi	r22, 0xF0	; 240
 8c4:	41 2f       	mov	r20, r17
 8c6:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	63 e0       	ldi	r22, 0x03	; 3
 8ce:	41 e0       	ldi	r20, 0x01	; 1
 8d0:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 8d4:	80 2f       	mov	r24, r16
 8d6:	8a 95       	dec	r24
 8d8:	f1 f7       	brne	.-4      	; 0x8d6 <__stack+0x77>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	63 e0       	ldi	r22, 0x03	; 3
 8de:	40 e0       	ldi	r20, 0x00	; 0
 8e0:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8e4:	ce 01       	movw	r24, r28
 8e6:	01 97       	sbiw	r24, 0x01	; 1
 8e8:	f1 f7       	brne	.-4      	; 0x8e6 <__stack+0x87>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
 8ea:	f7 01       	movw	r30, r14
 8ec:	13 81       	ldd	r17, Z+3	; 0x03
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	61 e0       	ldi	r22, 0x01	; 1
 8f2:	41 e0       	ldi	r20, 0x01	; 1
 8f4:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	60 ef       	ldi	r22, 0xF0	; 240
 8fc:	41 2f       	mov	r20, r17
 8fe:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	63 e0       	ldi	r22, 0x03	; 3
 906:	41 e0       	ldi	r20, 0x01	; 1
 908:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 90c:	80 2f       	mov	r24, r16
 90e:	8a 95       	dec	r24
 910:	f1 f7       	brne	.-4      	; 0x90e <__stack+0xaf>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	63 e0       	ldi	r22, 0x03	; 3
 916:	40 e0       	ldi	r20, 0x00	; 0
 918:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 91c:	ce 01       	movw	r24, r28
 91e:	01 97       	sbiw	r24, 0x01	; 1
 920:	f1 f7       	brne	.-4      	; 0x91e <__stack+0xbf>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 922:	12 95       	swap	r17
 924:	10 7f       	andi	r17, 0xF0	; 240
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	60 ef       	ldi	r22, 0xF0	; 240
 92a:	41 2f       	mov	r20, r17
 92c:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	63 e0       	ldi	r22, 0x03	; 3
 934:	41 e0       	ldi	r20, 0x01	; 1
 936:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 93a:	80 2f       	mov	r24, r16
 93c:	8a 95       	dec	r24
 93e:	f1 f7       	brne	.-4      	; 0x93c <__stack+0xdd>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	63 e0       	ldi	r22, 0x03	; 3
 944:	40 e0       	ldi	r20, 0x00	; 0
 946:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 94a:	ce 01       	movw	r24, r28
 94c:	01 97       	sbiw	r24, 0x01	; 1
 94e:	f1 f7       	brne	.-4      	; 0x94c <__stack+0xed>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
 950:	f7 01       	movw	r30, r14
 952:	14 81       	ldd	r17, Z+4	; 0x04
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	61 e0       	ldi	r22, 0x01	; 1
 958:	41 e0       	ldi	r20, 0x01	; 1
 95a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	60 ef       	ldi	r22, 0xF0	; 240
 962:	41 2f       	mov	r20, r17
 964:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 968:	81 e0       	ldi	r24, 0x01	; 1
 96a:	63 e0       	ldi	r22, 0x03	; 3
 96c:	41 e0       	ldi	r20, 0x01	; 1
 96e:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 972:	80 2f       	mov	r24, r16
 974:	8a 95       	dec	r24
 976:	f1 f7       	brne	.-4      	; 0x974 <__stack+0x115>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	63 e0       	ldi	r22, 0x03	; 3
 97c:	40 e0       	ldi	r20, 0x00	; 0
 97e:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 982:	ce 01       	movw	r24, r28
 984:	01 97       	sbiw	r24, 0x01	; 1
 986:	f1 f7       	brne	.-4      	; 0x984 <__stack+0x125>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 988:	12 95       	swap	r17
 98a:	10 7f       	andi	r17, 0xF0	; 240
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	60 ef       	ldi	r22, 0xF0	; 240
 990:	41 2f       	mov	r20, r17
 992:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	63 e0       	ldi	r22, 0x03	; 3
 99a:	41 e0       	ldi	r20, 0x01	; 1
 99c:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 9a0:	80 2f       	mov	r24, r16
 9a2:	8a 95       	dec	r24
 9a4:	f1 f7       	brne	.-4      	; 0x9a2 <__stack+0x143>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	63 e0       	ldi	r22, 0x03	; 3
 9aa:	40 e0       	ldi	r20, 0x00	; 0
 9ac:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 9b0:	ce 01       	movw	r24, r28
 9b2:	01 97       	sbiw	r24, 0x01	; 1
 9b4:	f1 f7       	brne	.-4      	; 0x9b2 <__stack+0x153>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
 9b6:	f7 01       	movw	r30, r14
 9b8:	15 81       	ldd	r17, Z+5	; 0x05
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	61 e0       	ldi	r22, 0x01	; 1
 9be:	41 e0       	ldi	r20, 0x01	; 1
 9c0:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	60 ef       	ldi	r22, 0xF0	; 240
 9c8:	41 2f       	mov	r20, r17
 9ca:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	63 e0       	ldi	r22, 0x03	; 3
 9d2:	41 e0       	ldi	r20, 0x01	; 1
 9d4:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 9d8:	80 2f       	mov	r24, r16
 9da:	8a 95       	dec	r24
 9dc:	f1 f7       	brne	.-4      	; 0x9da <__stack+0x17b>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	63 e0       	ldi	r22, 0x03	; 3
 9e2:	40 e0       	ldi	r20, 0x00	; 0
 9e4:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 9e8:	ce 01       	movw	r24, r28
 9ea:	01 97       	sbiw	r24, 0x01	; 1
 9ec:	f1 f7       	brne	.-4      	; 0x9ea <__stack+0x18b>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 9ee:	12 95       	swap	r17
 9f0:	10 7f       	andi	r17, 0xF0	; 240
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	60 ef       	ldi	r22, 0xF0	; 240
 9f6:	41 2f       	mov	r20, r17
 9f8:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	63 e0       	ldi	r22, 0x03	; 3
 a00:	41 e0       	ldi	r20, 0x01	; 1
 a02:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 a06:	80 2f       	mov	r24, r16
 a08:	8a 95       	dec	r24
 a0a:	f1 f7       	brne	.-4      	; 0xa08 <__stack+0x1a9>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	63 e0       	ldi	r22, 0x03	; 3
 a10:	40 e0       	ldi	r20, 0x00	; 0
 a12:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 a16:	ce 01       	movw	r24, r28
 a18:	01 97       	sbiw	r24, 0x01	; 1
 a1a:	f1 f7       	brne	.-4      	; 0xa18 <__stack+0x1b9>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
 a1c:	f7 01       	movw	r30, r14
 a1e:	16 81       	ldd	r17, Z+6	; 0x06
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	61 e0       	ldi	r22, 0x01	; 1
 a24:	41 e0       	ldi	r20, 0x01	; 1
 a26:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 a2a:	80 e0       	ldi	r24, 0x00	; 0
 a2c:	60 ef       	ldi	r22, 0xF0	; 240
 a2e:	41 2f       	mov	r20, r17
 a30:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	63 e0       	ldi	r22, 0x03	; 3
 a38:	41 e0       	ldi	r20, 0x01	; 1
 a3a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 a3e:	80 2f       	mov	r24, r16
 a40:	8a 95       	dec	r24
 a42:	f1 f7       	brne	.-4      	; 0xa40 <__stack+0x1e1>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 a44:	81 e0       	ldi	r24, 0x01	; 1
 a46:	63 e0       	ldi	r22, 0x03	; 3
 a48:	40 e0       	ldi	r20, 0x00	; 0
 a4a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 a4e:	ce 01       	movw	r24, r28
 a50:	01 97       	sbiw	r24, 0x01	; 1
 a52:	f1 f7       	brne	.-4      	; 0xa50 <__stack+0x1f1>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 a54:	12 95       	swap	r17
 a56:	10 7f       	andi	r17, 0xF0	; 240
 a58:	80 e0       	ldi	r24, 0x00	; 0
 a5a:	60 ef       	ldi	r22, 0xF0	; 240
 a5c:	41 2f       	mov	r20, r17
 a5e:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	63 e0       	ldi	r22, 0x03	; 3
 a66:	41 e0       	ldi	r20, 0x01	; 1
 a68:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 a6c:	80 2f       	mov	r24, r16
 a6e:	8a 95       	dec	r24
 a70:	f1 f7       	brne	.-4      	; 0xa6e <__stack+0x20f>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	63 e0       	ldi	r22, 0x03	; 3
 a76:	40 e0       	ldi	r20, 0x00	; 0
 a78:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 a7c:	ce 01       	movw	r24, r28
 a7e:	01 97       	sbiw	r24, 0x01	; 1
 a80:	f1 f7       	brne	.-4      	; 0xa7e <__stack+0x21f>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
 a82:	f7 01       	movw	r30, r14
 a84:	17 81       	ldd	r17, Z+7	; 0x07
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	61 e0       	ldi	r22, 0x01	; 1
 a8a:	41 e0       	ldi	r20, 0x01	; 1
 a8c:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 a90:	80 e0       	ldi	r24, 0x00	; 0
 a92:	60 ef       	ldi	r22, 0xF0	; 240
 a94:	41 2f       	mov	r20, r17
 a96:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	63 e0       	ldi	r22, 0x03	; 3
 a9e:	41 e0       	ldi	r20, 0x01	; 1
 aa0:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 aa4:	80 2f       	mov	r24, r16
 aa6:	8a 95       	dec	r24
 aa8:	f1 f7       	brne	.-4      	; 0xaa6 <__stack+0x247>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	63 e0       	ldi	r22, 0x03	; 3
 aae:	40 e0       	ldi	r20, 0x00	; 0
 ab0:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 ab4:	ce 01       	movw	r24, r28
 ab6:	01 97       	sbiw	r24, 0x01	; 1
 ab8:	f1 f7       	brne	.-4      	; 0xab6 <__stack+0x257>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 aba:	12 95       	swap	r17
 abc:	10 7f       	andi	r17, 0xF0	; 240
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	60 ef       	ldi	r22, 0xF0	; 240
 ac2:	41 2f       	mov	r20, r17
 ac4:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 ac8:	81 e0       	ldi	r24, 0x01	; 1
 aca:	63 e0       	ldi	r22, 0x03	; 3
 acc:	41 e0       	ldi	r20, 0x01	; 1
 ace:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 ad2:	80 2f       	mov	r24, r16
 ad4:	8a 95       	dec	r24
 ad6:	f1 f7       	brne	.-4      	; 0xad4 <__stack+0x275>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	63 e0       	ldi	r22, 0x03	; 3
 adc:	40 e0       	ldi	r20, 0x00	; 0
 ade:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 ae2:	ce 01       	movw	r24, r28
 ae4:	01 97       	sbiw	r24, 0x01	; 1
 ae6:	f1 f7       	brne	.-4      	; 0xae4 <__stack+0x285>
 ae8:	88 e0       	ldi	r24, 0x08	; 8
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	c8 0e       	add	r12, r24
 aee:	d9 1e       	adc	r13, r25
 af0:	e8 0e       	add	r14, r24
 af2:	f9 1e       	adc	r15, r25
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;

	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
 af4:	90 e8       	ldi	r25, 0x80	; 128
 af6:	c9 16       	cp	r12, r25
 af8:	d1 04       	cpc	r13, r1
 afa:	09 f0       	breq	.+2      	; 0xafe <__stack+0x29f>
 afc:	25 ce       	rjmp	.-950    	; 0x748 <Lcd_Init+0x26e>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
 afe:	81 e0       	ldi	r24, 0x01	; 1
 b00:	61 e0       	ldi	r22, 0x01	; 1
 b02:	40 e0       	ldi	r20, 0x00	; 0
 b04:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 b08:	80 e0       	ldi	r24, 0x00	; 0
 b0a:	60 ef       	ldi	r22, 0xF0	; 240
 b0c:	40 e8       	ldi	r20, 0x80	; 128
 b0e:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	63 e0       	ldi	r22, 0x03	; 3
 b16:	41 e0       	ldi	r20, 0x01	; 1
 b18:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 b1c:	89 2d       	mov	r24, r9
 b1e:	8a 95       	dec	r24
 b20:	f1 f7       	brne	.-4      	; 0xb1e <__stack+0x2bf>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	63 e0       	ldi	r22, 0x03	; 3
 b26:	40 e0       	ldi	r20, 0x00	; 0
 b28:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 b2c:	c5 01       	movw	r24, r10
 b2e:	01 97       	sbiw	r24, 0x01	; 1
 b30:	f1 f7       	brne	.-4      	; 0xb2e <__stack+0x2cf>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 b32:	80 e0       	ldi	r24, 0x00	; 0
 b34:	60 ef       	ldi	r22, 0xF0	; 240
 b36:	40 e0       	ldi	r20, 0x00	; 0
 b38:	0e 94 96 07 	call	0xf2c	; 0xf2c <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 b3c:	81 e0       	ldi	r24, 0x01	; 1
 b3e:	63 e0       	ldi	r22, 0x03	; 3
 b40:	41 e0       	ldi	r20, 0x01	; 1
 b42:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 b46:	89 2d       	mov	r24, r9
 b48:	8a 95       	dec	r24
 b4a:	f1 f7       	brne	.-4      	; 0xb48 <__stack+0x2e9>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	63 e0       	ldi	r22, 0x03	; 3
 b50:	40 e0       	ldi	r20, 0x00	; 0
 b52:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 b56:	c5 01       	movw	r24, r10
 b58:	01 97       	sbiw	r24, 0x01	; 1
 b5a:	f1 f7       	brne	.-4      	; 0xb58 <__stack+0x2f9>
	Lcd_Cmd(0x03);
	Lcd_Cmd(0x02);
	Lcd_Cmd(0x02);
	Lcd_WriteCustom();
	Lcd_Goto_Row_Column(0, 0);
}
 b5c:	df 91       	pop	r29
 b5e:	cf 91       	pop	r28
 b60:	1f 91       	pop	r17
 b62:	0f 91       	pop	r16
 b64:	ff 90       	pop	r15
 b66:	ef 90       	pop	r14
 b68:	df 90       	pop	r13
 b6a:	cf 90       	pop	r12
 b6c:	bf 90       	pop	r11
 b6e:	af 90       	pop	r10
 b70:	9f 90       	pop	r9
 b72:	08 95       	ret

00000b74 <Button_Is_Pressed>:

boolean Button_Is_Pressed(button_id_t button)
{
	boolean loc_button_pressed = FALSE;

	switch(button)
 b74:	81 30       	cpi	r24, 0x01	; 1
 b76:	89 f0       	breq	.+34     	; 0xb9a <Button_Is_Pressed+0x26>
 b78:	81 30       	cpi	r24, 0x01	; 1
 b7a:	28 f0       	brcs	.+10     	; 0xb86 <Button_Is_Pressed+0x12>
 b7c:	82 30       	cpi	r24, 0x02	; 2
 b7e:	b1 f0       	breq	.+44     	; 0xbac <Button_Is_Pressed+0x38>
 b80:	90 e0       	ldi	r25, 0x00	; 0
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
 b82:	89 2f       	mov	r24, r25
 b84:	08 95       	ret
	boolean loc_button_pressed = FALSE;

	switch(button)
	{
	case BUTTON0:
		if (Dio_Read_Channel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
 b86:	81 e0       	ldi	r24, 0x01	; 1
 b88:	60 e0       	ldi	r22, 0x00	; 0
 b8a:	0e 94 68 07 	call	0xed0	; 0xed0 <Dio_Read_Channel>
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	81 30       	cpi	r24, 0x01	; 1
 b92:	b9 f7       	brne	.-18     	; 0xb82 <Button_Is_Pressed+0xe>
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON2:
		if (Dio_Read_Channel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
 b94:	91 e0       	ldi	r25, 0x01	; 1
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
 b96:	89 2f       	mov	r24, r25
 b98:	08 95       	ret
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON1:
		if (Dio_Read_Channel(DIO_PORTB, DIO_PIN4) == DIO_HIGH)
 b9a:	81 e0       	ldi	r24, 0x01	; 1
 b9c:	64 e0       	ldi	r22, 0x04	; 4
 b9e:	0e 94 68 07 	call	0xed0	; 0xed0 <Dio_Read_Channel>
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	81 30       	cpi	r24, 0x01	; 1
 ba6:	b1 f3       	breq	.-20     	; 0xb94 <Button_Is_Pressed+0x20>
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
 ba8:	89 2f       	mov	r24, r25
 baa:	08 95       	ret
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON2:
		if (Dio_Read_Channel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
 bac:	83 e0       	ldi	r24, 0x03	; 3
 bae:	62 e0       	ldi	r22, 0x02	; 2
 bb0:	0e 94 68 07 	call	0xed0	; 0xed0 <Dio_Read_Channel>
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	81 30       	cpi	r24, 0x01	; 1
 bb8:	69 f3       	breq	.-38     	; 0xb94 <Button_Is_Pressed+0x20>
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
 bba:	89 2f       	mov	r24, r25
 bbc:	08 95       	ret

00000bbe <Button_Init>:

#include "Button_Interface.h"

void Button_Init(void)
{
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
 bbe:	81 e0       	ldi	r24, 0x01	; 1
 bc0:	60 e0       	ldi	r22, 0x00	; 0
 bc2:	40 e0       	ldi	r20, 0x00	; 0
 bc4:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
 bc8:	81 e0       	ldi	r24, 0x01	; 1
 bca:	64 e0       	ldi	r22, 0x04	; 4
 bcc:	40 e0       	ldi	r20, 0x00	; 0
 bce:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
 bd2:	83 e0       	ldi	r24, 0x03	; 3
 bd4:	62 e0       	ldi	r22, 0x02	; 2
 bd6:	40 e0       	ldi	r20, 0x00	; 0
 bd8:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
}
 bdc:	08 95       	ret

00000bde <Led_Toggle>:
	}
}

void Led_Toggle(led_id_t led)
{
	switch (led)
 bde:	81 30       	cpi	r24, 0x01	; 1
 be0:	79 f0       	breq	.+30     	; 0xc00 <Led_Toggle+0x22>
 be2:	81 30       	cpi	r24, 0x01	; 1
 be4:	28 f4       	brcc	.+10     	; 0xbf0 <Led_Toggle+0x12>
	{
	case LED0:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN2);
 be6:	82 e0       	ldi	r24, 0x02	; 2
 be8:	62 e0       	ldi	r22, 0x02	; 2
 bea:	0e 94 33 07 	call	0xe66	; 0xe66 <Dio_Flip_Channel>
 bee:	08 95       	ret
	}
}

void Led_Toggle(led_id_t led)
{
	switch (led)
 bf0:	82 30       	cpi	r24, 0x02	; 2
 bf2:	09 f0       	breq	.+2      	; 0xbf6 <Led_Toggle+0x18>
 bf4:	08 95       	ret
	case LED1:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN7);
		break;

	case LED2:
		Dio_Flip_Channel(DIO_PORTD, DIO_PIN3);
 bf6:	83 e0       	ldi	r24, 0x03	; 3
 bf8:	63 e0       	ldi	r22, 0x03	; 3
 bfa:	0e 94 33 07 	call	0xe66	; 0xe66 <Dio_Flip_Channel>
 bfe:	08 95       	ret
	case LED0:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN2);
		break;

	case LED1:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN7);
 c00:	82 e0       	ldi	r24, 0x02	; 2
 c02:	67 e0       	ldi	r22, 0x07	; 7
 c04:	0e 94 33 07 	call	0xe66	; 0xe66 <Dio_Flip_Channel>
 c08:	08 95       	ret

00000c0a <Led_OFF>:
	}
}

void Led_OFF(led_id_t led)
{
	switch (led)
 c0a:	81 30       	cpi	r24, 0x01	; 1
 c0c:	89 f0       	breq	.+34     	; 0xc30 <Led_OFF+0x26>
 c0e:	81 30       	cpi	r24, 0x01	; 1
 c10:	30 f4       	brcc	.+12     	; 0xc1e <Led_OFF+0x14>
	{
	case LED0:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN2, DIO_LOW);
 c12:	82 e0       	ldi	r24, 0x02	; 2
 c14:	62 e0       	ldi	r22, 0x02	; 2
 c16:	40 e0       	ldi	r20, 0x00	; 0
 c18:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
 c1c:	08 95       	ret
	}
}

void Led_OFF(led_id_t led)
{
	switch (led)
 c1e:	82 30       	cpi	r24, 0x02	; 2
 c20:	09 f0       	breq	.+2      	; 0xc24 <Led_OFF+0x1a>
 c22:	08 95       	ret
	case LED1:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN7, DIO_LOW);
		break;

	case LED2:
		Dio_Write_Channel(DIO_PORTD, DIO_PIN3, DIO_LOW);
 c24:	83 e0       	ldi	r24, 0x03	; 3
 c26:	63 e0       	ldi	r22, 0x03	; 3
 c28:	40 e0       	ldi	r20, 0x00	; 0
 c2a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
 c2e:	08 95       	ret
	case LED0:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN2, DIO_LOW);
		break;

	case LED1:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN7, DIO_LOW);
 c30:	82 e0       	ldi	r24, 0x02	; 2
 c32:	67 e0       	ldi	r22, 0x07	; 7
 c34:	40 e0       	ldi	r20, 0x00	; 0
 c36:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
 c3a:	08 95       	ret

00000c3c <Led_ON>:
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
}

void Led_ON(led_id_t led)
{
	switch (led)
 c3c:	81 30       	cpi	r24, 0x01	; 1
 c3e:	89 f0       	breq	.+34     	; 0xc62 <Led_ON+0x26>
 c40:	81 30       	cpi	r24, 0x01	; 1
 c42:	30 f4       	brcc	.+12     	; 0xc50 <Led_ON+0x14>
	{
	case LED0:

#if(LED0_CONECTION == SOURCE)
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_HIGH);
 c44:	82 e0       	ldi	r24, 0x02	; 2
 c46:	62 e0       	ldi	r22, 0x02	; 2
 c48:	41 e0       	ldi	r20, 0x01	; 1
 c4a:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
 c4e:	08 95       	ret
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
}

void Led_ON(led_id_t led)
{
	switch (led)
 c50:	82 30       	cpi	r24, 0x02	; 2
 c52:	09 f0       	breq	.+2      	; 0xc56 <Led_ON+0x1a>
 c54:	08 95       	ret

	case LED1:
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
		break;
	case LED2:
		Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_HIGH);
 c56:	83 e0       	ldi	r24, 0x03	; 3
 c58:	63 e0       	ldi	r22, 0x03	; 3
 c5a:	41 e0       	ldi	r20, 0x01	; 1
 c5c:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
 c60:	08 95       	ret
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
#endif
		break;

	case LED1:
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
 c62:	82 e0       	ldi	r24, 0x02	; 2
 c64:	67 e0       	ldi	r22, 0x07	; 7
 c66:	41 e0       	ldi	r20, 0x01	; 1
 c68:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
 c6c:	08 95       	ret

00000c6e <Led_Init>:

#include "Led_Interface.h"

void Led_Init(void)
{
	Dio_Configure_Channel(LED0_PORT, LED0_PIN, DIO_OUTPUT);
 c6e:	82 e0       	ldi	r24, 0x02	; 2
 c70:	62 e0       	ldi	r22, 0x02	; 2
 c72:	41 e0       	ldi	r20, 0x01	; 1
 c74:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(LED1_PORT, LED1_PIN, DIO_OUTPUT);
 c78:	82 e0       	ldi	r24, 0x02	; 2
 c7a:	67 e0       	ldi	r22, 0x07	; 7
 c7c:	41 e0       	ldi	r20, 0x01	; 1
 c7e:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>
	Dio_Configure_Channel(LED2_PORT, LED2_PIN, DIO_OUTPUT);
 c82:	83 e0       	ldi	r24, 0x03	; 3
 c84:	63 e0       	ldi	r22, 0x03	; 3
 c86:	41 e0       	ldi	r20, 0x01	; 1
 c88:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_Configure_Channel>

	Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
 c8c:	82 e0       	ldi	r24, 0x02	; 2
 c8e:	62 e0       	ldi	r22, 0x02	; 2
 c90:	40 e0       	ldi	r20, 0x00	; 0
 c92:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_LOW);
 c96:	82 e0       	ldi	r24, 0x02	; 2
 c98:	67 e0       	ldi	r22, 0x07	; 7
 c9a:	40 e0       	ldi	r20, 0x00	; 0
 c9c:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
 ca0:	83 e0       	ldi	r24, 0x03	; 3
 ca2:	63 e0       	ldi	r22, 0x03	; 3
 ca4:	40 e0       	ldi	r20, 0x00	; 0
 ca6:	0e 94 c4 06 	call	0xd88	; 0xd88 <Dio_Write_Channel>
}
 caa:	08 95       	ret

00000cac <Dio_Configure_Channel>:
#include "Dio_Interface.h"


void Dio_Configure_Channel(dio_port_t port, dio_pin_t pin , dio_direction_t direction)
{
	switch (port)
 cac:	81 30       	cpi	r24, 0x01	; 1
 cae:	19 f1       	breq	.+70     	; 0xcf6 <Dio_Configure_Channel+0x4a>
 cb0:	81 30       	cpi	r24, 0x01	; 1
 cb2:	28 f0       	brcs	.+10     	; 0xcbe <Dio_Configure_Channel+0x12>
 cb4:	82 30       	cpi	r24, 0x02	; 2
 cb6:	69 f1       	breq	.+90     	; 0xd12 <Dio_Configure_Channel+0x66>
 cb8:	83 30       	cpi	r24, 0x03	; 3
 cba:	79 f0       	breq	.+30     	; 0xcda <Dio_Configure_Channel+0x2e>
 cbc:	08 95       	ret
	{
	case DIO_PORTA:
			if (direction == DIO_INPUT)
 cbe:	44 23       	and	r20, r20
 cc0:	b1 f5       	brne	.+108    	; 0xd2e <Dio_Configure_Channel+0x82>
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
 cc2:	2a b3       	in	r18, 0x1a	; 26
 cc4:	81 e0       	ldi	r24, 0x01	; 1
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	02 c0       	rjmp	.+4      	; 0xcce <Dio_Configure_Channel+0x22>
 cca:	88 0f       	add	r24, r24
 ccc:	99 1f       	adc	r25, r25
 cce:	6a 95       	dec	r22
 cd0:	e2 f7       	brpl	.-8      	; 0xcca <Dio_Configure_Channel+0x1e>
 cd2:	80 95       	com	r24
 cd4:	82 23       	and	r24, r18
 cd6:	8a bb       	out	0x1a, r24	; 26
 cd8:	08 95       	ret
					SET_BIT(DIO_DDRC_REG,pin);
				}
			break;

	case DIO_PORTD:
				if (direction == DIO_INPUT)
 cda:	44 23       	and	r20, r20
 cdc:	09 f4       	brne	.+2      	; 0xce0 <Dio_Configure_Channel+0x34>
 cde:	48 c0       	rjmp	.+144    	; 0xd70 <Dio_Configure_Channel+0xc4>
				{
					CLEAR_BIT(DIO_DDRD_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRD_REG,pin);
 ce0:	21 b3       	in	r18, 0x11	; 17
 ce2:	81 e0       	ldi	r24, 0x01	; 1
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	02 c0       	rjmp	.+4      	; 0xcec <Dio_Configure_Channel+0x40>
 ce8:	88 0f       	add	r24, r24
 cea:	99 1f       	adc	r25, r25
 cec:	6a 95       	dec	r22
 cee:	e2 f7       	brpl	.-8      	; 0xce8 <Dio_Configure_Channel+0x3c>
 cf0:	28 2b       	or	r18, r24
 cf2:	21 bb       	out	0x11, r18	; 17
 cf4:	08 95       	ret
				SET_BIT(DIO_DDRA_REG,pin);
			}
		break;

	case DIO_PORTB:
				if (direction == DIO_INPUT)
 cf6:	44 23       	and	r20, r20
 cf8:	81 f5       	brne	.+96     	; 0xd5a <Dio_Configure_Channel+0xae>
				{
					CLEAR_BIT(DIO_DDRB_REG,pin);
 cfa:	27 b3       	in	r18, 0x17	; 23
 cfc:	81 e0       	ldi	r24, 0x01	; 1
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	02 c0       	rjmp	.+4      	; 0xd06 <Dio_Configure_Channel+0x5a>
 d02:	88 0f       	add	r24, r24
 d04:	99 1f       	adc	r25, r25
 d06:	6a 95       	dec	r22
 d08:	e2 f7       	brpl	.-8      	; 0xd02 <Dio_Configure_Channel+0x56>
 d0a:	80 95       	com	r24
 d0c:	82 23       	and	r24, r18
 d0e:	87 bb       	out	0x17, r24	; 23
 d10:	08 95       	ret
					SET_BIT(DIO_DDRB_REG,pin);
				}
			break;

	case DIO_PORTC:
				if (direction == DIO_INPUT)
 d12:	44 23       	and	r20, r20
 d14:	b9 f4       	brne	.+46     	; 0xd44 <Dio_Configure_Channel+0x98>
				{
					CLEAR_BIT(DIO_DDRC_REG,pin);
 d16:	24 b3       	in	r18, 0x14	; 20
 d18:	81 e0       	ldi	r24, 0x01	; 1
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	02 c0       	rjmp	.+4      	; 0xd22 <Dio_Configure_Channel+0x76>
 d1e:	88 0f       	add	r24, r24
 d20:	99 1f       	adc	r25, r25
 d22:	6a 95       	dec	r22
 d24:	e2 f7       	brpl	.-8      	; 0xd1e <Dio_Configure_Channel+0x72>
 d26:	80 95       	com	r24
 d28:	82 23       	and	r24, r18
 d2a:	84 bb       	out	0x14, r24	; 20
 d2c:	08 95       	ret
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
			}
			else
			{
				SET_BIT(DIO_DDRA_REG,pin);
 d2e:	2a b3       	in	r18, 0x1a	; 26
 d30:	81 e0       	ldi	r24, 0x01	; 1
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	02 c0       	rjmp	.+4      	; 0xd3a <Dio_Configure_Channel+0x8e>
 d36:	88 0f       	add	r24, r24
 d38:	99 1f       	adc	r25, r25
 d3a:	6a 95       	dec	r22
 d3c:	e2 f7       	brpl	.-8      	; 0xd36 <Dio_Configure_Channel+0x8a>
 d3e:	28 2b       	or	r18, r24
 d40:	2a bb       	out	0x1a, r18	; 26
 d42:	08 95       	ret
				{
					CLEAR_BIT(DIO_DDRC_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRC_REG,pin);
 d44:	24 b3       	in	r18, 0x14	; 20
 d46:	81 e0       	ldi	r24, 0x01	; 1
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	02 c0       	rjmp	.+4      	; 0xd50 <Dio_Configure_Channel+0xa4>
 d4c:	88 0f       	add	r24, r24
 d4e:	99 1f       	adc	r25, r25
 d50:	6a 95       	dec	r22
 d52:	e2 f7       	brpl	.-8      	; 0xd4c <Dio_Configure_Channel+0xa0>
 d54:	28 2b       	or	r18, r24
 d56:	24 bb       	out	0x14, r18	; 20
 d58:	08 95       	ret
				{
					CLEAR_BIT(DIO_DDRB_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRB_REG,pin);
 d5a:	27 b3       	in	r18, 0x17	; 23
 d5c:	81 e0       	ldi	r24, 0x01	; 1
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	02 c0       	rjmp	.+4      	; 0xd66 <Dio_Configure_Channel+0xba>
 d62:	88 0f       	add	r24, r24
 d64:	99 1f       	adc	r25, r25
 d66:	6a 95       	dec	r22
 d68:	e2 f7       	brpl	.-8      	; 0xd62 <Dio_Configure_Channel+0xb6>
 d6a:	28 2b       	or	r18, r24
 d6c:	27 bb       	out	0x17, r18	; 23
 d6e:	08 95       	ret
			break;

	case DIO_PORTD:
				if (direction == DIO_INPUT)
				{
					CLEAR_BIT(DIO_DDRD_REG,pin);
 d70:	21 b3       	in	r18, 0x11	; 17
 d72:	81 e0       	ldi	r24, 0x01	; 1
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	02 c0       	rjmp	.+4      	; 0xd7c <Dio_Configure_Channel+0xd0>
 d78:	88 0f       	add	r24, r24
 d7a:	99 1f       	adc	r25, r25
 d7c:	6a 95       	dec	r22
 d7e:	e2 f7       	brpl	.-8      	; 0xd78 <Dio_Configure_Channel+0xcc>
 d80:	80 95       	com	r24
 d82:	82 23       	and	r24, r18
 d84:	81 bb       	out	0x11, r24	; 17
 d86:	08 95       	ret

00000d88 <Dio_Write_Channel>:
	}
}

void Dio_Write_Channel(dio_port_t port, dio_pin_t pin , dio_level_t level)
{
	switch (port)
 d88:	81 30       	cpi	r24, 0x01	; 1
 d8a:	29 f1       	breq	.+74     	; 0xdd6 <Dio_Write_Channel+0x4e>
 d8c:	81 30       	cpi	r24, 0x01	; 1
 d8e:	28 f0       	brcs	.+10     	; 0xd9a <Dio_Write_Channel+0x12>
 d90:	82 30       	cpi	r24, 0x02	; 2
 d92:	79 f1       	breq	.+94     	; 0xdf2 <Dio_Write_Channel+0x6a>
 d94:	83 30       	cpi	r24, 0x03	; 3
 d96:	81 f0       	breq	.+32     	; 0xdb8 <Dio_Write_Channel+0x30>
 d98:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
 d9a:	41 30       	cpi	r20, 0x01	; 1
 d9c:	09 f4       	brne	.+2      	; 0xda0 <Dio_Write_Channel+0x18>
 d9e:	4d c0       	rjmp	.+154    	; 0xe3a <Dio_Write_Channel+0xb2>
		{
			SET_BIT(DIO_PORTA_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
 da0:	2b b3       	in	r18, 0x1b	; 27
 da2:	81 e0       	ldi	r24, 0x01	; 1
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	02 c0       	rjmp	.+4      	; 0xdac <Dio_Write_Channel+0x24>
 da8:	88 0f       	add	r24, r24
 daa:	99 1f       	adc	r25, r25
 dac:	6a 95       	dec	r22
 dae:	e2 f7       	brpl	.-8      	; 0xda8 <Dio_Write_Channel+0x20>
 db0:	80 95       	com	r24
 db2:	82 23       	and	r24, r18
 db4:	8b bb       	out	0x1b, r24	; 27
 db6:	08 95       	ret
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
 db8:	41 30       	cpi	r20, 0x01	; 1
 dba:	09 f4       	brne	.+2      	; 0xdbe <Dio_Write_Channel+0x36>
 dbc:	49 c0       	rjmp	.+146    	; 0xe50 <Dio_Write_Channel+0xc8>
		{
			SET_BIT(DIO_PORTD_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
 dbe:	22 b3       	in	r18, 0x12	; 18
 dc0:	81 e0       	ldi	r24, 0x01	; 1
 dc2:	90 e0       	ldi	r25, 0x00	; 0
 dc4:	02 c0       	rjmp	.+4      	; 0xdca <Dio_Write_Channel+0x42>
 dc6:	88 0f       	add	r24, r24
 dc8:	99 1f       	adc	r25, r25
 dca:	6a 95       	dec	r22
 dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <Dio_Write_Channel+0x3e>
 dce:	80 95       	com	r24
 dd0:	82 23       	and	r24, r18
 dd2:	82 bb       	out	0x12, r24	; 18
 dd4:	08 95       	ret
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
 dd6:	41 30       	cpi	r20, 0x01	; 1
 dd8:	29 f1       	breq	.+74     	; 0xe24 <Dio_Write_Channel+0x9c>
		{
			SET_BIT(DIO_PORTB_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
 dda:	28 b3       	in	r18, 0x18	; 24
 ddc:	81 e0       	ldi	r24, 0x01	; 1
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	02 c0       	rjmp	.+4      	; 0xde6 <Dio_Write_Channel+0x5e>
 de2:	88 0f       	add	r24, r24
 de4:	99 1f       	adc	r25, r25
 de6:	6a 95       	dec	r22
 de8:	e2 f7       	brpl	.-8      	; 0xde2 <Dio_Write_Channel+0x5a>
 dea:	80 95       	com	r24
 dec:	82 23       	and	r24, r18
 dee:	88 bb       	out	0x18, r24	; 24
 df0:	08 95       	ret
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
 df2:	41 30       	cpi	r20, 0x01	; 1
 df4:	61 f0       	breq	.+24     	; 0xe0e <Dio_Write_Channel+0x86>
		{
			SET_BIT(DIO_PORTC_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
 df6:	25 b3       	in	r18, 0x15	; 21
 df8:	81 e0       	ldi	r24, 0x01	; 1
 dfa:	90 e0       	ldi	r25, 0x00	; 0
 dfc:	02 c0       	rjmp	.+4      	; 0xe02 <Dio_Write_Channel+0x7a>
 dfe:	88 0f       	add	r24, r24
 e00:	99 1f       	adc	r25, r25
 e02:	6a 95       	dec	r22
 e04:	e2 f7       	brpl	.-8      	; 0xdfe <Dio_Write_Channel+0x76>
 e06:	80 95       	com	r24
 e08:	82 23       	and	r24, r18
 e0a:	85 bb       	out	0x15, r24	; 21
 e0c:	08 95       	ret
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTC_REG,pin);
 e0e:	25 b3       	in	r18, 0x15	; 21
 e10:	81 e0       	ldi	r24, 0x01	; 1
 e12:	90 e0       	ldi	r25, 0x00	; 0
 e14:	02 c0       	rjmp	.+4      	; 0xe1a <Dio_Write_Channel+0x92>
 e16:	88 0f       	add	r24, r24
 e18:	99 1f       	adc	r25, r25
 e1a:	6a 95       	dec	r22
 e1c:	e2 f7       	brpl	.-8      	; 0xe16 <Dio_Write_Channel+0x8e>
 e1e:	28 2b       	or	r18, r24
 e20:	25 bb       	out	0x15, r18	; 21
 e22:	08 95       	ret
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTB_REG,pin);
 e24:	28 b3       	in	r18, 0x18	; 24
 e26:	81 e0       	ldi	r24, 0x01	; 1
 e28:	90 e0       	ldi	r25, 0x00	; 0
 e2a:	02 c0       	rjmp	.+4      	; 0xe30 <Dio_Write_Channel+0xa8>
 e2c:	88 0f       	add	r24, r24
 e2e:	99 1f       	adc	r25, r25
 e30:	6a 95       	dec	r22
 e32:	e2 f7       	brpl	.-8      	; 0xe2c <Dio_Write_Channel+0xa4>
 e34:	28 2b       	or	r18, r24
 e36:	28 bb       	out	0x18, r18	; 24
 e38:	08 95       	ret
	switch (port)
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTA_REG,pin);
 e3a:	2b b3       	in	r18, 0x1b	; 27
 e3c:	81 e0       	ldi	r24, 0x01	; 1
 e3e:	90 e0       	ldi	r25, 0x00	; 0
 e40:	02 c0       	rjmp	.+4      	; 0xe46 <Dio_Write_Channel+0xbe>
 e42:	88 0f       	add	r24, r24
 e44:	99 1f       	adc	r25, r25
 e46:	6a 95       	dec	r22
 e48:	e2 f7       	brpl	.-8      	; 0xe42 <Dio_Write_Channel+0xba>
 e4a:	28 2b       	or	r18, r24
 e4c:	2b bb       	out	0x1b, r18	; 27
 e4e:	08 95       	ret
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTD_REG,pin);
 e50:	22 b3       	in	r18, 0x12	; 18
 e52:	81 e0       	ldi	r24, 0x01	; 1
 e54:	90 e0       	ldi	r25, 0x00	; 0
 e56:	02 c0       	rjmp	.+4      	; 0xe5c <Dio_Write_Channel+0xd4>
 e58:	88 0f       	add	r24, r24
 e5a:	99 1f       	adc	r25, r25
 e5c:	6a 95       	dec	r22
 e5e:	e2 f7       	brpl	.-8      	; 0xe58 <Dio_Write_Channel+0xd0>
 e60:	28 2b       	or	r18, r24
 e62:	22 bb       	out	0x12, r18	; 18
 e64:	08 95       	ret

00000e66 <Dio_Flip_Channel>:
	}
}

void Dio_Flip_Channel(dio_port_t port, dio_pin_t pin)
{
	switch(port)
 e66:	81 30       	cpi	r24, 0x01	; 1
 e68:	e9 f0       	breq	.+58     	; 0xea4 <Dio_Flip_Channel+0x3e>
 e6a:	81 30       	cpi	r24, 0x01	; 1
 e6c:	28 f0       	brcs	.+10     	; 0xe78 <Dio_Flip_Channel+0x12>
 e6e:	82 30       	cpi	r24, 0x02	; 2
 e70:	21 f1       	breq	.+72     	; 0xeba <Dio_Flip_Channel+0x54>
 e72:	83 30       	cpi	r24, 0x03	; 3
 e74:	61 f0       	breq	.+24     	; 0xe8e <Dio_Flip_Channel+0x28>
 e76:	08 95       	ret
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
 e78:	2b b3       	in	r18, 0x1b	; 27
 e7a:	81 e0       	ldi	r24, 0x01	; 1
 e7c:	90 e0       	ldi	r25, 0x00	; 0
 e7e:	02 c0       	rjmp	.+4      	; 0xe84 <Dio_Flip_Channel+0x1e>
 e80:	88 0f       	add	r24, r24
 e82:	99 1f       	adc	r25, r25
 e84:	6a 95       	dec	r22
 e86:	e2 f7       	brpl	.-8      	; 0xe80 <Dio_Flip_Channel+0x1a>
 e88:	28 27       	eor	r18, r24
 e8a:	2b bb       	out	0x1b, r18	; 27
 e8c:	08 95       	ret
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
		break;

	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
 e8e:	22 b3       	in	r18, 0x12	; 18
 e90:	81 e0       	ldi	r24, 0x01	; 1
 e92:	90 e0       	ldi	r25, 0x00	; 0
 e94:	02 c0       	rjmp	.+4      	; 0xe9a <Dio_Flip_Channel+0x34>
 e96:	88 0f       	add	r24, r24
 e98:	99 1f       	adc	r25, r25
 e9a:	6a 95       	dec	r22
 e9c:	e2 f7       	brpl	.-8      	; 0xe96 <Dio_Flip_Channel+0x30>
 e9e:	28 27       	eor	r18, r24
 ea0:	22 bb       	out	0x12, r18	; 18
 ea2:	08 95       	ret
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
		break;

	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
 ea4:	28 b3       	in	r18, 0x18	; 24
 ea6:	81 e0       	ldi	r24, 0x01	; 1
 ea8:	90 e0       	ldi	r25, 0x00	; 0
 eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <Dio_Flip_Channel+0x4a>
 eac:	88 0f       	add	r24, r24
 eae:	99 1f       	adc	r25, r25
 eb0:	6a 95       	dec	r22
 eb2:	e2 f7       	brpl	.-8      	; 0xeac <Dio_Flip_Channel+0x46>
 eb4:	28 27       	eor	r18, r24
 eb6:	28 bb       	out	0x18, r18	; 24
 eb8:	08 95       	ret
		break;

	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
 eba:	25 b3       	in	r18, 0x15	; 21
 ebc:	81 e0       	ldi	r24, 0x01	; 1
 ebe:	90 e0       	ldi	r25, 0x00	; 0
 ec0:	02 c0       	rjmp	.+4      	; 0xec6 <Dio_Flip_Channel+0x60>
 ec2:	88 0f       	add	r24, r24
 ec4:	99 1f       	adc	r25, r25
 ec6:	6a 95       	dec	r22
 ec8:	e2 f7       	brpl	.-8      	; 0xec2 <Dio_Flip_Channel+0x5c>
 eca:	28 27       	eor	r18, r24
 ecc:	25 bb       	out	0x15, r18	; 21
 ece:	08 95       	ret

00000ed0 <Dio_Read_Channel>:

dio_level_t Dio_Read_Channel(dio_port_t port, dio_pin_t pin)
{
	dio_level_t loc_result = DIO_LOW;

	switch (port)
 ed0:	81 30       	cpi	r24, 0x01	; 1
 ed2:	d1 f0       	breq	.+52     	; 0xf08 <Dio_Read_Channel+0x38>
 ed4:	81 30       	cpi	r24, 0x01	; 1
 ed6:	30 f0       	brcs	.+12     	; 0xee4 <Dio_Read_Channel+0x14>
 ed8:	82 30       	cpi	r24, 0x02	; 2
 eda:	f9 f0       	breq	.+62     	; 0xf1a <Dio_Read_Channel+0x4a>
 edc:	83 30       	cpi	r24, 0x03	; 3
 ede:	59 f0       	breq	.+22     	; 0xef6 <Dio_Read_Channel+0x26>
 ee0:	80 e0       	ldi	r24, 0x00	; 0
 ee2:	08 95       	ret
	{
	case DIO_PORTA:
		loc_result=CHECK_BIT(DIO_PINA_REG,pin);
 ee4:	89 b3       	in	r24, 0x19	; 25
 ee6:	90 e0       	ldi	r25, 0x00	; 0
 ee8:	02 c0       	rjmp	.+4      	; 0xeee <Dio_Read_Channel+0x1e>
 eea:	95 95       	asr	r25
 eec:	87 95       	ror	r24
 eee:	6a 95       	dec	r22
 ef0:	e2 f7       	brpl	.-8      	; 0xeea <Dio_Read_Channel+0x1a>
 ef2:	81 70       	andi	r24, 0x01	; 1
 ef4:	08 95       	ret
			loc_result = DIO_LOW;
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
 ef6:	80 b3       	in	r24, 0x10	; 16
 ef8:	90 e0       	ldi	r25, 0x00	; 0
 efa:	02 c0       	rjmp	.+4      	; 0xf00 <Dio_Read_Channel+0x30>
 efc:	95 95       	asr	r25
 efe:	87 95       	ror	r24
 f00:	6a 95       	dec	r22
 f02:	e2 f7       	brpl	.-8      	; 0xefc <Dio_Read_Channel+0x2c>
 f04:	81 70       	andi	r24, 0x01	; 1
			loc_result = DIO_LOW;
		}
		break;
	}
	return loc_result;
}
 f06:	08 95       	ret
//			loc_result = DIO_LOW;
//		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
 f08:	86 b3       	in	r24, 0x16	; 22
 f0a:	90 e0       	ldi	r25, 0x00	; 0
 f0c:	02 c0       	rjmp	.+4      	; 0xf12 <Dio_Read_Channel+0x42>
 f0e:	95 95       	asr	r25
 f10:	87 95       	ror	r24
 f12:	6a 95       	dec	r22
 f14:	e2 f7       	brpl	.-8      	; 0xf0e <Dio_Read_Channel+0x3e>
 f16:	81 70       	andi	r24, 0x01	; 1
 f18:	08 95       	ret
			loc_result = DIO_LOW;
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
 f1a:	83 b3       	in	r24, 0x13	; 19
 f1c:	90 e0       	ldi	r25, 0x00	; 0
 f1e:	02 c0       	rjmp	.+4      	; 0xf24 <Dio_Read_Channel+0x54>
 f20:	95 95       	asr	r25
 f22:	87 95       	ror	r24
 f24:	6a 95       	dec	r22
 f26:	e2 f7       	brpl	.-8      	; 0xf20 <Dio_Read_Channel+0x50>
 f28:	81 70       	andi	r24, 0x01	; 1
 f2a:	08 95       	ret

00000f2c <Dio_Write_Channel_Group>:



void Dio_Write_Channel_Group(dio_port_t port,u8 mask,u8 data)
{
	switch (port)
 f2c:	81 30       	cpi	r24, 0x01	; 1
 f2e:	a9 f0       	breq	.+42     	; 0xf5a <Dio_Write_Channel_Group+0x2e>
 f30:	81 30       	cpi	r24, 0x01	; 1
 f32:	28 f0       	brcs	.+10     	; 0xf3e <Dio_Write_Channel_Group+0x12>
 f34:	82 30       	cpi	r24, 0x02	; 2
 f36:	c1 f0       	breq	.+48     	; 0xf68 <Dio_Write_Channel_Group+0x3c>
 f38:	83 30       	cpi	r24, 0x03	; 3
 f3a:	41 f0       	breq	.+16     	; 0xf4c <Dio_Write_Channel_Group+0x20>
 f3c:	08 95       	ret
	{
		case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data&mask);
 f3e:	8b b3       	in	r24, 0x1b	; 27
 f40:	46 23       	and	r20, r22
 f42:	60 95       	com	r22
 f44:	86 23       	and	r24, r22
 f46:	84 2b       	or	r24, r20
 f48:	8b bb       	out	0x1b, r24	; 27
 f4a:	08 95       	ret
		case DIO_PORTC:
			DIO_PORTC_REG = (DIO_PORTC_REG&~mask)|(data&mask);
		break;

		case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG&~mask)|(data&mask);
 f4c:	82 b3       	in	r24, 0x12	; 18
 f4e:	46 23       	and	r20, r22
 f50:	60 95       	com	r22
 f52:	86 23       	and	r24, r22
 f54:	84 2b       	or	r24, r20
 f56:	82 bb       	out	0x12, r24	; 18
 f58:	08 95       	ret
		case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data&mask);
		break;

		case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG&~mask)|(data&mask);
 f5a:	88 b3       	in	r24, 0x18	; 24
 f5c:	46 23       	and	r20, r22
 f5e:	60 95       	com	r22
 f60:	86 23       	and	r24, r22
 f62:	84 2b       	or	r24, r20
 f64:	88 bb       	out	0x18, r24	; 24
 f66:	08 95       	ret
		break;

		case DIO_PORTC:
			DIO_PORTC_REG = (DIO_PORTC_REG&~mask)|(data&mask);
 f68:	85 b3       	in	r24, 0x15	; 21
 f6a:	46 23       	and	r20, r22
 f6c:	60 95       	com	r22
 f6e:	86 23       	and	r24, r22
 f70:	84 2b       	or	r24, r20
 f72:	85 bb       	out	0x15, r24	; 21
 f74:	08 95       	ret

00000f76 <__udivmodqi4>:
 f76:	99 1b       	sub	r25, r25
 f78:	79 e0       	ldi	r23, 0x09	; 9
 f7a:	04 c0       	rjmp	.+8      	; 0xf84 <__udivmodqi4_ep>

00000f7c <__udivmodqi4_loop>:
 f7c:	99 1f       	adc	r25, r25
 f7e:	96 17       	cp	r25, r22
 f80:	08 f0       	brcs	.+2      	; 0xf84 <__udivmodqi4_ep>
 f82:	96 1b       	sub	r25, r22

00000f84 <__udivmodqi4_ep>:
 f84:	88 1f       	adc	r24, r24
 f86:	7a 95       	dec	r23
 f88:	c9 f7       	brne	.-14     	; 0xf7c <__udivmodqi4_loop>
 f8a:	80 95       	com	r24
 f8c:	08 95       	ret

00000f8e <_exit>:
 f8e:	f8 94       	cli

00000f90 <__stop_program>:
 f90:	ff cf       	rjmp	.-2      	; 0xf90 <__stop_program>
