
Amit_OCT13_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000056c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000011e8  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000b9b  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 97 02 	call	0x52e	; 0x52e <main>
  64:	0c 94 b4 02 	jmp	0x568	; 0x568 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Button_Is_Pressed>:

boolean Button_Is_Pressed(button_id_t button)
{
	boolean loc_button_pressed = FALSE;

	switch(button)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	89 f0       	breq	.+34     	; 0x92 <Button_Is_Pressed+0x26>
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	28 f0       	brcs	.+10     	; 0x7e <Button_Is_Pressed+0x12>
  74:	82 30       	cpi	r24, 0x02	; 2
  76:	b1 f0       	breq	.+44     	; 0xa4 <Button_Is_Pressed+0x38>
  78:	90 e0       	ldi	r25, 0x00	; 0
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
  7a:	89 2f       	mov	r24, r25
  7c:	08 95       	ret
	boolean loc_button_pressed = FALSE;

	switch(button)
	{
	case BUTTON0:
		if (Dio_Read_Channel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	60 e0       	ldi	r22, 0x00	; 0
  82:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Dio_Read_Channel>
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	b9 f7       	brne	.-18     	; 0x7a <Button_Is_Pressed+0xe>
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON2:
		if (Dio_Read_Channel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
  8c:	91 e0       	ldi	r25, 0x01	; 1
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
  8e:	89 2f       	mov	r24, r25
  90:	08 95       	ret
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON1:
		if (Dio_Read_Channel(DIO_PORTB, DIO_PIN4) == DIO_HIGH)
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	64 e0       	ldi	r22, 0x04	; 4
  96:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Dio_Read_Channel>
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	b1 f3       	breq	.-20     	; 0x8c <Button_Is_Pressed+0x20>
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
  a0:	89 2f       	mov	r24, r25
  a2:	08 95       	ret
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON2:
		if (Dio_Read_Channel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	62 e0       	ldi	r22, 0x02	; 2
  a8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Dio_Read_Channel>
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	69 f3       	breq	.-38     	; 0x8c <Button_Is_Pressed+0x20>
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
  b2:	89 2f       	mov	r24, r25
  b4:	08 95       	ret

000000b6 <Button_Init>:

#include "Button_Interface.h"

void Button_Init(void)
{
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	64 e0       	ldi	r22, 0x04	; 4
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>
}
  d4:	08 95       	ret

000000d6 <Dio_Configure_Channel>:
#include "Dio_Interface.h"


void Dio_Configure_Channel(dio_port_t port, dio_pin_t pin , dio_direction_t direction)
{
	switch (port)
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	19 f1       	breq	.+70     	; 0x120 <Dio_Configure_Channel+0x4a>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	28 f0       	brcs	.+10     	; 0xe8 <Dio_Configure_Channel+0x12>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	69 f1       	breq	.+90     	; 0x13c <Dio_Configure_Channel+0x66>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	79 f0       	breq	.+30     	; 0x104 <Dio_Configure_Channel+0x2e>
  e6:	08 95       	ret
	{
	case DIO_PORTA:
			if (direction == DIO_INPUT)
  e8:	44 23       	and	r20, r20
  ea:	b1 f5       	brne	.+108    	; 0x158 <Dio_Configure_Channel+0x82>
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <Dio_Configure_Channel+0x22>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <Dio_Configure_Channel+0x1e>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8a bb       	out	0x1a, r24	; 26
 102:	08 95       	ret
					SET_BIT(DIO_DDRC_REG,pin);
				}
			break;

	case DIO_PORTD:
				if (direction == DIO_INPUT)
 104:	44 23       	and	r20, r20
 106:	09 f4       	brne	.+2      	; 0x10a <Dio_Configure_Channel+0x34>
 108:	48 c0       	rjmp	.+144    	; 0x19a <Dio_Configure_Channel+0xc4>
				{
					CLEAR_BIT(DIO_DDRD_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRD_REG,pin);
 10a:	21 b3       	in	r18, 0x11	; 17
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <Dio_Configure_Channel+0x40>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <Dio_Configure_Channel+0x3c>
 11a:	28 2b       	or	r18, r24
 11c:	21 bb       	out	0x11, r18	; 17
 11e:	08 95       	ret
				SET_BIT(DIO_DDRA_REG,pin);
			}
		break;

	case DIO_PORTB:
				if (direction == DIO_INPUT)
 120:	44 23       	and	r20, r20
 122:	81 f5       	brne	.+96     	; 0x184 <Dio_Configure_Channel+0xae>
				{
					CLEAR_BIT(DIO_DDRB_REG,pin);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <Dio_Configure_Channel+0x5a>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <Dio_Configure_Channel+0x56>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	87 bb       	out	0x17, r24	; 23
 13a:	08 95       	ret
					SET_BIT(DIO_DDRB_REG,pin);
				}
			break;

	case DIO_PORTC:
				if (direction == DIO_INPUT)
 13c:	44 23       	and	r20, r20
 13e:	b9 f4       	brne	.+46     	; 0x16e <Dio_Configure_Channel+0x98>
				{
					CLEAR_BIT(DIO_DDRC_REG,pin);
 140:	24 b3       	in	r18, 0x14	; 20
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <Dio_Configure_Channel+0x76>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <Dio_Configure_Channel+0x72>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	84 bb       	out	0x14, r24	; 20
 156:	08 95       	ret
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
			}
			else
			{
				SET_BIT(DIO_DDRA_REG,pin);
 158:	2a b3       	in	r18, 0x1a	; 26
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <Dio_Configure_Channel+0x8e>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <Dio_Configure_Channel+0x8a>
 168:	28 2b       	or	r18, r24
 16a:	2a bb       	out	0x1a, r18	; 26
 16c:	08 95       	ret
				{
					CLEAR_BIT(DIO_DDRC_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRC_REG,pin);
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <Dio_Configure_Channel+0xa4>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <Dio_Configure_Channel+0xa0>
 17e:	28 2b       	or	r18, r24
 180:	24 bb       	out	0x14, r18	; 20
 182:	08 95       	ret
				{
					CLEAR_BIT(DIO_DDRB_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRB_REG,pin);
 184:	27 b3       	in	r18, 0x17	; 23
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <Dio_Configure_Channel+0xba>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <Dio_Configure_Channel+0xb6>
 194:	28 2b       	or	r18, r24
 196:	27 bb       	out	0x17, r18	; 23
 198:	08 95       	ret
			break;

	case DIO_PORTD:
				if (direction == DIO_INPUT)
				{
					CLEAR_BIT(DIO_DDRD_REG,pin);
 19a:	21 b3       	in	r18, 0x11	; 17
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <Dio_Configure_Channel+0xd0>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <Dio_Configure_Channel+0xcc>
 1aa:	80 95       	com	r24
 1ac:	82 23       	and	r24, r18
 1ae:	81 bb       	out	0x11, r24	; 17
 1b0:	08 95       	ret

000001b2 <Dio_Write_Channel>:
	}
}

void Dio_Write_Channel(dio_port_t port, dio_pin_t pin , dio_level_t level)
{
	switch (port)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	29 f1       	breq	.+74     	; 0x200 <Dio_Write_Channel+0x4e>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	28 f0       	brcs	.+10     	; 0x1c4 <Dio_Write_Channel+0x12>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	79 f1       	breq	.+94     	; 0x21c <Dio_Write_Channel+0x6a>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	81 f0       	breq	.+32     	; 0x1e2 <Dio_Write_Channel+0x30>
 1c2:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	09 f4       	brne	.+2      	; 0x1ca <Dio_Write_Channel+0x18>
 1c8:	4d c0       	rjmp	.+154    	; 0x264 <Dio_Write_Channel+0xb2>
		{
			SET_BIT(DIO_PORTA_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
 1ca:	2b b3       	in	r18, 0x1b	; 27
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <Dio_Write_Channel+0x24>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <Dio_Write_Channel+0x20>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	8b bb       	out	0x1b, r24	; 27
 1e0:	08 95       	ret
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <Dio_Write_Channel+0x36>
 1e6:	49 c0       	rjmp	.+146    	; 0x27a <Dio_Write_Channel+0xc8>
		{
			SET_BIT(DIO_PORTD_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
 1e8:	22 b3       	in	r18, 0x12	; 18
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <Dio_Write_Channel+0x42>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <Dio_Write_Channel+0x3e>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	82 bb       	out	0x12, r24	; 18
 1fe:	08 95       	ret
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
 200:	41 30       	cpi	r20, 0x01	; 1
 202:	29 f1       	breq	.+74     	; 0x24e <Dio_Write_Channel+0x9c>
		{
			SET_BIT(DIO_PORTB_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
 204:	28 b3       	in	r18, 0x18	; 24
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <Dio_Write_Channel+0x5e>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <Dio_Write_Channel+0x5a>
 214:	80 95       	com	r24
 216:	82 23       	and	r24, r18
 218:	88 bb       	out	0x18, r24	; 24
 21a:	08 95       	ret
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	61 f0       	breq	.+24     	; 0x238 <Dio_Write_Channel+0x86>
		{
			SET_BIT(DIO_PORTC_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
 220:	25 b3       	in	r18, 0x15	; 21
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <Dio_Write_Channel+0x7a>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <Dio_Write_Channel+0x76>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	85 bb       	out	0x15, r24	; 21
 236:	08 95       	ret
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTC_REG,pin);
 238:	25 b3       	in	r18, 0x15	; 21
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <Dio_Write_Channel+0x92>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <Dio_Write_Channel+0x8e>
 248:	28 2b       	or	r18, r24
 24a:	25 bb       	out	0x15, r18	; 21
 24c:	08 95       	ret
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTB_REG,pin);
 24e:	28 b3       	in	r18, 0x18	; 24
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <Dio_Write_Channel+0xa8>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <Dio_Write_Channel+0xa4>
 25e:	28 2b       	or	r18, r24
 260:	28 bb       	out	0x18, r18	; 24
 262:	08 95       	ret
	switch (port)
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTA_REG,pin);
 264:	2b b3       	in	r18, 0x1b	; 27
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <Dio_Write_Channel+0xbe>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <Dio_Write_Channel+0xba>
 274:	28 2b       	or	r18, r24
 276:	2b bb       	out	0x1b, r18	; 27
 278:	08 95       	ret
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTD_REG,pin);
 27a:	22 b3       	in	r18, 0x12	; 18
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <Dio_Write_Channel+0xd4>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <Dio_Write_Channel+0xd0>
 28a:	28 2b       	or	r18, r24
 28c:	22 bb       	out	0x12, r18	; 18
 28e:	08 95       	ret

00000290 <Dio_Flip_Channel>:
	}
}

void Dio_Flip_Channel(dio_port_t port, dio_pin_t pin)
{
	switch(port)
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	e9 f0       	breq	.+58     	; 0x2ce <Dio_Flip_Channel+0x3e>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	28 f0       	brcs	.+10     	; 0x2a2 <Dio_Flip_Channel+0x12>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	21 f1       	breq	.+72     	; 0x2e4 <Dio_Flip_Channel+0x54>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	61 f0       	breq	.+24     	; 0x2b8 <Dio_Flip_Channel+0x28>
 2a0:	08 95       	ret
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
 2a2:	2b b3       	in	r18, 0x1b	; 27
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Dio_Flip_Channel+0x1e>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <Dio_Flip_Channel+0x1a>
 2b2:	28 27       	eor	r18, r24
 2b4:	2b bb       	out	0x1b, r18	; 27
 2b6:	08 95       	ret
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
		break;

	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
 2b8:	22 b3       	in	r18, 0x12	; 18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <Dio_Flip_Channel+0x34>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <Dio_Flip_Channel+0x30>
 2c8:	28 27       	eor	r18, r24
 2ca:	22 bb       	out	0x12, r18	; 18
 2cc:	08 95       	ret
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
		break;

	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
 2ce:	28 b3       	in	r18, 0x18	; 24
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <Dio_Flip_Channel+0x4a>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <Dio_Flip_Channel+0x46>
 2de:	28 27       	eor	r18, r24
 2e0:	28 bb       	out	0x18, r18	; 24
 2e2:	08 95       	ret
		break;

	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
 2e4:	25 b3       	in	r18, 0x15	; 21
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <Dio_Flip_Channel+0x60>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <Dio_Flip_Channel+0x5c>
 2f4:	28 27       	eor	r18, r24
 2f6:	25 bb       	out	0x15, r18	; 21
 2f8:	08 95       	ret

000002fa <Dio_Read_Channel>:

dio_level_t Dio_Read_Channel(dio_port_t port, dio_pin_t pin)
{
	dio_level_t loc_result = DIO_LOW;

	switch (port)
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	d1 f0       	breq	.+52     	; 0x332 <Dio_Read_Channel+0x38>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	30 f0       	brcs	.+12     	; 0x30e <Dio_Read_Channel+0x14>
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	f9 f0       	breq	.+62     	; 0x344 <Dio_Read_Channel+0x4a>
 306:	83 30       	cpi	r24, 0x03	; 3
 308:	59 f0       	breq	.+22     	; 0x320 <Dio_Read_Channel+0x26>
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret
	{
	case DIO_PORTA:
		loc_result=CHECK_BIT(DIO_PINA_REG,pin);
 30e:	89 b3       	in	r24, 0x19	; 25
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <Dio_Read_Channel+0x1e>
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <Dio_Read_Channel+0x1a>
 31c:	81 70       	andi	r24, 0x01	; 1
 31e:	08 95       	ret
			loc_result = DIO_LOW;
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
 320:	80 b3       	in	r24, 0x10	; 16
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <Dio_Read_Channel+0x30>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <Dio_Read_Channel+0x2c>
 32e:	81 70       	andi	r24, 0x01	; 1
			loc_result = DIO_LOW;
		}
		break;
	}
	return loc_result;
}
 330:	08 95       	ret
//			loc_result = DIO_LOW;
//		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
 332:	86 b3       	in	r24, 0x16	; 22
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <Dio_Read_Channel+0x42>
 338:	95 95       	asr	r25
 33a:	87 95       	ror	r24
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <Dio_Read_Channel+0x3e>
 340:	81 70       	andi	r24, 0x01	; 1
 342:	08 95       	ret
			loc_result = DIO_LOW;
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
 344:	83 b3       	in	r24, 0x13	; 19
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <Dio_Read_Channel+0x54>
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <Dio_Read_Channel+0x50>
 352:	81 70       	andi	r24, 0x01	; 1
 354:	08 95       	ret

00000356 <Dio_Write_Channel_Group>:



void Dio_Write_Channel_Group(dio_port_t port,u8 mask,u8 data)
{
	switch (port)
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	a9 f0       	breq	.+42     	; 0x384 <Dio_Write_Channel_Group+0x2e>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	28 f0       	brcs	.+10     	; 0x368 <Dio_Write_Channel_Group+0x12>
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	c1 f0       	breq	.+48     	; 0x392 <Dio_Write_Channel_Group+0x3c>
 362:	83 30       	cpi	r24, 0x03	; 3
 364:	41 f0       	breq	.+16     	; 0x376 <Dio_Write_Channel_Group+0x20>
 366:	08 95       	ret
	{
		case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data&mask);
 368:	8b b3       	in	r24, 0x1b	; 27
 36a:	46 23       	and	r20, r22
 36c:	60 95       	com	r22
 36e:	86 23       	and	r24, r22
 370:	84 2b       	or	r24, r20
 372:	8b bb       	out	0x1b, r24	; 27
 374:	08 95       	ret
		case DIO_PORTC:
			DIO_PORTC_REG = (DIO_PORTC_REG&~mask)|(data&mask);
		break;

		case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG&~mask)|(data&mask);
 376:	82 b3       	in	r24, 0x12	; 18
 378:	46 23       	and	r20, r22
 37a:	60 95       	com	r22
 37c:	86 23       	and	r24, r22
 37e:	84 2b       	or	r24, r20
 380:	82 bb       	out	0x12, r24	; 18
 382:	08 95       	ret
		case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data&mask);
		break;

		case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG&~mask)|(data&mask);
 384:	88 b3       	in	r24, 0x18	; 24
 386:	46 23       	and	r20, r22
 388:	60 95       	com	r22
 38a:	86 23       	and	r24, r22
 38c:	84 2b       	or	r24, r20
 38e:	88 bb       	out	0x18, r24	; 24
 390:	08 95       	ret
		break;

		case DIO_PORTC:
			DIO_PORTC_REG = (DIO_PORTC_REG&~mask)|(data&mask);
 392:	85 b3       	in	r24, 0x15	; 21
 394:	46 23       	and	r20, r22
 396:	60 95       	com	r22
 398:	86 23       	and	r24, r22
 39a:	84 2b       	or	r24, r20
 39c:	85 bb       	out	0x15, r24	; 21
 39e:	08 95       	ret

000003a0 <Lcd_Goto_Row_Column>:
	}
}
void Lcd_Goto_Row_Column(u8 row, u8 column)
{

}
 3a0:	08 95       	ret

000003a2 <Lcd_Pulse>:
 * E	PB3
 * */

static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	63 e0       	ldi	r22, 0x03	; 3
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3ac:	85 e0       	ldi	r24, 0x05	; 5
 3ae:	8a 95       	dec	r24
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <Lcd_Pulse+0xc>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	63 e0       	ldi	r22, 0x03	; 3
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
}
 3bc:	08 95       	ret

000003be <Lcd_Display_Chr>:

}


void Lcd_Display_Chr(u8 chr)
{
 3be:	1f 93       	push	r17
 3c0:	18 2f       	mov	r17, r24
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	60 ef       	ldi	r22, 0xF0	; 240
 3d0:	41 2f       	mov	r20, r17
 3d2:	0e 94 ab 01 	call	0x356	; 0x356 <Dio_Write_Channel_Group>
	/*	Enable pulse	*/
	Lcd_Pulse();
 3d6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Lcd_Pulse>

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
 3da:	12 95       	swap	r17
 3dc:	10 7f       	andi	r17, 0xF0	; 240
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	60 ef       	ldi	r22, 0xF0	; 240
 3e2:	41 2f       	mov	r20, r17
 3e4:	0e 94 ab 01 	call	0x356	; 0x356 <Dio_Write_Channel_Group>
	/*	Enable pulse	*/
	Lcd_Pulse();
 3e8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Lcd_Pulse>


void Lcd_Display_Chr(u8 chr)
{
	Lcd_Data(chr);
}
 3ec:	1f 91       	pop	r17
 3ee:	08 95       	ret

000003f0 <Lcd_Display_str>:
void Lcd_Display_str(u8 str[])
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	ec 01       	movw	r28, r24
	while(*str != '\0')
 3f6:	88 81       	ld	r24, Y
 3f8:	88 23       	and	r24, r24
 3fa:	31 f0       	breq	.+12     	; 0x408 <Lcd_Display_str+0x18>
	{
		Lcd_Display_Chr(*str);
 3fc:	0e 94 df 01 	call	0x3be	; 0x3be <Lcd_Display_Chr>
		str++;
 400:	21 96       	adiw	r28, 0x01	; 1
{
	Lcd_Data(chr);
}
void Lcd_Display_str(u8 str[])
{
	while(*str != '\0')
 402:	88 81       	ld	r24, Y
 404:	88 23       	and	r24, r24
 406:	d1 f7       	brne	.-12     	; 0x3fc <Lcd_Display_str+0xc>
	{
		Lcd_Display_Chr(*str);
		str++;
	}
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <Lcd_Init>:
	Lcd_Pulse();
}
void Lcd_Init(void)
{
	/*	Configure LCD Control Lines as Output	*/
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	62 e0       	ldi	r22, 0x02	; 2
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>

	/*	Configure LCD Data Lines as Output		*/
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	64 e0       	ldi	r22, 0x04	; 4
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	65 e0       	ldi	r22, 0x05	; 5
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	66 e0       	ldi	r22, 0x06	; 6
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	67 e0       	ldi	r22, 0x07	; 7
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>

	/*	Set LCD For Write Mode	*/
	Dio_Write_Channel(DIO_PORTB, DIO_PIN2, DIO_LOW);
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	62 e0       	ldi	r22, 0x02	; 2
 458:	40 e0       	ldi	r20, 0x00	; 0
 45a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>

}
 45e:	08 95       	ret

00000460 <Led_Toggle>:
	}
}

void Led_Toggle(led_id_t led)
{
	switch (led)
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	79 f0       	breq	.+30     	; 0x482 <Led_Toggle+0x22>
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	28 f4       	brcc	.+10     	; 0x472 <Led_Toggle+0x12>
	{
	case LED0:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN2);
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	0e 94 48 01 	call	0x290	; 0x290 <Dio_Flip_Channel>
 470:	08 95       	ret
	}
}

void Led_Toggle(led_id_t led)
{
	switch (led)
 472:	82 30       	cpi	r24, 0x02	; 2
 474:	09 f0       	breq	.+2      	; 0x478 <Led_Toggle+0x18>
 476:	08 95       	ret
	case LED1:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN7);
		break;

	case LED2:
		Dio_Flip_Channel(DIO_PORTD, DIO_PIN3);
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	63 e0       	ldi	r22, 0x03	; 3
 47c:	0e 94 48 01 	call	0x290	; 0x290 <Dio_Flip_Channel>
 480:	08 95       	ret
	case LED0:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN2);
		break;

	case LED1:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN7);
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	67 e0       	ldi	r22, 0x07	; 7
 486:	0e 94 48 01 	call	0x290	; 0x290 <Dio_Flip_Channel>
 48a:	08 95       	ret

0000048c <Led_OFF>:
	}
}

void Led_OFF(led_id_t led)
{
	switch (led)
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	89 f0       	breq	.+34     	; 0x4b2 <Led_OFF+0x26>
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	30 f4       	brcc	.+12     	; 0x4a0 <Led_OFF+0x14>
	{
	case LED0:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN2, DIO_LOW);
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	62 e0       	ldi	r22, 0x02	; 2
 498:	40 e0       	ldi	r20, 0x00	; 0
 49a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
 49e:	08 95       	ret
	}
}

void Led_OFF(led_id_t led)
{
	switch (led)
 4a0:	82 30       	cpi	r24, 0x02	; 2
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <Led_OFF+0x1a>
 4a4:	08 95       	ret
	case LED1:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN7, DIO_LOW);
		break;

	case LED2:
		Dio_Write_Channel(DIO_PORTD, DIO_PIN3, DIO_LOW);
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	63 e0       	ldi	r22, 0x03	; 3
 4aa:	40 e0       	ldi	r20, 0x00	; 0
 4ac:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
 4b0:	08 95       	ret
	case LED0:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN2, DIO_LOW);
		break;

	case LED1:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN7, DIO_LOW);
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	67 e0       	ldi	r22, 0x07	; 7
 4b6:	40 e0       	ldi	r20, 0x00	; 0
 4b8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
 4bc:	08 95       	ret

000004be <Led_ON>:
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
}

void Led_ON(led_id_t led)
{
	switch (led)
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	89 f0       	breq	.+34     	; 0x4e4 <Led_ON+0x26>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	30 f4       	brcc	.+12     	; 0x4d2 <Led_ON+0x14>
	case LED0:

#if(LED0_CONECTION == SOURCE)
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_HIGH);
#else
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	62 e0       	ldi	r22, 0x02	; 2
 4ca:	40 e0       	ldi	r20, 0x00	; 0
 4cc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
 4d0:	08 95       	ret
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
}

void Led_ON(led_id_t led)
{
	switch (led)
 4d2:	82 30       	cpi	r24, 0x02	; 2
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <Led_ON+0x1a>
 4d6:	08 95       	ret

	case LED1:
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
		break;
	case LED2:
		Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_HIGH);
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	63 e0       	ldi	r22, 0x03	; 3
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
 4e2:	08 95       	ret
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
#endif
		break;

	case LED1:
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	67 e0       	ldi	r22, 0x07	; 7
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
 4ee:	08 95       	ret

000004f0 <Led_Init>:

#include "Led_Interface.h"

void Led_Init(void)
{
	Dio_Configure_Channel(LED0_PORT, LED0_PIN, DIO_OUTPUT);
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	62 e0       	ldi	r22, 0x02	; 2
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>
	Dio_Configure_Channel(LED1_PORT, LED1_PIN, DIO_OUTPUT);
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	67 e0       	ldi	r22, 0x07	; 7
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>
	Dio_Configure_Channel(LED2_PORT, LED2_PIN, DIO_OUTPUT);
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	63 e0       	ldi	r22, 0x03	; 3
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	0e 94 6b 00 	call	0xd6	; 0xd6 <Dio_Configure_Channel>

	Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
	Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_LOW);
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	67 e0       	ldi	r22, 0x07	; 7
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
 522:	83 e0       	ldi	r24, 0x03	; 3
 524:	63 e0       	ldi	r22, 0x03	; 3
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Dio_Write_Channel>
}
 52c:	08 95       	ret

0000052e <main>:
#include "Std_Types.h"
#include "Led_Interface.h"


int main ()
{
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 Led_Init();
 532:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Led_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 536:	c0 e9       	ldi	r28, 0x90	; 144
 538:	d1 e0       	ldi	r29, 0x01	; 1

	while (1)
	{
		Led_ON(LED0);
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	0e 94 5f 02 	call	0x4be	; 0x4be <Led_ON>
 540:	28 e8       	ldi	r18, 0x88	; 136
 542:	33 e1       	ldi	r19, 0x13	; 19
 544:	ce 01       	movw	r24, r28
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <main+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 54a:	21 50       	subi	r18, 0x01	; 1
 54c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 54e:	d1 f7       	brne	.-12     	; 0x544 <main+0x16>
		_delay_ms(500);
		Led_OFF(LED0);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 46 02 	call	0x48c	; 0x48c <Led_OFF>
 556:	28 e8       	ldi	r18, 0x88	; 136
 558:	33 e1       	ldi	r19, 0x13	; 19
 55a:	ce 01       	movw	r24, r28
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <main+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 560:	21 50       	subi	r18, 0x01	; 1
 562:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 564:	d1 f7       	brne	.-12     	; 0x55a <main+0x2c>
 566:	e9 cf       	rjmp	.-46     	; 0x53a <main+0xc>

00000568 <_exit>:
 568:	f8 94       	cli

0000056a <__stop_program>:
 56a:	ff cf       	rjmp	.-2      	; 0x56a <__stop_program>
