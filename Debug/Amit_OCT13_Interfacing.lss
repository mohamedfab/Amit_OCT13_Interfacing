
Amit_OCT13_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  000019ee  00001a62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003804  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000015d6  00000000  00000000  000052c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 41 00 	call	0x82	; 0x82 <main>
      7a:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "Keypad_Interface.h"
#include "Adc_Interface.h"


int main ()
{
      82:	af 92       	push	r10
      84:	bf 92       	push	r11
      86:	cf 92       	push	r12
      88:	df 92       	push	r13
      8a:	ef 92       	push	r14
      8c:	ff 92       	push	r15
      8e:	0f 93       	push	r16
      90:	1f 93       	push	r17
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <main+0x16>
      98:	00 d0       	rcall	.+0      	; 0x9a <main+0x18>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
	u8 arr[4];
	ADC_vidInit();
      9e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <ADC_vidInit>
	Lcd_Init();
      a2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <Lcd_Init>
	Lcd_Cmd(_LCD_CURSOR_OFF);
      a6:	8c e0       	ldi	r24, 0x0C	; 12
      a8:	0e 94 67 03 	call	0x6ce	; 0x6ce <Lcd_Cmd>
	 Lcd_Display_str("Result= ");
      ac:	80 e6       	ldi	r24, 0x60	; 96
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <Lcd_Display_str>
      b4:	6e 01       	movw	r12, r28
      b6:	08 94       	sec
      b8:	c1 1c       	adc	r12, r1
      ba:	d1 1c       	adc	r13, r1
      bc:	9e e6       	ldi	r25, 0x6E	; 110
      be:	a9 2e       	mov	r10, r25
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	b9 2e       	mov	r11, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c4:	80 e9       	ldi	r24, 0x90	; 144
      c6:	e8 2e       	mov	r14, r24
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	f8 2e       	mov	r15, r24
	while (1)
	{
	 result = ADC_vidRead(ADC_CHNL1);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	0e 94 66 08 	call	0x10cc	; 0x10cc <ADC_vidRead>
      d2:	8c 01       	movw	r16, r24
	 Lcd_Goto_Row_Column(0, 8);
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	68 e0       	ldi	r22, 0x08	; 8
      d8:	0e 94 31 04 	call	0x862	; 0x862 <Lcd_Goto_Row_Column>
	 Lcd_Display_str("    ");
      dc:	89 e6       	ldi	r24, 0x69	; 105
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <Lcd_Display_str>
	 Lcd_Goto_Row_Column(0, 8);
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	68 e0       	ldi	r22, 0x08	; 8
      e8:	0e 94 31 04 	call	0x862	; 0x862 <Lcd_Goto_Row_Column>
	 sprintf(arr,"%d",result);
      ec:	00 d0       	rcall	.+0      	; 0xee <main+0x6c>
      ee:	00 d0       	rcall	.+0      	; 0xf0 <main+0x6e>
      f0:	00 d0       	rcall	.+0      	; 0xf2 <main+0x70>
      f2:	ed b7       	in	r30, 0x3d	; 61
      f4:	fe b7       	in	r31, 0x3e	; 62
      f6:	31 96       	adiw	r30, 0x01	; 1
      f8:	ad b7       	in	r26, 0x3d	; 61
      fa:	be b7       	in	r27, 0x3e	; 62
      fc:	12 96       	adiw	r26, 0x02	; 2
      fe:	dc 92       	st	X, r13
     100:	ce 92       	st	-X, r12
     102:	11 97       	sbiw	r26, 0x01	; 1
     104:	b3 82       	std	Z+3, r11	; 0x03
     106:	a2 82       	std	Z+2, r10	; 0x02
     108:	15 83       	std	Z+5, r17	; 0x05
     10a:	04 83       	std	Z+4, r16	; 0x04
     10c:	0e 94 1d 0a 	call	0x143a	; 0x143a <sprintf>
	 Lcd_Display_str(arr);
     110:	8d b7       	in	r24, 0x3d	; 61
     112:	9e b7       	in	r25, 0x3e	; 62
     114:	06 96       	adiw	r24, 0x06	; 6
     116:	0f b6       	in	r0, 0x3f	; 63
     118:	f8 94       	cli
     11a:	9e bf       	out	0x3e, r25	; 62
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	8d bf       	out	0x3d, r24	; 61
     120:	c6 01       	movw	r24, r12
     122:	0e 94 e5 03 	call	0x7ca	; 0x7ca <Lcd_Display_str>
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	c7 01       	movw	r24, r14
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <main+0xaa>
     130:	2f 5f       	subi	r18, 0xFF	; 255
     132:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     134:	93 e1       	ldi	r25, 0x13	; 19
     136:	28 38       	cpi	r18, 0x88	; 136
     138:	39 07       	cpc	r19, r25
     13a:	b9 f7       	brne	.-18     	; 0x12a <main+0xa8>
     13c:	c7 cf       	rjmp	.-114    	; 0xcc <main+0x4a>

0000013e <Keypad_Init>:
}

void Keypad_Init(void)
{
	/*	Configure Rows Pins as Input	*/
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN0, DIO_INPUT);
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN1, DIO_INPUT);
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	61 e0       	ldi	r22, 0x01	; 1
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN2, DIO_INPUT);
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	62 e0       	ldi	r22, 0x02	; 2
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN3, DIO_INPUT);
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	63 e0       	ldi	r22, 0x03	; 3
     160:	40 e0       	ldi	r20, 0x00	; 0
     162:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>

	/*	Enable Pull Up Resistor For Rows Channels	*/
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN0);
     166:	82 e0       	ldi	r24, 0x02	; 2
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Dio_PullUp_Enable>
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN1);
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Dio_PullUp_Enable>
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN2);
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	62 e0       	ldi	r22, 0x02	; 2
     17a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Dio_PullUp_Enable>
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN3);
     17e:	82 e0       	ldi	r24, 0x02	; 2
     180:	63 e0       	ldi	r22, 0x03	; 3
     182:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Dio_PullUp_Enable>

	/*	Configure Columns Pins as Output	*/
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	64 e0       	ldi	r22, 0x04	; 4
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);
     190:	82 e0       	ldi	r24, 0x02	; 2
     192:	65 e0       	ldi	r22, 0x05	; 5
     194:	41 e0       	ldi	r20, 0x01	; 1
     196:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);
     19a:	82 e0       	ldi	r24, 0x02	; 2
     19c:	66 e0       	ldi	r22, 0x06	; 6
     19e:	41 e0       	ldi	r20, 0x01	; 1
     1a0:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	67 e0       	ldi	r22, 0x07	; 7
     1a8:	41 e0       	ldi	r20, 0x01	; 1
     1aa:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>

	/*	Initialize all Columns Outputs with zeros	*/
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_LOW);
     1ae:	82 e0       	ldi	r24, 0x02	; 2
     1b0:	64 e0       	ldi	r22, 0x04	; 4
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_LOW);
     1b8:	82 e0       	ldi	r24, 0x02	; 2
     1ba:	65 e0       	ldi	r22, 0x05	; 5
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_LOW);
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	66 e0       	ldi	r22, 0x06	; 6
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_LOW);
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	67 e0       	ldi	r22, 0x07	; 7
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
}
     1d6:	08 95       	ret

000001d8 <Keypad_Read>:



u8 Keypad_Read(void)
{
     1d8:	1f 93       	push	r17
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
}

void Keypad_Init(void)
{
	/*	Configure Rows Pins as Input	*/
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN0, DIO_INPUT);
     1de:	82 e0       	ldi	r24, 0x02	; 2
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN1, DIO_INPUT);
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	61 e0       	ldi	r22, 0x01	; 1
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN2, DIO_INPUT);
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	62 e0       	ldi	r22, 0x02	; 2
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN3, DIO_INPUT);
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	63 e0       	ldi	r22, 0x03	; 3
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>

	/*	Enable Pull Up Resistor For Rows Channels	*/
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN0);
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Dio_PullUp_Enable>
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN1);
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	61 e0       	ldi	r22, 0x01	; 1
     212:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Dio_PullUp_Enable>
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN2);
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	62 e0       	ldi	r22, 0x02	; 2
     21a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Dio_PullUp_Enable>
	Dio_PullUp_Enable(DIO_PORTC, DIO_PIN3);
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	63 e0       	ldi	r22, 0x03	; 3
     222:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Dio_PullUp_Enable>

	/*	Configure Columns Pins as Output	*/
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	64 e0       	ldi	r22, 0x04	; 4
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	65 e0       	ldi	r22, 0x05	; 5
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	66 e0       	ldi	r22, 0x06	; 6
     23e:	41 e0       	ldi	r20, 0x01	; 1
     240:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
     244:	82 e0       	ldi	r24, 0x02	; 2
     246:	67 e0       	ldi	r22, 0x07	; 7
     248:	41 e0       	ldi	r20, 0x01	; 1
     24a:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>

	/*	Initialize all Columns Outputs with zeros	*/
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_LOW);
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	64 e0       	ldi	r22, 0x04	; 4
     252:	40 e0       	ldi	r20, 0x00	; 0
     254:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_LOW);
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	65 e0       	ldi	r22, 0x05	; 5
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_LOW);
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	66 e0       	ldi	r22, 0x06	; 6
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_LOW);
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	67 e0       	ldi	r22, 0x07	; 7
     270:	40 e0       	ldi	r20, 0x00	; 0
     272:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
};


static boolean Keypad_Is_Pressed(void)
{
	if (
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     27e:	88 23       	and	r24, r24
     280:	09 f0       	breq	.+2      	; 0x284 <Keypad_Read+0xac>
     282:	85 c0       	rjmp	.+266    	; 0x38e <Keypad_Read+0x1b6>

static s8 Keypad_Get_Row(void)
{
	s8 loc_Row = -1;

	if (Dio_Read_Channel(DIO_PORTC,DIO_PIN0) == DIO_LOW)
     284:	82 e0       	ldi	r24, 0x02	; 2
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     28c:	88 23       	and	r24, r24
     28e:	09 f0       	breq	.+2      	; 0x292 <Keypad_Read+0xba>
     290:	95 c0       	rjmp	.+298    	; 0x3bc <Keypad_Read+0x1e4>
     292:	10 e0       	ldi	r17, 0x00	; 0
     294:	c0 e0       	ldi	r28, 0x00	; 0
     296:	d0 e0       	ldi	r29, 0x00	; 0
}

static s8 Keypad_Get_Column(s8 current_row)
{
	s8 Loc_Column = -1;
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_LOW);
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	64 e0       	ldi	r22, 0x04	; 4
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	65 e0       	ldi	r22, 0x05	; 5
     2a6:	41 e0       	ldi	r20, 0x01	; 1
     2a8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	66 e0       	ldi	r22, 0x06	; 6
     2b0:	41 e0       	ldi	r20, 0x01	; 1
     2b2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	67 e0       	ldi	r22, 0x07	; 7
     2ba:	41 e0       	ldi	r20, 0x01	; 1
     2bc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>

static s8 Keypad_Get_Row(void)
{
	s8 loc_Row = -1;

	if (Dio_Read_Channel(DIO_PORTC,DIO_PIN0) == DIO_LOW)
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     2c8:	88 23       	and	r24, r24
     2ca:	09 f0       	breq	.+2      	; 0x2ce <Keypad_Read+0xf6>
     2cc:	81 c0       	rjmp	.+258    	; 0x3d0 <Keypad_Read+0x1f8>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_LOW);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);

	if (Keypad_Get_Row() == current_row)
     2ce:	18 17       	cp	r17, r24
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <Keypad_Read+0xfc>
     2d2:	86 c0       	rjmp	.+268    	; 0x3e0 <Keypad_Read+0x208>
	{
		Loc_Column = 0;
		return Loc_Column;
	}

	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	64 e0       	ldi	r22, 0x04	; 4
     2d8:	41 e0       	ldi	r20, 0x01	; 1
     2da:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_LOW);
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	65 e0       	ldi	r22, 0x05	; 5
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	66 e0       	ldi	r22, 0x06	; 6
     2ec:	41 e0       	ldi	r20, 0x01	; 1
     2ee:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);
     2f2:	82 e0       	ldi	r24, 0x02	; 2
     2f4:	67 e0       	ldi	r22, 0x07	; 7
     2f6:	41 e0       	ldi	r20, 0x01	; 1
     2f8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>

static s8 Keypad_Get_Row(void)
{
	s8 loc_Row = -1;

	if (Dio_Read_Channel(DIO_PORTC,DIO_PIN0) == DIO_LOW)
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     304:	88 23       	and	r24, r24
     306:	09 f0       	breq	.+2      	; 0x30a <Keypad_Read+0x132>
     308:	98 c0       	rjmp	.+304    	; 0x43a <Keypad_Read+0x262>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_LOW);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);

	if (Keypad_Get_Row() == current_row)
     30a:	18 17       	cp	r17, r24
     30c:	09 f4       	brne	.+2      	; 0x310 <Keypad_Read+0x138>
     30e:	9d c0       	rjmp	.+314    	; 0x44a <Keypad_Read+0x272>
	{
		Loc_Column = 1;
		return Loc_Column;
	}

	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
     310:	82 e0       	ldi	r24, 0x02	; 2
     312:	64 e0       	ldi	r22, 0x04	; 4
     314:	41 e0       	ldi	r20, 0x01	; 1
     316:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	65 e0       	ldi	r22, 0x05	; 5
     31e:	41 e0       	ldi	r20, 0x01	; 1
     320:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_LOW);
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	66 e0       	ldi	r22, 0x06	; 6
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	67 e0       	ldi	r22, 0x07	; 7
     332:	41 e0       	ldi	r20, 0x01	; 1
     334:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>

static s8 Keypad_Get_Row(void)
{
	s8 loc_Row = -1;

	if (Dio_Read_Channel(DIO_PORTC,DIO_PIN0) == DIO_LOW)
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     340:	88 23       	and	r24, r24
     342:	09 f0       	breq	.+2      	; 0x346 <Keypad_Read+0x16e>
     344:	6f c0       	rjmp	.+222    	; 0x424 <Keypad_Read+0x24c>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_LOW);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);

	if (Keypad_Get_Row() == current_row)
     346:	18 17       	cp	r17, r24
     348:	09 f4       	brne	.+2      	; 0x34c <Keypad_Read+0x174>
     34a:	74 c0       	rjmp	.+232    	; 0x434 <Keypad_Read+0x25c>
	{
		Loc_Column = 2;
		return Loc_Column;
	}

	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	64 e0       	ldi	r22, 0x04	; 4
     350:	41 e0       	ldi	r20, 0x01	; 1
     352:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	65 e0       	ldi	r22, 0x05	; 5
     35a:	41 e0       	ldi	r20, 0x01	; 1
     35c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	66 e0       	ldi	r22, 0x06	; 6
     364:	41 e0       	ldi	r20, 0x01	; 1
     366:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_LOW);
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	67 e0       	ldi	r22, 0x07	; 7
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>

static s8 Keypad_Get_Row(void)
{
	s8 loc_Row = -1;

	if (Dio_Read_Channel(DIO_PORTC,DIO_PIN0) == DIO_LOW)
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     37c:	88 23       	and	r24, r24
     37e:	09 f0       	breq	.+2      	; 0x382 <Keypad_Read+0x1aa>
     380:	6f c0       	rjmp	.+222    	; 0x460 <Keypad_Read+0x288>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_LOW);

	if (Keypad_Get_Row() == current_row)
     382:	18 17       	cp	r17, r24
     384:	09 f0       	breq	.+2      	; 0x388 <Keypad_Read+0x1b0>
     386:	84 c0       	rjmp	.+264    	; 0x490 <Keypad_Read+0x2b8>
     388:	83 e0       	ldi	r24, 0x03	; 3
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	2b c0       	rjmp	.+86     	; 0x3e4 <Keypad_Read+0x20c>
};


static boolean Keypad_Is_Pressed(void)
{
	if (
     38e:	82 e0       	ldi	r24, 0x02	; 2
     390:	61 e0       	ldi	r22, 0x01	; 1
     392:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     396:	88 23       	and	r24, r24
     398:	09 f4       	brne	.+2      	; 0x39c <Keypad_Read+0x1c4>
     39a:	74 cf       	rjmp	.-280    	; 0x284 <Keypad_Read+0xac>
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     3a4:	88 23       	and	r24, r24
     3a6:	09 f4       	brne	.+2      	; 0x3aa <Keypad_Read+0x1d2>
     3a8:	6d cf       	rjmp	.-294    	; 0x284 <Keypad_Read+0xac>
     3aa:	82 e0       	ldi	r24, 0x02	; 2
     3ac:	63 e0       	ldi	r22, 0x03	; 3
     3ae:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <Keypad_Read+0x1e0>
     3b6:	66 cf       	rjmp	.-308    	; 0x284 <Keypad_Read+0xac>
     3b8:	8f ef       	ldi	r24, 0xFF	; 255
     3ba:	1d c0       	rjmp	.+58     	; 0x3f6 <Keypad_Read+0x21e>

	if (Dio_Read_Channel(DIO_PORTC,DIO_PIN0) == DIO_LOW)
	{
		loc_Row = 0;
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN1) == DIO_LOW)
     3bc:	82 e0       	ldi	r24, 0x02	; 2
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     3c4:	88 23       	and	r24, r24
     3c6:	d9 f4       	brne	.+54     	; 0x3fe <Keypad_Read+0x226>
     3c8:	11 e0       	ldi	r17, 0x01	; 1
     3ca:	c1 e0       	ldi	r28, 0x01	; 1
     3cc:	d0 e0       	ldi	r29, 0x00	; 0
     3ce:	64 cf       	rjmp	.-312    	; 0x298 <Keypad_Read+0xc0>
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     3d8:	88 23       	and	r24, r24
     3da:	e1 f4       	brne	.+56     	; 0x414 <Keypad_Read+0x23c>
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	77 cf       	rjmp	.-274    	; 0x2ce <Keypad_Read+0xf6>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_LOW);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);

	if (Keypad_Get_Row() == current_row)
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
	Keypad_Init();
	if(Keypad_Is_Pressed() == TRUE)
	{
		loc_Row = Keypad_Get_Row();
		loc_Col = Keypad_Get_Column(loc_Row);
		loc_button = Keypad_Layout[loc_Row][loc_Col];
     3e4:	cc 0f       	add	r28, r28
     3e6:	dd 1f       	adc	r29, r29
     3e8:	cc 0f       	add	r28, r28
     3ea:	dd 1f       	adc	r29, r29
     3ec:	c8 0f       	add	r28, r24
     3ee:	d9 1f       	adc	r29, r25
     3f0:	cf 58       	subi	r28, 0x8F	; 143
     3f2:	df 4f       	sbci	r29, 0xFF	; 255
     3f4:	88 81       	ld	r24, Y
	else
	{
		return 0xFF;
	}
	return loc_button;
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	08 95       	ret
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN1) == DIO_LOW)
	{
		loc_Row = 1;
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN2) == DIO_LOW)
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	62 e0       	ldi	r22, 0x02	; 2
     402:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     406:	88 23       	and	r24, r24
     408:	09 f0       	breq	.+2      	; 0x40c <Keypad_Read+0x234>
     40a:	4d c0       	rjmp	.+154    	; 0x4a6 <Keypad_Read+0x2ce>
     40c:	12 e0       	ldi	r17, 0x02	; 2
     40e:	c2 e0       	ldi	r28, 0x02	; 2
     410:	d0 e0       	ldi	r29, 0x00	; 0
     412:	42 cf       	rjmp	.-380    	; 0x298 <Keypad_Read+0xc0>
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     41c:	88 23       	and	r24, r24
     41e:	d9 f5       	brne	.+118    	; 0x496 <Keypad_Read+0x2be>
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	55 cf       	rjmp	.-342    	; 0x2ce <Keypad_Read+0xf6>

	if (Dio_Read_Channel(DIO_PORTC,DIO_PIN0) == DIO_LOW)
	{
		loc_Row = 0;
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN1) == DIO_LOW)
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     42c:	88 23       	and	r24, r24
     42e:	01 f5       	brne	.+64     	; 0x470 <Keypad_Read+0x298>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	89 cf       	rjmp	.-238    	; 0x346 <Keypad_Read+0x16e>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_LOW);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);

	if (Keypad_Get_Row() == current_row)
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	d5 cf       	rjmp	.-86     	; 0x3e4 <Keypad_Read+0x20c>

	if (Dio_Read_Channel(DIO_PORTC,DIO_PIN0) == DIO_LOW)
	{
		loc_Row = 0;
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN1) == DIO_LOW)
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     442:	88 23       	and	r24, r24
     444:	29 f4       	brne	.+10     	; 0x450 <Keypad_Read+0x278>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	60 cf       	rjmp	.-320    	; 0x30a <Keypad_Read+0x132>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_LOW);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_HIGH);

	if (Keypad_Get_Row() == current_row)
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	ca cf       	rjmp	.-108    	; 0x3e4 <Keypad_Read+0x20c>
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN1) == DIO_LOW)
	{
		loc_Row = 1;
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN2) == DIO_LOW)
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	62 e0       	ldi	r22, 0x02	; 2
     454:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     458:	88 23       	and	r24, r24
     45a:	79 f5       	brne	.+94     	; 0x4ba <Keypad_Read+0x2e2>
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	55 cf       	rjmp	.-342    	; 0x30a <Keypad_Read+0x132>

	if (Dio_Read_Channel(DIO_PORTC,DIO_PIN0) == DIO_LOW)
	{
		loc_Row = 0;
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN1) == DIO_LOW)
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     468:	88 23       	and	r24, r24
     46a:	51 f4       	brne	.+20     	; 0x480 <Keypad_Read+0x2a8>
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	89 cf       	rjmp	.-238    	; 0x382 <Keypad_Read+0x1aa>
	{
		loc_Row = 1;
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN2) == DIO_LOW)
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	62 e0       	ldi	r22, 0x02	; 2
     474:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     478:	88 23       	and	r24, r24
     47a:	39 f5       	brne	.+78     	; 0x4ca <Keypad_Read+0x2f2>
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	63 cf       	rjmp	.-314    	; 0x346 <Keypad_Read+0x16e>
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	62 e0       	ldi	r22, 0x02	; 2
     484:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     488:	88 23       	and	r24, r24
     48a:	79 f5       	brne	.+94     	; 0x4ea <Keypad_Read+0x312>
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	79 cf       	rjmp	.-270    	; 0x382 <Keypad_Read+0x1aa>
	Dio_Write_Channel(DIO_PORTC, DIO_PIN4,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN5,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN6,DIO_HIGH);
	Dio_Write_Channel(DIO_PORTC, DIO_PIN7,DIO_LOW);

	if (Keypad_Get_Row() == current_row)
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	9f ef       	ldi	r25, 0xFF	; 255
     494:	a7 cf       	rjmp	.-178    	; 0x3e4 <Keypad_Read+0x20c>
	}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN2) == DIO_LOW)
		{
			loc_Row = 2;
		}
	else if (Dio_Read_Channel(DIO_PORTC,DIO_PIN3) == DIO_LOW)
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	63 e0       	ldi	r22, 0x03	; 3
     49a:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     49e:	88 23       	and	r24, r24
     4a0:	01 f5       	brne	.+64     	; 0x4e2 <Keypad_Read+0x30a>
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	14 cf       	rjmp	.-472    	; 0x2ce <Keypad_Read+0xf6>
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	63 e0       	ldi	r22, 0x03	; 3
     4aa:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     4ae:	88 23       	and	r24, r24
     4b0:	a1 f4       	brne	.+40     	; 0x4da <Keypad_Read+0x302>
     4b2:	13 e0       	ldi	r17, 0x03	; 3
     4b4:	c3 e0       	ldi	r28, 0x03	; 3
     4b6:	d0 e0       	ldi	r29, 0x00	; 0
     4b8:	ef ce       	rjmp	.-546    	; 0x298 <Keypad_Read+0xc0>
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	63 e0       	ldi	r22, 0x03	; 3
     4be:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     4c2:	88 23       	and	r24, r24
     4c4:	81 f4       	brne	.+32     	; 0x4e6 <Keypad_Read+0x30e>
     4c6:	83 e0       	ldi	r24, 0x03	; 3
     4c8:	20 cf       	rjmp	.-448    	; 0x30a <Keypad_Read+0x132>
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	63 e0       	ldi	r22, 0x03	; 3
     4ce:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     4d2:	88 23       	and	r24, r24
     4d4:	91 f4       	brne	.+36     	; 0x4fa <Keypad_Read+0x322>
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	36 cf       	rjmp	.-404    	; 0x346 <Keypad_Read+0x16e>
     4da:	1f ef       	ldi	r17, 0xFF	; 255
     4dc:	cf ef       	ldi	r28, 0xFF	; 255
     4de:	df ef       	ldi	r29, 0xFF	; 255
     4e0:	db ce       	rjmp	.-586    	; 0x298 <Keypad_Read+0xc0>
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	f4 ce       	rjmp	.-536    	; 0x2ce <Keypad_Read+0xf6>
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	10 cf       	rjmp	.-480    	; 0x30a <Keypad_Read+0x132>
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	63 e0       	ldi	r22, 0x03	; 3
     4ee:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     4f2:	88 23       	and	r24, r24
     4f4:	21 f4       	brne	.+8      	; 0x4fe <Keypad_Read+0x326>
     4f6:	83 e0       	ldi	r24, 0x03	; 3
     4f8:	44 cf       	rjmp	.-376    	; 0x382 <Keypad_Read+0x1aa>
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	24 cf       	rjmp	.-440    	; 0x346 <Keypad_Read+0x16e>
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	40 cf       	rjmp	.-384    	; 0x382 <Keypad_Read+0x1aa>

00000502 <SSD_Display>:
	Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_LOW);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_LOW);
}

void SSD_Display(u8 num)
{
     502:	0f 93       	push	r16
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	08 2f       	mov	r16, r24
	u8 loc_SSD_First_Digit = (num%10)<<4;
	u8 loc_SSD_Second_Digit = (num/10)<<4;

	if (num <= 99)
     50a:	84 36       	cpi	r24, 0x64	; 100
     50c:	90 f5       	brcc	.+100    	; 0x572 <SSD_Display+0x70>
	{
		/*	Enable SSD1	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_HIGH);
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	41 e0       	ldi	r20, 0x01	; 1
     514:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
		/*	Disable SSD2	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_LOW);
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	62 e0       	ldi	r22, 0x02	; 2
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
		/*	Write First Digit	*/
		Dio_Write_Channel_Group(DIO_PORTA, 0xF0, loc_SSD_First_Digit);
     522:	80 2f       	mov	r24, r16
     524:	6a e0       	ldi	r22, 0x0A	; 10
     526:	0e 94 11 0a 	call	0x1422	; 0x1422 <__udivmodqi4>
     52a:	92 95       	swap	r25
     52c:	90 7f       	andi	r25, 0xF0	; 240
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	60 ef       	ldi	r22, 0xF0	; 240
     532:	49 2f       	mov	r20, r25
     534:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
     538:	c0 ea       	ldi	r28, 0xA0	; 160
     53a:	df e0       	ldi	r29, 0x0F	; 15
     53c:	ce 01       	movw	r24, r28
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <SSD_Display+0x3c>
		_delay_ms(1);

		/*	Disable SSD1	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_LOW);
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
		/*	Enable SSD2	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_HIGH);
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	62 e0       	ldi	r22, 0x02	; 2
     550:	41 e0       	ldi	r20, 0x01	; 1
     552:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
		/*	Write Second Digit	*/
		Dio_Write_Channel_Group(DIO_PORTA, 0xF0, loc_SSD_Second_Digit);
     556:	80 2f       	mov	r24, r16
     558:	6a e0       	ldi	r22, 0x0A	; 10
     55a:	0e 94 11 0a 	call	0x1422	; 0x1422 <__udivmodqi4>
     55e:	48 2f       	mov	r20, r24
     560:	42 95       	swap	r20
     562:	40 7f       	andi	r20, 0xF0	; 240
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	60 ef       	ldi	r22, 0xF0	; 240
     568:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
     56c:	ce 01       	movw	r24, r28
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <SSD_Display+0x6c>
	}
	else
	{
		/*	Do Nothing	*/
	}
}
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	0f 91       	pop	r16
     578:	08 95       	ret

0000057a <SSD_Init>:
 */
#include "SSD_Interface.h"
void SSD_Init(void)
{
	/*	Configure SSD Enable Lines as Output	*/
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	41 e0       	ldi	r20, 0x01	; 1
     580:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	62 e0       	ldi	r22, 0x02	; 2
     588:	41 e0       	ldi	r20, 0x01	; 1
     58a:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	/*	Configure SSD DP Line as Output	*/
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	63 e0       	ldi	r22, 0x03	; 3
     592:	41 e0       	ldi	r20, 0x01	; 1
     594:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	/*	Configure SSD Data Lines as Output		*/
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	64 e0       	ldi	r22, 0x04	; 4
     59c:	41 e0       	ldi	r20, 0x01	; 1
     59e:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	65 e0       	ldi	r22, 0x05	; 5
     5a6:	41 e0       	ldi	r20, 0x01	; 1
     5a8:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	66 e0       	ldi	r22, 0x06	; 6
     5b0:	41 e0       	ldi	r20, 0x01	; 1
     5b2:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	67 e0       	ldi	r22, 0x07	; 7
     5ba:	41 e0       	ldi	r20, 0x01	; 1
     5bc:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	/*	Turn OFF SSD	*/
	Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_LOW);
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_LOW);
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	62 e0       	ldi	r22, 0x02	; 2
     5ce:	40 e0       	ldi	r20, 0x00	; 0
     5d0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
}
     5d4:	08 95       	ret

000005d6 <SSD_Display_With_Delay>:
	{
		/*	Do Nothing	*/
	}
}
void SSD_Display_With_Delay(u8 num,u32 delay)
{
     5d6:	8f 92       	push	r8
     5d8:	9f 92       	push	r9
     5da:	af 92       	push	r10
     5dc:	bf 92       	push	r11
     5de:	cf 92       	push	r12
     5e0:	df 92       	push	r13
     5e2:	ef 92       	push	r14
     5e4:	ff 92       	push	r15
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	28 2f       	mov	r18, r24
     5f0:	5a 01       	movw	r10, r20
     5f2:	6b 01       	movw	r12, r22
	u32 count = 0;
	for (count =0; count<delay; count+=3)
     5f4:	41 15       	cp	r20, r1
     5f6:	51 05       	cpc	r21, r1
     5f8:	61 05       	cpc	r22, r1
     5fa:	71 05       	cpc	r23, r1
     5fc:	09 f1       	breq	.+66     	; 0x640 <SSD_Display_With_Delay+0x6a>
     5fe:	6a e0       	ldi	r22, 0x0A	; 10
     600:	0e 94 11 0a 	call	0x1422	; 0x1422 <__udivmodqi4>
     604:	89 2e       	mov	r8, r25
     606:	82 94       	swap	r8
     608:	90 ef       	ldi	r25, 0xF0	; 240
     60a:	89 22       	and	r8, r25
     60c:	82 2f       	mov	r24, r18
     60e:	0e 94 11 0a 	call	0x1422	; 0x1422 <__udivmodqi4>
     612:	98 2e       	mov	r9, r24
     614:	92 94       	swap	r9
     616:	80 ef       	ldi	r24, 0xF0	; 240
     618:	98 22       	and	r9, r24
     61a:	24 36       	cpi	r18, 0x64	; 100
     61c:	f0 f0       	brcs	.+60     	; 0x65a <SSD_Display_With_Delay+0x84>
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	a0 e0       	ldi	r26, 0x00	; 0
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	20 ea       	ldi	r18, 0xA0	; 160
     628:	3f e0       	ldi	r19, 0x0F	; 15
     62a:	f9 01       	movw	r30, r18
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <SSD_Display_With_Delay+0x56>
     630:	03 96       	adiw	r24, 0x03	; 3
     632:	a1 1d       	adc	r26, r1
     634:	b1 1d       	adc	r27, r1
     636:	8a 15       	cp	r24, r10
     638:	9b 05       	cpc	r25, r11
     63a:	ac 05       	cpc	r26, r12
     63c:	bd 05       	cpc	r27, r13
     63e:	a8 f3       	brcs	.-22     	; 0x62a <SSD_Display_With_Delay+0x54>
	{
		SSD_Display(num);
		_delay_ms(1);
	}
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	bf 90       	pop	r11
     652:	af 90       	pop	r10
     654:	9f 90       	pop	r9
     656:	8f 90       	pop	r8
     658:	08 95       	ret
	}
}
void SSD_Display_With_Delay(u8 num,u32 delay)
{
	u32 count = 0;
	for (count =0; count<delay; count+=3)
     65a:	ee 24       	eor	r14, r14
     65c:	ff 24       	eor	r15, r15
     65e:	87 01       	movw	r16, r14
     660:	c0 ea       	ldi	r28, 0xA0	; 160
     662:	df e0       	ldi	r29, 0x0F	; 15
	u8 loc_SSD_Second_Digit = (num/10)<<4;

	if (num <= 99)
	{
		/*	Enable SSD1	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_HIGH);
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	41 e0       	ldi	r20, 0x01	; 1
     66a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
		/*	Disable SSD2	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_LOW);
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	62 e0       	ldi	r22, 0x02	; 2
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
		/*	Write First Digit	*/
		Dio_Write_Channel_Group(DIO_PORTA, 0xF0, loc_SSD_First_Digit);
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	60 ef       	ldi	r22, 0xF0	; 240
     67c:	48 2d       	mov	r20, r8
     67e:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
     682:	ce 01       	movw	r24, r28
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <SSD_Display_With_Delay+0xae>
		_delay_ms(1);

		/*	Disable SSD1	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN1,DIO_LOW);
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
		/*	Enable SSD2	*/
		Dio_Write_Channel(DIO_PORTB, DIO_PIN2,DIO_HIGH);
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	62 e0       	ldi	r22, 0x02	; 2
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
		/*	Write Second Digit	*/
		Dio_Write_Channel_Group(DIO_PORTA, 0xF0, loc_SSD_Second_Digit);
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	60 ef       	ldi	r22, 0xF0	; 240
     6a0:	49 2d       	mov	r20, r9
     6a2:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <SSD_Display_With_Delay+0xd2>
     6ac:	ce 01       	movw	r24, r28
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <SSD_Display_With_Delay+0xd8>
	}
}
void SSD_Display_With_Delay(u8 num,u32 delay)
{
	u32 count = 0;
	for (count =0; count<delay; count+=3)
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	a0 e0       	ldi	r26, 0x00	; 0
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	e8 0e       	add	r14, r24
     6bc:	f9 1e       	adc	r15, r25
     6be:	0a 1f       	adc	r16, r26
     6c0:	1b 1f       	adc	r17, r27
     6c2:	ea 14       	cp	r14, r10
     6c4:	fb 04       	cpc	r15, r11
     6c6:	0c 05       	cpc	r16, r12
     6c8:	1d 05       	cpc	r17, r13
     6ca:	60 f2       	brcs	.-104    	; 0x664 <SSD_Display_With_Delay+0x8e>
     6cc:	b9 cf       	rjmp	.-142    	; 0x640 <SSD_Display_With_Delay+0x6a>

000006ce <Lcd_Cmd>:
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
void Lcd_Cmd(lcd_Cmd_Type command)
{
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	18 2f       	mov	r17, r24
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	60 ef       	ldi	r22, 0xF0	; 240
     6e6:	41 2f       	mov	r20, r17
     6e8:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	63 e0       	ldi	r22, 0x03	; 3
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6f6:	05 e0       	ldi	r16, 0x05	; 5
     6f8:	80 2f       	mov	r24, r16
     6fa:	8a 95       	dec	r24
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <Lcd_Cmd+0x2c>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	63 e0       	ldi	r22, 0x03	; 3
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     708:	80 e4       	ldi	r24, 0x40	; 64
     70a:	e8 2e       	mov	r14, r24
     70c:	8f e1       	ldi	r24, 0x1F	; 31
     70e:	f8 2e       	mov	r15, r24
     710:	c7 01       	movw	r24, r14
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	f1 f7       	brne	.-4      	; 0x712 <Lcd_Cmd+0x44>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     716:	12 95       	swap	r17
     718:	10 7f       	andi	r17, 0xF0	; 240
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	60 ef       	ldi	r22, 0xF0	; 240
     71e:	41 2f       	mov	r20, r17
     720:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	63 e0       	ldi	r22, 0x03	; 3
     728:	41 e0       	ldi	r20, 0x01	; 1
     72a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     72e:	0a 95       	dec	r16
     730:	f1 f7       	brne	.-4      	; 0x72e <Lcd_Cmd+0x60>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	63 e0       	ldi	r22, 0x03	; 3
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     73c:	c7 01       	movw	r24, r14
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <Lcd_Cmd+0x70>

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();
}
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	08 95       	ret

0000074c <Lcd_Display_Chr>:
	Lcd_Goto_Row_Column(0, 0);
}


void Lcd_Display_Chr(u8 chr)
{
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	18 2f       	mov	r17, r24
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	41 e0       	ldi	r20, 0x01	; 1
     75c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	60 ef       	ldi	r22, 0xF0	; 240
     764:	41 2f       	mov	r20, r17
     766:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	63 e0       	ldi	r22, 0x03	; 3
     76e:	41 e0       	ldi	r20, 0x01	; 1
     770:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     774:	05 e0       	ldi	r16, 0x05	; 5
     776:	80 2f       	mov	r24, r16
     778:	8a 95       	dec	r24
     77a:	f1 f7       	brne	.-4      	; 0x778 <Lcd_Display_Chr+0x2c>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	63 e0       	ldi	r22, 0x03	; 3
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     786:	90 e4       	ldi	r25, 0x40	; 64
     788:	e9 2e       	mov	r14, r25
     78a:	9f e1       	ldi	r25, 0x1F	; 31
     78c:	f9 2e       	mov	r15, r25
     78e:	c7 01       	movw	r24, r14
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	f1 f7       	brne	.-4      	; 0x790 <Lcd_Display_Chr+0x44>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     794:	12 95       	swap	r17
     796:	10 7f       	andi	r17, 0xF0	; 240
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	60 ef       	ldi	r22, 0xF0	; 240
     79c:	41 2f       	mov	r20, r17
     79e:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	63 e0       	ldi	r22, 0x03	; 3
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7ac:	0a 95       	dec	r16
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <Lcd_Display_Chr+0x60>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	63 e0       	ldi	r22, 0x03	; 3
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7ba:	c7 01       	movw	r24, r14
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <Lcd_Display_Chr+0x70>


void Lcd_Display_Chr(u8 chr)
{
	Lcd_Data(chr);
}
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	08 95       	ret

000007ca <Lcd_Display_str>:
void Lcd_Display_str(u8 str[])
{
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	while(*str != '\0')
     7d8:	18 81       	ld	r17, Y
     7da:	11 23       	and	r17, r17
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <Lcd_Display_str+0x16>
     7de:	3a c0       	rjmp	.+116    	; 0x854 <Lcd_Display_str+0x8a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7e0:	05 e0       	ldi	r16, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7e2:	20 e4       	ldi	r18, 0x40	; 64
     7e4:	e2 2e       	mov	r14, r18
     7e6:	2f e1       	ldi	r18, 0x1F	; 31
     7e8:	f2 2e       	mov	r15, r18
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	41 e0       	ldi	r20, 0x01	; 1
     7f0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	60 ef       	ldi	r22, 0xF0	; 240
     7f8:	41 2f       	mov	r20, r17
     7fa:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	63 e0       	ldi	r22, 0x03	; 3
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     808:	80 2f       	mov	r24, r16
     80a:	8a 95       	dec	r24
     80c:	f1 f7       	brne	.-4      	; 0x80a <Lcd_Display_str+0x40>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	63 e0       	ldi	r22, 0x03	; 3
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     818:	c7 01       	movw	r24, r14
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <Lcd_Display_str+0x50>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     81e:	12 95       	swap	r17
     820:	10 7f       	andi	r17, 0xF0	; 240
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	60 ef       	ldi	r22, 0xF0	; 240
     826:	41 2f       	mov	r20, r17
     828:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	63 e0       	ldi	r22, 0x03	; 3
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     836:	80 2f       	mov	r24, r16
     838:	8a 95       	dec	r24
     83a:	f1 f7       	brne	.-4      	; 0x838 <Lcd_Display_str+0x6e>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	63 e0       	ldi	r22, 0x03	; 3
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     846:	c7 01       	movw	r24, r14
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <Lcd_Display_str+0x7e>
void Lcd_Display_str(u8 str[])
{
	while(*str != '\0')
	{
		Lcd_Display_Chr(*str);
		str++;
     84c:	21 96       	adiw	r28, 0x01	; 1
{
	Lcd_Data(chr);
}
void Lcd_Display_str(u8 str[])
{
	while(*str != '\0')
     84e:	18 81       	ld	r17, Y
     850:	11 23       	and	r17, r17
     852:	59 f6       	brne	.-106    	; 0x7ea <Lcd_Display_str+0x20>
	{
		Lcd_Display_Chr(*str);
		str++;
	}
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	08 95       	ret

00000862 <Lcd_Goto_Row_Column>:
void Lcd_Goto_Row_Column(u8 row, u8 column)
{
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
	switch (row)
     86a:	88 23       	and	r24, r24
     86c:	09 f0       	breq	.+2      	; 0x870 <Lcd_Goto_Row_Column+0xe>
     86e:	3c c0       	rjmp	.+120    	; 0x8e8 <Lcd_Goto_Row_Column+0x86>
	{
	case 0:
		Lcd_Cmd(0x80+column);
     870:	16 2f       	mov	r17, r22
     872:	10 58       	subi	r17, 0x80	; 128
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	60 ef       	ldi	r22, 0xF0	; 240
     882:	41 2f       	mov	r20, r17
     884:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	63 e0       	ldi	r22, 0x03	; 3
     88c:	41 e0       	ldi	r20, 0x01	; 1
     88e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     892:	05 e0       	ldi	r16, 0x05	; 5
     894:	80 2f       	mov	r24, r16
     896:	8a 95       	dec	r24
     898:	f1 f7       	brne	.-4      	; 0x896 <Lcd_Goto_Row_Column+0x34>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	63 e0       	ldi	r22, 0x03	; 3
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8a4:	30 e4       	ldi	r19, 0x40	; 64
     8a6:	e3 2e       	mov	r14, r19
     8a8:	3f e1       	ldi	r19, 0x1F	; 31
     8aa:	f3 2e       	mov	r15, r19
     8ac:	c7 01       	movw	r24, r14
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <Lcd_Goto_Row_Column+0x4c>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     8b2:	12 95       	swap	r17
     8b4:	10 7f       	andi	r17, 0xF0	; 240
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	60 ef       	ldi	r22, 0xF0	; 240
     8ba:	41 2f       	mov	r20, r17
     8bc:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	63 e0       	ldi	r22, 0x03	; 3
     8c4:	41 e0       	ldi	r20, 0x01	; 1
     8c6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8ca:	0a 95       	dec	r16
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <Lcd_Goto_Row_Column+0x68>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	63 e0       	ldi	r22, 0x03	; 3
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8d8:	c7 01       	movw	r24, r14
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <Lcd_Goto_Row_Column+0x78>

	case 1:
		Lcd_Cmd(0xC0+column);
		break;
	}
}
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	08 95       	ret
		str++;
	}
}
void Lcd_Goto_Row_Column(u8 row, u8 column)
{
	switch (row)
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	c9 f7       	brne	.-14     	; 0x8de <Lcd_Goto_Row_Column+0x7c>
	case 0:
		Lcd_Cmd(0x80+column);
		break;

	case 1:
		Lcd_Cmd(0xC0+column);
     8ec:	16 2f       	mov	r17, r22
     8ee:	10 54       	subi	r17, 0x40	; 64
     8f0:	c1 cf       	rjmp	.-126    	; 0x874 <Lcd_Goto_Row_Column+0x12>

000008f2 <Lcd_Init>:
	/*	Enable pulse	*/
	Lcd_Pulse();
}

void Lcd_Init(void)
{
     8f2:	9f 92       	push	r9
     8f4:	af 92       	push	r10
     8f6:	bf 92       	push	r11
     8f8:	cf 92       	push	r12
     8fa:	df 92       	push	r13
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
	/*	Configure LCD Control Lines as Output	*/
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	41 e0       	ldi	r20, 0x01	; 1
     90e:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	62 e0       	ldi	r22, 0x02	; 2
     916:	41 e0       	ldi	r20, 0x01	; 1
     918:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	63 e0       	ldi	r22, 0x03	; 3
     920:	41 e0       	ldi	r20, 0x01	; 1
     922:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>

	/*	Configure LCD Data Lines as Output		*/
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	64 e0       	ldi	r22, 0x04	; 4
     92a:	41 e0       	ldi	r20, 0x01	; 1
     92c:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	65 e0       	ldi	r22, 0x05	; 5
     934:	41 e0       	ldi	r20, 0x01	; 1
     936:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	66 e0       	ldi	r22, 0x06	; 6
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	67 e0       	ldi	r22, 0x07	; 7
     948:	41 e0       	ldi	r20, 0x01	; 1
     94a:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>

	/*	Set LCD For Write Mode	*/
	Dio_Write_Channel(DIO_PORTB, DIO_PIN2, DIO_LOW);
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	62 e0       	ldi	r22, 0x02	; 2
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
     958:	80 e6       	ldi	r24, 0x60	; 96
     95a:	9a ee       	ldi	r25, 0xEA	; 234
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <Lcd_Init+0x6a>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	60 ef       	ldi	r22, 0xF0	; 240
     96e:	43 e0       	ldi	r20, 0x03	; 3
     970:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	63 e0       	ldi	r22, 0x03	; 3
     978:	41 e0       	ldi	r20, 0x01	; 1
     97a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     97e:	e5 e0       	ldi	r30, 0x05	; 5
     980:	fe 2e       	mov	r15, r30
     982:	8f 2d       	mov	r24, r15
     984:	8a 95       	dec	r24
     986:	f1 f7       	brne	.-4      	; 0x984 <Lcd_Init+0x92>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	63 e0       	ldi	r22, 0x03	; 3
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     992:	00 e4       	ldi	r16, 0x40	; 64
     994:	1f e1       	ldi	r17, 0x1F	; 31
     996:	c8 01       	movw	r24, r16
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <Lcd_Init+0xa6>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	60 ef       	ldi	r22, 0xF0	; 240
     9a0:	40 e3       	ldi	r20, 0x30	; 48
     9a2:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	63 e0       	ldi	r22, 0x03	; 3
     9aa:	41 e0       	ldi	r20, 0x01	; 1
     9ac:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9b0:	8f 2d       	mov	r24, r15
     9b2:	8a 95       	dec	r24
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <Lcd_Init+0xc0>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	63 e0       	ldi	r22, 0x03	; 3
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9c0:	c8 01       	movw	r24, r16
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <Lcd_Init+0xd0>
     9c6:	80 e2       	ldi	r24, 0x20	; 32
     9c8:	9e e4       	ldi	r25, 0x4E	; 78
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <Lcd_Init+0xd8>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	60 ef       	ldi	r22, 0xF0	; 240
     9dc:	43 e0       	ldi	r20, 0x03	; 3
     9de:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	63 e0       	ldi	r22, 0x03	; 3
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9ec:	8f 2d       	mov	r24, r15
     9ee:	8a 95       	dec	r24
     9f0:	f1 f7       	brne	.-4      	; 0x9ee <Lcd_Init+0xfc>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	63 e0       	ldi	r22, 0x03	; 3
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9fc:	c8 01       	movw	r24, r16
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <Lcd_Init+0x10c>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	60 ef       	ldi	r22, 0xF0	; 240
     a06:	40 e3       	ldi	r20, 0x30	; 48
     a08:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	63 e0       	ldi	r22, 0x03	; 3
     a10:	41 e0       	ldi	r20, 0x01	; 1
     a12:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a16:	8f 2d       	mov	r24, r15
     a18:	8a 95       	dec	r24
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <Lcd_Init+0x126>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	63 e0       	ldi	r22, 0x03	; 3
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a26:	c8 01       	movw	r24, r16
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <Lcd_Init+0x136>
     a2c:	80 e9       	ldi	r24, 0x90	; 144
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <Lcd_Init+0x13e>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	60 ef       	ldi	r22, 0xF0	; 240
     a42:	43 e0       	ldi	r20, 0x03	; 3
     a44:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	63 e0       	ldi	r22, 0x03	; 3
     a4c:	41 e0       	ldi	r20, 0x01	; 1
     a4e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a52:	8f 2d       	mov	r24, r15
     a54:	8a 95       	dec	r24
     a56:	f1 f7       	brne	.-4      	; 0xa54 <Lcd_Init+0x162>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	63 e0       	ldi	r22, 0x03	; 3
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a62:	c8 01       	movw	r24, r16
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <Lcd_Init+0x172>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	60 ef       	ldi	r22, 0xF0	; 240
     a6c:	40 e3       	ldi	r20, 0x30	; 48
     a6e:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	63 e0       	ldi	r22, 0x03	; 3
     a76:	41 e0       	ldi	r20, 0x01	; 1
     a78:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a7c:	8f 2d       	mov	r24, r15
     a7e:	8a 95       	dec	r24
     a80:	f1 f7       	brne	.-4      	; 0xa7e <Lcd_Init+0x18c>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	63 e0       	ldi	r22, 0x03	; 3
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a8c:	c8 01       	movw	r24, r16
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <Lcd_Init+0x19c>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	61 e0       	ldi	r22, 0x01	; 1
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	60 ef       	ldi	r22, 0xF0	; 240
     aa0:	42 e0       	ldi	r20, 0x02	; 2
     aa2:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	63 e0       	ldi	r22, 0x03	; 3
     aaa:	41 e0       	ldi	r20, 0x01	; 1
     aac:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ab0:	8f 2d       	mov	r24, r15
     ab2:	8a 95       	dec	r24
     ab4:	f1 f7       	brne	.-4      	; 0xab2 <Lcd_Init+0x1c0>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	63 e0       	ldi	r22, 0x03	; 3
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ac0:	c8 01       	movw	r24, r16
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <Lcd_Init+0x1d0>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	60 ef       	ldi	r22, 0xF0	; 240
     aca:	40 e2       	ldi	r20, 0x20	; 32
     acc:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	63 e0       	ldi	r22, 0x03	; 3
     ad4:	41 e0       	ldi	r20, 0x01	; 1
     ad6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ada:	8f 2d       	mov	r24, r15
     adc:	8a 95       	dec	r24
     ade:	f1 f7       	brne	.-4      	; 0xadc <Lcd_Init+0x1ea>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	63 e0       	ldi	r22, 0x03	; 3
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     aea:	c8 01       	movw	r24, r16
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <Lcd_Init+0x1fa>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	60 ef       	ldi	r22, 0xF0	; 240
     afe:	42 e0       	ldi	r20, 0x02	; 2
     b00:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	63 e0       	ldi	r22, 0x03	; 3
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b0e:	8f 2d       	mov	r24, r15
     b10:	8a 95       	dec	r24
     b12:	f1 f7       	brne	.-4      	; 0xb10 <Lcd_Init+0x21e>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	63 e0       	ldi	r22, 0x03	; 3
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b1e:	c8 01       	movw	r24, r16
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	f1 f7       	brne	.-4      	; 0xb20 <Lcd_Init+0x22e>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	60 ef       	ldi	r22, 0xF0	; 240
     b28:	40 e2       	ldi	r20, 0x20	; 32
     b2a:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	63 e0       	ldi	r22, 0x03	; 3
     b32:	41 e0       	ldi	r20, 0x01	; 1
     b34:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b38:	fa 94       	dec	r15
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <Lcd_Init+0x246>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	63 e0       	ldi	r22, 0x03	; 3
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b46:	c8 01       	movw	r24, r16
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <Lcd_Init+0x256>
     b4c:	71 e8       	ldi	r23, 0x81	; 129
     b4e:	e7 2e       	mov	r14, r23
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	f7 2e       	mov	r15, r23
     b54:	60 e4       	ldi	r22, 0x40	; 64
     b56:	c6 2e       	mov	r12, r22
     b58:	d1 2c       	mov	r13, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b5a:	05 e0       	ldi	r16, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b5c:	c0 e4       	ldi	r28, 0x40	; 64
     b5e:	df e1       	ldi	r29, 0x1F	; 31
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;

	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
     b60:	1c 2d       	mov	r17, r12
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	60 ef       	ldi	r22, 0xF0	; 240
     b70:	4c 2d       	mov	r20, r12
     b72:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	63 e0       	ldi	r22, 0x03	; 3
     b7a:	41 e0       	ldi	r20, 0x01	; 1
     b7c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b80:	55 e0       	ldi	r21, 0x05	; 5
     b82:	95 2e       	mov	r9, r21
     b84:	80 2f       	mov	r24, r16
     b86:	8a 95       	dec	r24
     b88:	f1 f7       	brne	.-4      	; 0xb86 <Lcd_Init+0x294>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	63 e0       	ldi	r22, 0x03	; 3
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b94:	40 e4       	ldi	r20, 0x40	; 64
     b96:	a4 2e       	mov	r10, r20
     b98:	4f e1       	ldi	r20, 0x1F	; 31
     b9a:	b4 2e       	mov	r11, r20
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <Lcd_Init+0x2ac>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     ba2:	12 95       	swap	r17
     ba4:	10 7f       	andi	r17, 0xF0	; 240
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	60 ef       	ldi	r22, 0xF0	; 240
     baa:	41 2f       	mov	r20, r17
     bac:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	63 e0       	ldi	r22, 0x03	; 3
     bb4:	41 e0       	ldi	r20, 0x01	; 1
     bb6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bba:	80 2f       	mov	r24, r16
     bbc:	8a 95       	dec	r24
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <Lcd_Init+0x2ca>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	63 e0       	ldi	r22, 0x03	; 3
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bca:	ce 01       	movw	r24, r28
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <Lcd_Init+0x2da>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     bd0:	f7 01       	movw	r30, r14
     bd2:	10 81       	ld	r17, Z
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	60 ef       	ldi	r22, 0xF0	; 240
     be2:	41 2f       	mov	r20, r17
     be4:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	63 e0       	ldi	r22, 0x03	; 3
     bec:	41 e0       	ldi	r20, 0x01	; 1
     bee:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bf2:	80 2f       	mov	r24, r16
     bf4:	8a 95       	dec	r24
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <Lcd_Init+0x302>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	63 e0       	ldi	r22, 0x03	; 3
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c02:	ce 01       	movw	r24, r28
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <Lcd_Init+0x312>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     c08:	12 95       	swap	r17
     c0a:	10 7f       	andi	r17, 0xF0	; 240
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	60 ef       	ldi	r22, 0xF0	; 240
     c10:	41 2f       	mov	r20, r17
     c12:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	63 e0       	ldi	r22, 0x03	; 3
     c1a:	41 e0       	ldi	r20, 0x01	; 1
     c1c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c20:	80 2f       	mov	r24, r16
     c22:	8a 95       	dec	r24
     c24:	f1 f7       	brne	.-4      	; 0xc22 <Lcd_Init+0x330>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	63 e0       	ldi	r22, 0x03	; 3
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c30:	ce 01       	movw	r24, r28
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <Lcd_Init+0x340>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     c36:	f7 01       	movw	r30, r14
     c38:	11 81       	ldd	r17, Z+1	; 0x01
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	41 e0       	ldi	r20, 0x01	; 1
     c40:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	60 ef       	ldi	r22, 0xF0	; 240
     c48:	41 2f       	mov	r20, r17
     c4a:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	63 e0       	ldi	r22, 0x03	; 3
     c52:	41 e0       	ldi	r20, 0x01	; 1
     c54:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c58:	80 2f       	mov	r24, r16
     c5a:	8a 95       	dec	r24
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <Lcd_Init+0x368>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	63 e0       	ldi	r22, 0x03	; 3
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c68:	ce 01       	movw	r24, r28
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <Lcd_Init+0x378>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     c6e:	12 95       	swap	r17
     c70:	10 7f       	andi	r17, 0xF0	; 240
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	60 ef       	ldi	r22, 0xF0	; 240
     c76:	41 2f       	mov	r20, r17
     c78:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	63 e0       	ldi	r22, 0x03	; 3
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c86:	80 2f       	mov	r24, r16
     c88:	8a 95       	dec	r24
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <Lcd_Init+0x396>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	63 e0       	ldi	r22, 0x03	; 3
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c96:	ce 01       	movw	r24, r28
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <Lcd_Init+0x3a6>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     c9c:	f7 01       	movw	r30, r14
     c9e:	12 81       	ldd	r17, Z+2	; 0x02
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	41 e0       	ldi	r20, 0x01	; 1
     ca6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	60 ef       	ldi	r22, 0xF0	; 240
     cae:	41 2f       	mov	r20, r17
     cb0:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	63 e0       	ldi	r22, 0x03	; 3
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     cbe:	80 2f       	mov	r24, r16
     cc0:	8a 95       	dec	r24
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <Lcd_Init+0x3ce>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	63 e0       	ldi	r22, 0x03	; 3
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cce:	ce 01       	movw	r24, r28
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <Lcd_Init+0x3de>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     cd4:	12 95       	swap	r17
     cd6:	10 7f       	andi	r17, 0xF0	; 240
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	60 ef       	ldi	r22, 0xF0	; 240
     cdc:	41 2f       	mov	r20, r17
     cde:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	63 e0       	ldi	r22, 0x03	; 3
     ce6:	41 e0       	ldi	r20, 0x01	; 1
     ce8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     cec:	80 2f       	mov	r24, r16
     cee:	8a 95       	dec	r24
     cf0:	f1 f7       	brne	.-4      	; 0xcee <Lcd_Init+0x3fc>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	63 e0       	ldi	r22, 0x03	; 3
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <Lcd_Init+0x40c>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     d02:	f7 01       	movw	r30, r14
     d04:	13 81       	ldd	r17, Z+3	; 0x03
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	60 ef       	ldi	r22, 0xF0	; 240
     d14:	41 2f       	mov	r20, r17
     d16:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	63 e0       	ldi	r22, 0x03	; 3
     d1e:	41 e0       	ldi	r20, 0x01	; 1
     d20:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d24:	80 2f       	mov	r24, r16
     d26:	8a 95       	dec	r24
     d28:	f1 f7       	brne	.-4      	; 0xd26 <Lcd_Init+0x434>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	63 e0       	ldi	r22, 0x03	; 3
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d34:	ce 01       	movw	r24, r28
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <Lcd_Init+0x444>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     d3a:	12 95       	swap	r17
     d3c:	10 7f       	andi	r17, 0xF0	; 240
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	60 ef       	ldi	r22, 0xF0	; 240
     d42:	41 2f       	mov	r20, r17
     d44:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	63 e0       	ldi	r22, 0x03	; 3
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d52:	80 2f       	mov	r24, r16
     d54:	8a 95       	dec	r24
     d56:	f1 f7       	brne	.-4      	; 0xd54 <Lcd_Init+0x462>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	63 e0       	ldi	r22, 0x03	; 3
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d62:	ce 01       	movw	r24, r28
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <Lcd_Init+0x472>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     d68:	f7 01       	movw	r30, r14
     d6a:	14 81       	ldd	r17, Z+4	; 0x04
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	41 e0       	ldi	r20, 0x01	; 1
     d72:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	60 ef       	ldi	r22, 0xF0	; 240
     d7a:	41 2f       	mov	r20, r17
     d7c:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	63 e0       	ldi	r22, 0x03	; 3
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d8a:	80 2f       	mov	r24, r16
     d8c:	8a 95       	dec	r24
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <Lcd_Init+0x49a>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	63 e0       	ldi	r22, 0x03	; 3
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d9a:	ce 01       	movw	r24, r28
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <Lcd_Init+0x4aa>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     da0:	12 95       	swap	r17
     da2:	10 7f       	andi	r17, 0xF0	; 240
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	60 ef       	ldi	r22, 0xF0	; 240
     da8:	41 2f       	mov	r20, r17
     daa:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	63 e0       	ldi	r22, 0x03	; 3
     db2:	41 e0       	ldi	r20, 0x01	; 1
     db4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     db8:	80 2f       	mov	r24, r16
     dba:	8a 95       	dec	r24
     dbc:	f1 f7       	brne	.-4      	; 0xdba <Lcd_Init+0x4c8>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	63 e0       	ldi	r22, 0x03	; 3
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc8:	ce 01       	movw	r24, r28
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <Lcd_Init+0x4d8>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     dce:	f7 01       	movw	r30, r14
     dd0:	15 81       	ldd	r17, Z+5	; 0x05
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	60 ef       	ldi	r22, 0xF0	; 240
     de0:	41 2f       	mov	r20, r17
     de2:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	63 e0       	ldi	r22, 0x03	; 3
     dea:	41 e0       	ldi	r20, 0x01	; 1
     dec:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     df0:	80 2f       	mov	r24, r16
     df2:	8a 95       	dec	r24
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <Lcd_Init+0x500>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	63 e0       	ldi	r22, 0x03	; 3
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e00:	ce 01       	movw	r24, r28
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <Lcd_Init+0x510>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     e06:	12 95       	swap	r17
     e08:	10 7f       	andi	r17, 0xF0	; 240
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	60 ef       	ldi	r22, 0xF0	; 240
     e0e:	41 2f       	mov	r20, r17
     e10:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	63 e0       	ldi	r22, 0x03	; 3
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e1e:	80 2f       	mov	r24, r16
     e20:	8a 95       	dec	r24
     e22:	f1 f7       	brne	.-4      	; 0xe20 <Lcd_Init+0x52e>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	63 e0       	ldi	r22, 0x03	; 3
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e2e:	ce 01       	movw	r24, r28
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <Lcd_Init+0x53e>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     e34:	f7 01       	movw	r30, r14
     e36:	16 81       	ldd	r17, Z+6	; 0x06
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	60 ef       	ldi	r22, 0xF0	; 240
     e46:	41 2f       	mov	r20, r17
     e48:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	63 e0       	ldi	r22, 0x03	; 3
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e56:	80 2f       	mov	r24, r16
     e58:	8a 95       	dec	r24
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <Lcd_Init+0x566>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	63 e0       	ldi	r22, 0x03	; 3
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e66:	ce 01       	movw	r24, r28
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <Lcd_Init+0x576>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     e6c:	12 95       	swap	r17
     e6e:	10 7f       	andi	r17, 0xF0	; 240
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	60 ef       	ldi	r22, 0xF0	; 240
     e74:	41 2f       	mov	r20, r17
     e76:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	63 e0       	ldi	r22, 0x03	; 3
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e84:	80 2f       	mov	r24, r16
     e86:	8a 95       	dec	r24
     e88:	f1 f7       	brne	.-4      	; 0xe86 <Lcd_Init+0x594>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	63 e0       	ldi	r22, 0x03	; 3
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e94:	ce 01       	movw	r24, r28
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <Lcd_Init+0x5a4>
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_Display_Chr(customChar[loc_CharIndx][loc_ByteIndex]);
     e9a:	f7 01       	movw	r30, r14
     e9c:	17 81       	ldd	r17, Z+7	; 0x07
static void Lcd_Data(u8 data)
{
	u8 loc_High_Nibble = data;
	u8 loc_Low_Nibble= data<<4;
	/*	RS = 1	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_HIGH);
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	61 e0       	ldi	r22, 0x01	; 1
     ea2:	41 e0       	ldi	r20, 0x01	; 1
     ea4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	60 ef       	ldi	r22, 0xF0	; 240
     eac:	41 2f       	mov	r20, r17
     eae:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	63 e0       	ldi	r22, 0x03	; 3
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ebc:	80 2f       	mov	r24, r16
     ebe:	8a 95       	dec	r24
     ec0:	f1 f7       	brne	.-4      	; 0xebe <Lcd_Init+0x5cc>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	63 e0       	ldi	r22, 0x03	; 3
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ecc:	ce 01       	movw	r24, r28
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <Lcd_Init+0x5dc>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     ed2:	12 95       	swap	r17
     ed4:	10 7f       	andi	r17, 0xF0	; 240
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	60 ef       	ldi	r22, 0xF0	; 240
     eda:	41 2f       	mov	r20, r17
     edc:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	63 e0       	ldi	r22, 0x03	; 3
     ee4:	41 e0       	ldi	r20, 0x01	; 1
     ee6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     eea:	80 2f       	mov	r24, r16
     eec:	8a 95       	dec	r24
     eee:	f1 f7       	brne	.-4      	; 0xeec <Lcd_Init+0x5fa>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	63 e0       	ldi	r22, 0x03	; 3
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     efa:	ce 01       	movw	r24, r28
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <Lcd_Init+0x60a>
     f00:	88 e0       	ldi	r24, 0x08	; 8
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	c8 0e       	add	r12, r24
     f06:	d9 1e       	adc	r13, r25
     f08:	e8 0e       	add	r14, r24
     f0a:	f9 1e       	adc	r15, r25
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;

	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
     f0c:	90 e8       	ldi	r25, 0x80	; 128
     f0e:	c9 16       	cp	r12, r25
     f10:	d1 04       	cpc	r13, r1
     f12:	09 f0       	breq	.+2      	; 0xf16 <Lcd_Init+0x624>
     f14:	25 ce       	rjmp	.-950    	; 0xb60 <Lcd_Init+0x26e>
void Lcd_Cmd(lcd_Cmd_Type command)
{
	u8 loc_High_Nibble = command;
	u8 loc_Low_Nibble= command<<4;
	/*	RS = 0	*/
	Dio_Write_Channel(DIO_PORTB,DIO_PIN1, DIO_LOW);
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	/*	Write High Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	60 ef       	ldi	r22, 0xF0	; 240
     f24:	40 e8       	ldi	r20, 0x80	; 128
     f26:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	63 e0       	ldi	r22, 0x03	; 3
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f34:	89 2d       	mov	r24, r9
     f36:	8a 95       	dec	r24
     f38:	f1 f7       	brne	.-4      	; 0xf36 <Lcd_Init+0x644>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	63 e0       	ldi	r22, 0x03	; 3
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f44:	c5 01       	movw	r24, r10
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <Lcd_Init+0x654>
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_High_Nibble);
	/*	Enable pulse	*/
	Lcd_Pulse();

	/*	Write Low Nibble	*/
	Dio_Write_Channel_Group(DIO_PORTA,0xF0,loc_Low_Nibble);
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	60 ef       	ldi	r22, 0xF0	; 240
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	0e 94 b7 09 	call	0x136e	; 0x136e <Dio_Write_Channel_Group>
 * */

extern u8 customChar[NO_CSTOM_CHAR][NO_CSTOM_CHAR_BYTES];
static void Lcd_Pulse(void)
{
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	63 e0       	ldi	r22, 0x03	; 3
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f5e:	89 2d       	mov	r24, r9
     f60:	8a 95       	dec	r24
     f62:	f1 f7       	brne	.-4      	; 0xf60 <Lcd_Init+0x66e>
	_delay_us(1);
	Dio_Write_Channel(DIO_PORTB, DIO_PIN3, DIO_LOW);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	63 e0       	ldi	r22, 0x03	; 3
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6e:	c5 01       	movw	r24, r10
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <Lcd_Init+0x67e>
	Lcd_Cmd(0x03);
	Lcd_Cmd(0x02);
	Lcd_Cmd(0x02);
	Lcd_WriteCustom();
	Lcd_Goto_Row_Column(0, 0);
}
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	df 90       	pop	r13
     f82:	cf 90       	pop	r12
     f84:	bf 90       	pop	r11
     f86:	af 90       	pop	r10
     f88:	9f 90       	pop	r9
     f8a:	08 95       	ret

00000f8c <Button_Is_Pressed>:

boolean Button_Is_Pressed(button_id_t button)
{
	boolean loc_button_pressed = FALSE;

	switch(button)
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	89 f0       	breq	.+34     	; 0xfb2 <Button_Is_Pressed+0x26>
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	28 f0       	brcs	.+10     	; 0xf9e <Button_Is_Pressed+0x12>
     f94:	82 30       	cpi	r24, 0x02	; 2
     f96:	b1 f0       	breq	.+44     	; 0xfc4 <Button_Is_Pressed+0x38>
     f98:	90 e0       	ldi	r25, 0x00	; 0
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
     f9a:	89 2f       	mov	r24, r25
     f9c:	08 95       	ret
	boolean loc_button_pressed = FALSE;

	switch(button)
	{
	case BUTTON0:
		if (Dio_Read_Channel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	b9 f7       	brne	.-18     	; 0xf9a <Button_Is_Pressed+0xe>
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON2:
		if (Dio_Read_Channel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
     fac:	91 e0       	ldi	r25, 0x01	; 1
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
     fae:	89 2f       	mov	r24, r25
     fb0:	08 95       	ret
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON1:
		if (Dio_Read_Channel(DIO_PORTB, DIO_PIN4) == DIO_HIGH)
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	64 e0       	ldi	r22, 0x04	; 4
     fb6:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	b1 f3       	breq	.-20     	; 0xfac <Button_Is_Pressed+0x20>
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
     fc0:	89 2f       	mov	r24, r25
     fc2:	08 95       	ret
			loc_button_pressed = FALSE;
		}
		break;

	case BUTTON2:
		if (Dio_Read_Channel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	62 e0       	ldi	r22, 0x02	; 2
     fc8:	0e 94 89 09 	call	0x1312	; 0x1312 <Dio_Read_Channel>
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	69 f3       	breq	.-38     	; 0xfac <Button_Is_Pressed+0x20>
			loc_button_pressed = FALSE;
		}
		break;
	}
	return loc_button_pressed;
}
     fd2:	89 2f       	mov	r24, r25
     fd4:	08 95       	ret

00000fd6 <Button_Init>:

#include "Button_Interface.h"

void Button_Init(void)
{
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	64 e0       	ldi	r22, 0x04	; 4
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	62 e0       	ldi	r22, 0x02	; 2
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
}
     ff4:	08 95       	ret

00000ff6 <Led_Toggle>:
	}
}

void Led_Toggle(led_id_t led)
{
	switch (led)
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	79 f0       	breq	.+30     	; 0x1018 <Led_Toggle+0x22>
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	28 f4       	brcc	.+10     	; 0x1008 <Led_Toggle+0x12>
	{
	case LED0:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN2);
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	62 e0       	ldi	r22, 0x02	; 2
    1002:	0e 94 54 09 	call	0x12a8	; 0x12a8 <Dio_Flip_Channel>
    1006:	08 95       	ret
	}
}

void Led_Toggle(led_id_t led)
{
	switch (led)
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	09 f0       	breq	.+2      	; 0x100e <Led_Toggle+0x18>
    100c:	08 95       	ret
	case LED1:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN7);
		break;

	case LED2:
		Dio_Flip_Channel(DIO_PORTD, DIO_PIN3);
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	63 e0       	ldi	r22, 0x03	; 3
    1012:	0e 94 54 09 	call	0x12a8	; 0x12a8 <Dio_Flip_Channel>
    1016:	08 95       	ret
	case LED0:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN2);
		break;

	case LED1:
		Dio_Flip_Channel(DIO_PORTC, DIO_PIN7);
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	67 e0       	ldi	r22, 0x07	; 7
    101c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <Dio_Flip_Channel>
    1020:	08 95       	ret

00001022 <Led_OFF>:
	}
}

void Led_OFF(led_id_t led)
{
	switch (led)
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	89 f0       	breq	.+34     	; 0x1048 <Led_OFF+0x26>
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	30 f4       	brcc	.+12     	; 0x1036 <Led_OFF+0x14>
	{
	case LED0:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	62 e0       	ldi	r22, 0x02	; 2
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    1034:	08 95       	ret
	}
}

void Led_OFF(led_id_t led)
{
	switch (led)
    1036:	82 30       	cpi	r24, 0x02	; 2
    1038:	09 f0       	breq	.+2      	; 0x103c <Led_OFF+0x1a>
    103a:	08 95       	ret
	case LED1:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN7, DIO_LOW);
		break;

	case LED2:
		Dio_Write_Channel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    103c:	83 e0       	ldi	r24, 0x03	; 3
    103e:	63 e0       	ldi	r22, 0x03	; 3
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    1046:	08 95       	ret
	case LED0:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN2, DIO_LOW);
		break;

	case LED1:
		Dio_Write_Channel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	67 e0       	ldi	r22, 0x07	; 7
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    1052:	08 95       	ret

00001054 <Led_ON>:
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
}

void Led_ON(led_id_t led)
{
	switch (led)
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	89 f0       	breq	.+34     	; 0x107a <Led_ON+0x26>
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	30 f4       	brcc	.+12     	; 0x1068 <Led_ON+0x14>
	{
	case LED0:

#if(LED0_CONECTION == SOURCE)
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_HIGH);
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	62 e0       	ldi	r22, 0x02	; 2
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    1066:	08 95       	ret
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
}

void Led_ON(led_id_t led)
{
	switch (led)
    1068:	82 30       	cpi	r24, 0x02	; 2
    106a:	09 f0       	breq	.+2      	; 0x106e <Led_ON+0x1a>
    106c:	08 95       	ret

	case LED1:
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
		break;
	case LED2:
		Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_HIGH);
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	63 e0       	ldi	r22, 0x03	; 3
    1072:	41 e0       	ldi	r20, 0x01	; 1
    1074:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    1078:	08 95       	ret
		Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
#endif
		break;

	case LED1:
		Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_HIGH);
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	67 e0       	ldi	r22, 0x07	; 7
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
    1084:	08 95       	ret

00001086 <Led_Init>:

#include "Led_Interface.h"

void Led_Init(void)
{
	Dio_Configure_Channel(LED0_PORT, LED0_PIN, DIO_OUTPUT);
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	62 e0       	ldi	r22, 0x02	; 2
    108a:	41 e0       	ldi	r20, 0x01	; 1
    108c:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(LED1_PORT, LED1_PIN, DIO_OUTPUT);
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	67 e0       	ldi	r22, 0x07	; 7
    1094:	41 e0       	ldi	r20, 0x01	; 1
    1096:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>
	Dio_Configure_Channel(LED2_PORT, LED2_PIN, DIO_OUTPUT);
    109a:	83 e0       	ldi	r24, 0x03	; 3
    109c:	63 e0       	ldi	r22, 0x03	; 3
    109e:	41 e0       	ldi	r20, 0x01	; 1
    10a0:	0e 94 77 08 	call	0x10ee	; 0x10ee <Dio_Configure_Channel>

	Dio_Write_Channel(LED0_PORT, LED0_PIN, DIO_LOW);
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	62 e0       	ldi	r22, 0x02	; 2
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(LED1_PORT, LED1_PIN, DIO_LOW);
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	67 e0       	ldi	r22, 0x07	; 7
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
	Dio_Write_Channel(LED2_PORT, LED2_PIN, DIO_LOW);
    10b8:	83 e0       	ldi	r24, 0x03	; 3
    10ba:	63 e0       	ldi	r22, 0x03	; 3
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Dio_Write_Channel>
}
    10c2:	08 95       	ret

000010c4 <ADC_vidInit>:
 ********************************/
#include "Adc_Interface.h"

void ADC_vidInit(void)
{
	ADC_ADMUX_REG|=(AVCC5V_REF<<6);  /*	AVCC aas Vref	*/
    10c4:	3e 9a       	sbi	0x07, 6	; 7
	ADC_ADCSRA_REG=(ADC_ENABLE)|(ADCPS_128);
    10c6:	87 e8       	ldi	r24, 0x87	; 135
    10c8:	86 b9       	out	0x06, r24	; 6
}
    10ca:	08 95       	ret

000010cc <ADC_vidRead>:

u16 ADC_vidRead(adc_Channel_t chnlNo)
{
    u16 result;
    ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(chnlNo);
    10cc:	97 b1       	in	r25, 0x07	; 7
    10ce:	98 7f       	andi	r25, 0xF8	; 248
    10d0:	98 2b       	or	r25, r24
    10d2:	97 b9       	out	0x07, r25	; 7
    ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    10d4:	36 9a       	sbi	0x06, 6	; 6
 	while(CHECK_BIT(ADC_ADCSRA_REG,ADIF_BIT_NO) != 1)
    10d6:	34 9b       	sbis	0x06, 4	; 6
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <ADC_vidRead+0xa>
 		  {
 		  	  /*	Do Nothing	*/
 		  }
 	/*	Clear Interrupt Flag To Be Ready For Another Conversion	*/
 	 SET_BIT(ADC_ADCSRA_REG,ADIF_BIT_NO);
    10da:	34 9a       	sbi	0x06, 4	; 6
    result=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    10dc:	24 b1       	in	r18, 0x04	; 4
    10de:	45 b1       	in	r20, 0x05	; 5
    10e0:	94 2f       	mov	r25, r20
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	28 2b       	or	r18, r24
    10e8:	39 2b       	or	r19, r25
 	return result;
}
    10ea:	c9 01       	movw	r24, r18
    10ec:	08 95       	ret

000010ee <Dio_Configure_Channel>:
#include "Dio_Interface.h"


void Dio_Configure_Channel(dio_port_t port, dio_pin_t pin , dio_direction_t direction)
{
	switch (port)
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	19 f1       	breq	.+70     	; 0x1138 <Dio_Configure_Channel+0x4a>
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	28 f0       	brcs	.+10     	; 0x1100 <Dio_Configure_Channel+0x12>
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	69 f1       	breq	.+90     	; 0x1154 <Dio_Configure_Channel+0x66>
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	79 f0       	breq	.+30     	; 0x111c <Dio_Configure_Channel+0x2e>
    10fe:	08 95       	ret
	{
	case DIO_PORTA:
			if (direction == DIO_INPUT)
    1100:	44 23       	and	r20, r20
    1102:	b1 f5       	brne	.+108    	; 0x1170 <Dio_Configure_Channel+0x82>
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
    1104:	2a b3       	in	r18, 0x1a	; 26
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <Dio_Configure_Channel+0x22>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	6a 95       	dec	r22
    1112:	e2 f7       	brpl	.-8      	; 0x110c <Dio_Configure_Channel+0x1e>
    1114:	80 95       	com	r24
    1116:	82 23       	and	r24, r18
    1118:	8a bb       	out	0x1a, r24	; 26
    111a:	08 95       	ret
					SET_BIT(DIO_DDRC_REG,pin);
				}
			break;

	case DIO_PORTD:
				if (direction == DIO_INPUT)
    111c:	44 23       	and	r20, r20
    111e:	09 f4       	brne	.+2      	; 0x1122 <Dio_Configure_Channel+0x34>
    1120:	48 c0       	rjmp	.+144    	; 0x11b2 <Dio_Configure_Channel+0xc4>
				{
					CLEAR_BIT(DIO_DDRD_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRD_REG,pin);
    1122:	21 b3       	in	r18, 0x11	; 17
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <Dio_Configure_Channel+0x40>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	6a 95       	dec	r22
    1130:	e2 f7       	brpl	.-8      	; 0x112a <Dio_Configure_Channel+0x3c>
    1132:	28 2b       	or	r18, r24
    1134:	21 bb       	out	0x11, r18	; 17
    1136:	08 95       	ret
				SET_BIT(DIO_DDRA_REG,pin);
			}
		break;

	case DIO_PORTB:
				if (direction == DIO_INPUT)
    1138:	44 23       	and	r20, r20
    113a:	81 f5       	brne	.+96     	; 0x119c <Dio_Configure_Channel+0xae>
				{
					CLEAR_BIT(DIO_DDRB_REG,pin);
    113c:	27 b3       	in	r18, 0x17	; 23
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <Dio_Configure_Channel+0x5a>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	6a 95       	dec	r22
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <Dio_Configure_Channel+0x56>
    114c:	80 95       	com	r24
    114e:	82 23       	and	r24, r18
    1150:	87 bb       	out	0x17, r24	; 23
    1152:	08 95       	ret
					SET_BIT(DIO_DDRB_REG,pin);
				}
			break;

	case DIO_PORTC:
				if (direction == DIO_INPUT)
    1154:	44 23       	and	r20, r20
    1156:	b9 f4       	brne	.+46     	; 0x1186 <Dio_Configure_Channel+0x98>
				{
					CLEAR_BIT(DIO_DDRC_REG,pin);
    1158:	24 b3       	in	r18, 0x14	; 20
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <Dio_Configure_Channel+0x76>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	6a 95       	dec	r22
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <Dio_Configure_Channel+0x72>
    1168:	80 95       	com	r24
    116a:	82 23       	and	r24, r18
    116c:	84 bb       	out	0x14, r24	; 20
    116e:	08 95       	ret
			{
				CLEAR_BIT(DIO_DDRA_REG,pin);
			}
			else
			{
				SET_BIT(DIO_DDRA_REG,pin);
    1170:	2a b3       	in	r18, 0x1a	; 26
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <Dio_Configure_Channel+0x8e>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	6a 95       	dec	r22
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <Dio_Configure_Channel+0x8a>
    1180:	28 2b       	or	r18, r24
    1182:	2a bb       	out	0x1a, r18	; 26
    1184:	08 95       	ret
				{
					CLEAR_BIT(DIO_DDRC_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRC_REG,pin);
    1186:	24 b3       	in	r18, 0x14	; 20
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <Dio_Configure_Channel+0xa4>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	6a 95       	dec	r22
    1194:	e2 f7       	brpl	.-8      	; 0x118e <Dio_Configure_Channel+0xa0>
    1196:	28 2b       	or	r18, r24
    1198:	24 bb       	out	0x14, r18	; 20
    119a:	08 95       	ret
				{
					CLEAR_BIT(DIO_DDRB_REG,pin);
				}
				else
				{
					SET_BIT(DIO_DDRB_REG,pin);
    119c:	27 b3       	in	r18, 0x17	; 23
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <Dio_Configure_Channel+0xba>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	6a 95       	dec	r22
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <Dio_Configure_Channel+0xb6>
    11ac:	28 2b       	or	r18, r24
    11ae:	27 bb       	out	0x17, r18	; 23
    11b0:	08 95       	ret
			break;

	case DIO_PORTD:
				if (direction == DIO_INPUT)
				{
					CLEAR_BIT(DIO_DDRD_REG,pin);
    11b2:	21 b3       	in	r18, 0x11	; 17
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <Dio_Configure_Channel+0xd0>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	6a 95       	dec	r22
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <Dio_Configure_Channel+0xcc>
    11c2:	80 95       	com	r24
    11c4:	82 23       	and	r24, r18
    11c6:	81 bb       	out	0x11, r24	; 17
    11c8:	08 95       	ret

000011ca <Dio_Write_Channel>:
	}
}

void Dio_Write_Channel(dio_port_t port, dio_pin_t pin , dio_level_t level)
{
	switch (port)
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	29 f1       	breq	.+74     	; 0x1218 <Dio_Write_Channel+0x4e>
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	28 f0       	brcs	.+10     	; 0x11dc <Dio_Write_Channel+0x12>
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	79 f1       	breq	.+94     	; 0x1234 <Dio_Write_Channel+0x6a>
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	81 f0       	breq	.+32     	; 0x11fa <Dio_Write_Channel+0x30>
    11da:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    11dc:	41 30       	cpi	r20, 0x01	; 1
    11de:	09 f4       	brne	.+2      	; 0x11e2 <Dio_Write_Channel+0x18>
    11e0:	4d c0       	rjmp	.+154    	; 0x127c <Dio_Write_Channel+0xb2>
		{
			SET_BIT(DIO_PORTA_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    11e2:	2b b3       	in	r18, 0x1b	; 27
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <Dio_Write_Channel+0x24>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	6a 95       	dec	r22
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <Dio_Write_Channel+0x20>
    11f2:	80 95       	com	r24
    11f4:	82 23       	and	r24, r18
    11f6:	8b bb       	out	0x1b, r24	; 27
    11f8:	08 95       	ret
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
    11fa:	41 30       	cpi	r20, 0x01	; 1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <Dio_Write_Channel+0x36>
    11fe:	49 c0       	rjmp	.+146    	; 0x1292 <Dio_Write_Channel+0xc8>
		{
			SET_BIT(DIO_PORTD_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    1200:	22 b3       	in	r18, 0x12	; 18
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 c0       	rjmp	.+4      	; 0x120c <Dio_Write_Channel+0x42>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	6a 95       	dec	r22
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <Dio_Write_Channel+0x3e>
    1210:	80 95       	com	r24
    1212:	82 23       	and	r24, r18
    1214:	82 bb       	out	0x12, r24	; 18
    1216:	08 95       	ret
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
    1218:	41 30       	cpi	r20, 0x01	; 1
    121a:	29 f1       	breq	.+74     	; 0x1266 <Dio_Write_Channel+0x9c>
		{
			SET_BIT(DIO_PORTB_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    121c:	28 b3       	in	r18, 0x18	; 24
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <Dio_Write_Channel+0x5e>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	6a 95       	dec	r22
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <Dio_Write_Channel+0x5a>
    122c:	80 95       	com	r24
    122e:	82 23       	and	r24, r18
    1230:	88 bb       	out	0x18, r24	; 24
    1232:	08 95       	ret
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
    1234:	41 30       	cpi	r20, 0x01	; 1
    1236:	61 f0       	breq	.+24     	; 0x1250 <Dio_Write_Channel+0x86>
		{
			SET_BIT(DIO_PORTC_REG,pin);
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    1238:	25 b3       	in	r18, 0x15	; 21
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <Dio_Write_Channel+0x7a>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	6a 95       	dec	r22
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <Dio_Write_Channel+0x76>
    1248:	80 95       	com	r24
    124a:	82 23       	and	r24, r18
    124c:	85 bb       	out	0x15, r24	; 21
    124e:	08 95       	ret
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTC_REG,pin);
    1250:	25 b3       	in	r18, 0x15	; 21
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <Dio_Write_Channel+0x92>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	6a 95       	dec	r22
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <Dio_Write_Channel+0x8e>
    1260:	28 2b       	or	r18, r24
    1262:	25 bb       	out	0x15, r18	; 21
    1264:	08 95       	ret
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTB_REG,pin);
    1266:	28 b3       	in	r18, 0x18	; 24
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <Dio_Write_Channel+0xa8>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	6a 95       	dec	r22
    1274:	e2 f7       	brpl	.-8      	; 0x126e <Dio_Write_Channel+0xa4>
    1276:	28 2b       	or	r18, r24
    1278:	28 bb       	out	0x18, r18	; 24
    127a:	08 95       	ret
	switch (port)
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTA_REG,pin);
    127c:	2b b3       	in	r18, 0x1b	; 27
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <Dio_Write_Channel+0xbe>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	6a 95       	dec	r22
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <Dio_Write_Channel+0xba>
    128c:	28 2b       	or	r18, r24
    128e:	2b bb       	out	0x1b, r18	; 27
    1290:	08 95       	ret
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTD_REG,pin);
    1292:	22 b3       	in	r18, 0x12	; 18
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 c0       	rjmp	.+4      	; 0x129e <Dio_Write_Channel+0xd4>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	6a 95       	dec	r22
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <Dio_Write_Channel+0xd0>
    12a2:	28 2b       	or	r18, r24
    12a4:	22 bb       	out	0x12, r18	; 18
    12a6:	08 95       	ret

000012a8 <Dio_Flip_Channel>:
	}
}

void Dio_Flip_Channel(dio_port_t port, dio_pin_t pin)
{
	switch(port)
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	e9 f0       	breq	.+58     	; 0x12e6 <Dio_Flip_Channel+0x3e>
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	28 f0       	brcs	.+10     	; 0x12ba <Dio_Flip_Channel+0x12>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	21 f1       	breq	.+72     	; 0x12fc <Dio_Flip_Channel+0x54>
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	61 f0       	breq	.+24     	; 0x12d0 <Dio_Flip_Channel+0x28>
    12b8:	08 95       	ret
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
    12ba:	2b b3       	in	r18, 0x1b	; 27
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <Dio_Flip_Channel+0x1e>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	6a 95       	dec	r22
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <Dio_Flip_Channel+0x1a>
    12ca:	28 27       	eor	r18, r24
    12cc:	2b bb       	out	0x1b, r18	; 27
    12ce:	08 95       	ret
	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
		break;

	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
    12d0:	22 b3       	in	r18, 0x12	; 18
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <Dio_Flip_Channel+0x34>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	6a 95       	dec	r22
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <Dio_Flip_Channel+0x30>
    12e0:	28 27       	eor	r18, r24
    12e2:	22 bb       	out	0x12, r18	; 18
    12e4:	08 95       	ret
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
		break;

	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
    12e6:	28 b3       	in	r18, 0x18	; 24
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <Dio_Flip_Channel+0x4a>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	6a 95       	dec	r22
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <Dio_Flip_Channel+0x46>
    12f6:	28 27       	eor	r18, r24
    12f8:	28 bb       	out	0x18, r18	; 24
    12fa:	08 95       	ret
		break;

	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
    12fc:	25 b3       	in	r18, 0x15	; 21
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <Dio_Flip_Channel+0x60>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	6a 95       	dec	r22
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <Dio_Flip_Channel+0x5c>
    130c:	28 27       	eor	r18, r24
    130e:	25 bb       	out	0x15, r18	; 21
    1310:	08 95       	ret

00001312 <Dio_Read_Channel>:

dio_level_t Dio_Read_Channel(dio_port_t port, dio_pin_t pin)
{
	dio_level_t loc_result = DIO_LOW;

	switch (port)
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	d1 f0       	breq	.+52     	; 0x134a <Dio_Read_Channel+0x38>
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	30 f0       	brcs	.+12     	; 0x1326 <Dio_Read_Channel+0x14>
    131a:	82 30       	cpi	r24, 0x02	; 2
    131c:	f9 f0       	breq	.+62     	; 0x135c <Dio_Read_Channel+0x4a>
    131e:	83 30       	cpi	r24, 0x03	; 3
    1320:	59 f0       	breq	.+22     	; 0x1338 <Dio_Read_Channel+0x26>
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	08 95       	ret
	{
	case DIO_PORTA:
		loc_result=CHECK_BIT(DIO_PINA_REG,pin);
    1326:	89 b3       	in	r24, 0x19	; 25
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <Dio_Read_Channel+0x1e>
    132c:	95 95       	asr	r25
    132e:	87 95       	ror	r24
    1330:	6a 95       	dec	r22
    1332:	e2 f7       	brpl	.-8      	; 0x132c <Dio_Read_Channel+0x1a>
    1334:	81 70       	andi	r24, 0x01	; 1
    1336:	08 95       	ret
			loc_result = DIO_LOW;
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    1338:	80 b3       	in	r24, 0x10	; 16
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <Dio_Read_Channel+0x30>
    133e:	95 95       	asr	r25
    1340:	87 95       	ror	r24
    1342:	6a 95       	dec	r22
    1344:	e2 f7       	brpl	.-8      	; 0x133e <Dio_Read_Channel+0x2c>
    1346:	81 70       	andi	r24, 0x01	; 1
			loc_result = DIO_LOW;
		}
		break;
	}
	return loc_result;
}
    1348:	08 95       	ret
//			loc_result = DIO_LOW;
//		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    134a:	86 b3       	in	r24, 0x16	; 22
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <Dio_Read_Channel+0x42>
    1350:	95 95       	asr	r25
    1352:	87 95       	ror	r24
    1354:	6a 95       	dec	r22
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <Dio_Read_Channel+0x3e>
    1358:	81 70       	andi	r24, 0x01	; 1
    135a:	08 95       	ret
			loc_result = DIO_LOW;
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    135c:	83 b3       	in	r24, 0x13	; 19
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <Dio_Read_Channel+0x54>
    1362:	95 95       	asr	r25
    1364:	87 95       	ror	r24
    1366:	6a 95       	dec	r22
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <Dio_Read_Channel+0x50>
    136a:	81 70       	andi	r24, 0x01	; 1
    136c:	08 95       	ret

0000136e <Dio_Write_Channel_Group>:



void Dio_Write_Channel_Group(dio_port_t port,u8 mask,u8 data)
{
	switch (port)
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	a9 f0       	breq	.+42     	; 0x139c <Dio_Write_Channel_Group+0x2e>
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	28 f0       	brcs	.+10     	; 0x1380 <Dio_Write_Channel_Group+0x12>
    1376:	82 30       	cpi	r24, 0x02	; 2
    1378:	c1 f0       	breq	.+48     	; 0x13aa <Dio_Write_Channel_Group+0x3c>
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	41 f0       	breq	.+16     	; 0x138e <Dio_Write_Channel_Group+0x20>
    137e:	08 95       	ret
	{
		case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data&mask);
    1380:	8b b3       	in	r24, 0x1b	; 27
    1382:	46 23       	and	r20, r22
    1384:	60 95       	com	r22
    1386:	86 23       	and	r24, r22
    1388:	84 2b       	or	r24, r20
    138a:	8b bb       	out	0x1b, r24	; 27
    138c:	08 95       	ret
		case DIO_PORTC:
			DIO_PORTC_REG = (DIO_PORTC_REG&~mask)|(data&mask);
		break;

		case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG&~mask)|(data&mask);
    138e:	82 b3       	in	r24, 0x12	; 18
    1390:	46 23       	and	r20, r22
    1392:	60 95       	com	r22
    1394:	86 23       	and	r24, r22
    1396:	84 2b       	or	r24, r20
    1398:	82 bb       	out	0x12, r24	; 18
    139a:	08 95       	ret
		case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data&mask);
		break;

		case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG&~mask)|(data&mask);
    139c:	88 b3       	in	r24, 0x18	; 24
    139e:	46 23       	and	r20, r22
    13a0:	60 95       	com	r22
    13a2:	86 23       	and	r24, r22
    13a4:	84 2b       	or	r24, r20
    13a6:	88 bb       	out	0x18, r24	; 24
    13a8:	08 95       	ret
		break;

		case DIO_PORTC:
			DIO_PORTC_REG = (DIO_PORTC_REG&~mask)|(data&mask);
    13aa:	85 b3       	in	r24, 0x15	; 21
    13ac:	46 23       	and	r20, r22
    13ae:	60 95       	com	r22
    13b0:	86 23       	and	r24, r22
    13b2:	84 2b       	or	r24, r20
    13b4:	85 bb       	out	0x15, r24	; 21
    13b6:	08 95       	ret

000013b8 <Dio_PullUp_Enable>:
	}
}

void Dio_Write_Channel(dio_port_t port, dio_pin_t pin , dio_level_t level)
{
	switch (port)
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	e9 f0       	breq	.+58     	; 0x13f6 <Dio_PullUp_Enable+0x3e>
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	28 f0       	brcs	.+10     	; 0x13ca <Dio_PullUp_Enable+0x12>
    13c0:	82 30       	cpi	r24, 0x02	; 2
    13c2:	21 f1       	breq	.+72     	; 0x140c <Dio_PullUp_Enable+0x54>
    13c4:	83 30       	cpi	r24, 0x03	; 3
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <Dio_PullUp_Enable+0x28>
    13c8:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTA_REG,pin);
    13ca:	2b b3       	in	r18, 0x1b	; 27
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <Dio_PullUp_Enable+0x1e>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	6a 95       	dec	r22
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <Dio_PullUp_Enable+0x1a>
    13da:	28 2b       	or	r18, r24
    13dc:	2b bb       	out	0x1b, r18	; 27
    13de:	08 95       	ret
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTD_REG,pin);
    13e0:	22 b3       	in	r18, 0x12	; 18
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <Dio_PullUp_Enable+0x34>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	6a 95       	dec	r22
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <Dio_PullUp_Enable+0x30>
    13f0:	28 2b       	or	r18, r24
    13f2:	22 bb       	out	0x12, r18	; 18
    13f4:	08 95       	ret
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTB_REG,pin);
    13f6:	28 b3       	in	r18, 0x18	; 24
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <Dio_PullUp_Enable+0x4a>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	6a 95       	dec	r22
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <Dio_PullUp_Enable+0x46>
    1406:	28 2b       	or	r18, r24
    1408:	28 bb       	out	0x18, r18	; 24
    140a:	08 95       	ret
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
		{
			SET_BIT(DIO_PORTC_REG,pin);
    140c:	25 b3       	in	r18, 0x15	; 21
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <Dio_PullUp_Enable+0x60>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	6a 95       	dec	r22
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <Dio_PullUp_Enable+0x5c>
    141c:	28 2b       	or	r18, r24
    141e:	25 bb       	out	0x15, r18	; 21
    1420:	08 95       	ret

00001422 <__udivmodqi4>:
    1422:	99 1b       	sub	r25, r25
    1424:	79 e0       	ldi	r23, 0x09	; 9
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <__udivmodqi4_ep>

00001428 <__udivmodqi4_loop>:
    1428:	99 1f       	adc	r25, r25
    142a:	96 17       	cp	r25, r22
    142c:	08 f0       	brcs	.+2      	; 0x1430 <__udivmodqi4_ep>
    142e:	96 1b       	sub	r25, r22

00001430 <__udivmodqi4_ep>:
    1430:	88 1f       	adc	r24, r24
    1432:	7a 95       	dec	r23
    1434:	c9 f7       	brne	.-14     	; 0x1428 <__udivmodqi4_loop>
    1436:	80 95       	com	r24
    1438:	08 95       	ret

0000143a <sprintf>:
    143a:	ae e0       	ldi	r26, 0x0E	; 14
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e3 e2       	ldi	r30, 0x23	; 35
    1440:	fa e0       	ldi	r31, 0x0A	; 10
    1442:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__prologue_saves__+0x1c>
    1446:	0d 89       	ldd	r16, Y+21	; 0x15
    1448:	1e 89       	ldd	r17, Y+22	; 0x16
    144a:	86 e0       	ldi	r24, 0x06	; 6
    144c:	8c 83       	std	Y+4, r24	; 0x04
    144e:	1a 83       	std	Y+2, r17	; 0x02
    1450:	09 83       	std	Y+1, r16	; 0x01
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	9f e7       	ldi	r25, 0x7F	; 127
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	8d 83       	std	Y+5, r24	; 0x05
    145a:	9e 01       	movw	r18, r28
    145c:	27 5e       	subi	r18, 0xE7	; 231
    145e:	3f 4f       	sbci	r19, 0xFF	; 255
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	6f 89       	ldd	r22, Y+23	; 0x17
    1466:	78 8d       	ldd	r23, Y+24	; 0x18
    1468:	a9 01       	movw	r20, r18
    146a:	0e 94 41 0a 	call	0x1482	; 0x1482 <vfprintf>
    146e:	2f 81       	ldd	r18, Y+7	; 0x07
    1470:	38 85       	ldd	r19, Y+8	; 0x08
    1472:	02 0f       	add	r16, r18
    1474:	13 1f       	adc	r17, r19
    1476:	f8 01       	movw	r30, r16
    1478:	10 82       	st	Z, r1
    147a:	2e 96       	adiw	r28, 0x0e	; 14
    147c:	e4 e0       	ldi	r30, 0x04	; 4
    147e:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__epilogue_restores__+0x1c>

00001482 <vfprintf>:
    1482:	ab e0       	ldi	r26, 0x0B	; 11
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e7 e4       	ldi	r30, 0x47	; 71
    1488:	fa e0       	ldi	r31, 0x0A	; 10
    148a:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__prologue_saves__>
    148e:	3c 01       	movw	r6, r24
    1490:	2b 01       	movw	r4, r22
    1492:	5a 01       	movw	r10, r20
    1494:	fc 01       	movw	r30, r24
    1496:	17 82       	std	Z+7, r1	; 0x07
    1498:	16 82       	std	Z+6, r1	; 0x06
    149a:	83 81       	ldd	r24, Z+3	; 0x03
    149c:	81 fd       	sbrc	r24, 1
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <vfprintf+0x24>
    14a0:	6f ef       	ldi	r22, 0xFF	; 255
    14a2:	7f ef       	ldi	r23, 0xFF	; 255
    14a4:	c6 c1       	rjmp	.+908    	; 0x1832 <vfprintf+0x3b0>
    14a6:	9a e0       	ldi	r25, 0x0A	; 10
    14a8:	89 2e       	mov	r8, r25
    14aa:	1e 01       	movw	r2, r28
    14ac:	08 94       	sec
    14ae:	21 1c       	adc	r2, r1
    14b0:	31 1c       	adc	r3, r1
    14b2:	f3 01       	movw	r30, r6
    14b4:	23 81       	ldd	r18, Z+3	; 0x03
    14b6:	f2 01       	movw	r30, r4
    14b8:	23 fd       	sbrc	r18, 3
    14ba:	85 91       	lpm	r24, Z+
    14bc:	23 ff       	sbrs	r18, 3
    14be:	81 91       	ld	r24, Z+
    14c0:	2f 01       	movw	r4, r30
    14c2:	88 23       	and	r24, r24
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <vfprintf+0x46>
    14c6:	b2 c1       	rjmp	.+868    	; 0x182c <vfprintf+0x3aa>
    14c8:	85 32       	cpi	r24, 0x25	; 37
    14ca:	39 f4       	brne	.+14     	; 0x14da <vfprintf+0x58>
    14cc:	23 fd       	sbrc	r18, 3
    14ce:	85 91       	lpm	r24, Z+
    14d0:	23 ff       	sbrs	r18, 3
    14d2:	81 91       	ld	r24, Z+
    14d4:	2f 01       	movw	r4, r30
    14d6:	85 32       	cpi	r24, 0x25	; 37
    14d8:	29 f4       	brne	.+10     	; 0x14e4 <vfprintf+0x62>
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	b3 01       	movw	r22, r6
    14de:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputc>
    14e2:	e7 cf       	rjmp	.-50     	; 0x14b2 <vfprintf+0x30>
    14e4:	98 2f       	mov	r25, r24
    14e6:	ff 24       	eor	r15, r15
    14e8:	ee 24       	eor	r14, r14
    14ea:	99 24       	eor	r9, r9
    14ec:	ff e1       	ldi	r31, 0x1F	; 31
    14ee:	ff 15       	cp	r31, r15
    14f0:	d0 f0       	brcs	.+52     	; 0x1526 <vfprintf+0xa4>
    14f2:	9b 32       	cpi	r25, 0x2B	; 43
    14f4:	69 f0       	breq	.+26     	; 0x1510 <vfprintf+0x8e>
    14f6:	9c 32       	cpi	r25, 0x2C	; 44
    14f8:	28 f4       	brcc	.+10     	; 0x1504 <vfprintf+0x82>
    14fa:	90 32       	cpi	r25, 0x20	; 32
    14fc:	59 f0       	breq	.+22     	; 0x1514 <vfprintf+0x92>
    14fe:	93 32       	cpi	r25, 0x23	; 35
    1500:	91 f4       	brne	.+36     	; 0x1526 <vfprintf+0xa4>
    1502:	0e c0       	rjmp	.+28     	; 0x1520 <vfprintf+0x9e>
    1504:	9d 32       	cpi	r25, 0x2D	; 45
    1506:	49 f0       	breq	.+18     	; 0x151a <vfprintf+0x98>
    1508:	90 33       	cpi	r25, 0x30	; 48
    150a:	69 f4       	brne	.+26     	; 0x1526 <vfprintf+0xa4>
    150c:	41 e0       	ldi	r20, 0x01	; 1
    150e:	24 c0       	rjmp	.+72     	; 0x1558 <vfprintf+0xd6>
    1510:	52 e0       	ldi	r21, 0x02	; 2
    1512:	f5 2a       	or	r15, r21
    1514:	84 e0       	ldi	r24, 0x04	; 4
    1516:	f8 2a       	or	r15, r24
    1518:	28 c0       	rjmp	.+80     	; 0x156a <vfprintf+0xe8>
    151a:	98 e0       	ldi	r25, 0x08	; 8
    151c:	f9 2a       	or	r15, r25
    151e:	25 c0       	rjmp	.+74     	; 0x156a <vfprintf+0xe8>
    1520:	e0 e1       	ldi	r30, 0x10	; 16
    1522:	fe 2a       	or	r15, r30
    1524:	22 c0       	rjmp	.+68     	; 0x156a <vfprintf+0xe8>
    1526:	f7 fc       	sbrc	r15, 7
    1528:	29 c0       	rjmp	.+82     	; 0x157c <vfprintf+0xfa>
    152a:	89 2f       	mov	r24, r25
    152c:	80 53       	subi	r24, 0x30	; 48
    152e:	8a 30       	cpi	r24, 0x0A	; 10
    1530:	70 f4       	brcc	.+28     	; 0x154e <vfprintf+0xcc>
    1532:	f6 fe       	sbrs	r15, 6
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <vfprintf+0xbe>
    1536:	98 9c       	mul	r9, r8
    1538:	90 2c       	mov	r9, r0
    153a:	11 24       	eor	r1, r1
    153c:	98 0e       	add	r9, r24
    153e:	15 c0       	rjmp	.+42     	; 0x156a <vfprintf+0xe8>
    1540:	e8 9c       	mul	r14, r8
    1542:	e0 2c       	mov	r14, r0
    1544:	11 24       	eor	r1, r1
    1546:	e8 0e       	add	r14, r24
    1548:	f0 e2       	ldi	r31, 0x20	; 32
    154a:	ff 2a       	or	r15, r31
    154c:	0e c0       	rjmp	.+28     	; 0x156a <vfprintf+0xe8>
    154e:	9e 32       	cpi	r25, 0x2E	; 46
    1550:	29 f4       	brne	.+10     	; 0x155c <vfprintf+0xda>
    1552:	f6 fc       	sbrc	r15, 6
    1554:	6b c1       	rjmp	.+726    	; 0x182c <vfprintf+0x3aa>
    1556:	40 e4       	ldi	r20, 0x40	; 64
    1558:	f4 2a       	or	r15, r20
    155a:	07 c0       	rjmp	.+14     	; 0x156a <vfprintf+0xe8>
    155c:	9c 36       	cpi	r25, 0x6C	; 108
    155e:	19 f4       	brne	.+6      	; 0x1566 <vfprintf+0xe4>
    1560:	50 e8       	ldi	r21, 0x80	; 128
    1562:	f5 2a       	or	r15, r21
    1564:	02 c0       	rjmp	.+4      	; 0x156a <vfprintf+0xe8>
    1566:	98 36       	cpi	r25, 0x68	; 104
    1568:	49 f4       	brne	.+18     	; 0x157c <vfprintf+0xfa>
    156a:	f2 01       	movw	r30, r4
    156c:	23 fd       	sbrc	r18, 3
    156e:	95 91       	lpm	r25, Z+
    1570:	23 ff       	sbrs	r18, 3
    1572:	91 91       	ld	r25, Z+
    1574:	2f 01       	movw	r4, r30
    1576:	99 23       	and	r25, r25
    1578:	09 f0       	breq	.+2      	; 0x157c <vfprintf+0xfa>
    157a:	b8 cf       	rjmp	.-144    	; 0x14ec <vfprintf+0x6a>
    157c:	89 2f       	mov	r24, r25
    157e:	85 54       	subi	r24, 0x45	; 69
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	18 f0       	brcs	.+6      	; 0x158a <vfprintf+0x108>
    1584:	80 52       	subi	r24, 0x20	; 32
    1586:	83 30       	cpi	r24, 0x03	; 3
    1588:	38 f4       	brcc	.+14     	; 0x1598 <vfprintf+0x116>
    158a:	44 e0       	ldi	r20, 0x04	; 4
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	a4 0e       	add	r10, r20
    1590:	b5 1e       	adc	r11, r21
    1592:	5f e3       	ldi	r21, 0x3F	; 63
    1594:	59 83       	std	Y+1, r21	; 0x01
    1596:	0f c0       	rjmp	.+30     	; 0x15b6 <vfprintf+0x134>
    1598:	93 36       	cpi	r25, 0x63	; 99
    159a:	31 f0       	breq	.+12     	; 0x15a8 <vfprintf+0x126>
    159c:	93 37       	cpi	r25, 0x73	; 115
    159e:	79 f0       	breq	.+30     	; 0x15be <vfprintf+0x13c>
    15a0:	93 35       	cpi	r25, 0x53	; 83
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <vfprintf+0x124>
    15a4:	56 c0       	rjmp	.+172    	; 0x1652 <vfprintf+0x1d0>
    15a6:	20 c0       	rjmp	.+64     	; 0x15e8 <vfprintf+0x166>
    15a8:	f5 01       	movw	r30, r10
    15aa:	80 81       	ld	r24, Z
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	42 e0       	ldi	r20, 0x02	; 2
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	a4 0e       	add	r10, r20
    15b4:	b5 1e       	adc	r11, r21
    15b6:	61 01       	movw	r12, r2
    15b8:	01 e0       	ldi	r16, 0x01	; 1
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	12 c0       	rjmp	.+36     	; 0x15e2 <vfprintf+0x160>
    15be:	f5 01       	movw	r30, r10
    15c0:	c0 80       	ld	r12, Z
    15c2:	d1 80       	ldd	r13, Z+1	; 0x01
    15c4:	f6 fc       	sbrc	r15, 6
    15c6:	03 c0       	rjmp	.+6      	; 0x15ce <vfprintf+0x14c>
    15c8:	6f ef       	ldi	r22, 0xFF	; 255
    15ca:	7f ef       	ldi	r23, 0xFF	; 255
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <vfprintf+0x150>
    15ce:	69 2d       	mov	r22, r9
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	42 e0       	ldi	r20, 0x02	; 2
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	a4 0e       	add	r10, r20
    15d8:	b5 1e       	adc	r11, r21
    15da:	c6 01       	movw	r24, r12
    15dc:	0e 94 29 0c 	call	0x1852	; 0x1852 <strnlen>
    15e0:	8c 01       	movw	r16, r24
    15e2:	5f e7       	ldi	r21, 0x7F	; 127
    15e4:	f5 22       	and	r15, r21
    15e6:	14 c0       	rjmp	.+40     	; 0x1610 <vfprintf+0x18e>
    15e8:	f5 01       	movw	r30, r10
    15ea:	c0 80       	ld	r12, Z
    15ec:	d1 80       	ldd	r13, Z+1	; 0x01
    15ee:	f6 fc       	sbrc	r15, 6
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <vfprintf+0x176>
    15f2:	6f ef       	ldi	r22, 0xFF	; 255
    15f4:	7f ef       	ldi	r23, 0xFF	; 255
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <vfprintf+0x17a>
    15f8:	69 2d       	mov	r22, r9
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	42 e0       	ldi	r20, 0x02	; 2
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	a4 0e       	add	r10, r20
    1602:	b5 1e       	adc	r11, r21
    1604:	c6 01       	movw	r24, r12
    1606:	0e 94 1e 0c 	call	0x183c	; 0x183c <strnlen_P>
    160a:	8c 01       	movw	r16, r24
    160c:	50 e8       	ldi	r21, 0x80	; 128
    160e:	f5 2a       	or	r15, r21
    1610:	f3 fe       	sbrs	r15, 3
    1612:	07 c0       	rjmp	.+14     	; 0x1622 <vfprintf+0x1a0>
    1614:	1a c0       	rjmp	.+52     	; 0x164a <vfprintf+0x1c8>
    1616:	80 e2       	ldi	r24, 0x20	; 32
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	b3 01       	movw	r22, r6
    161c:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputc>
    1620:	ea 94       	dec	r14
    1622:	8e 2d       	mov	r24, r14
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	08 17       	cp	r16, r24
    1628:	19 07       	cpc	r17, r25
    162a:	a8 f3       	brcs	.-22     	; 0x1616 <vfprintf+0x194>
    162c:	0e c0       	rjmp	.+28     	; 0x164a <vfprintf+0x1c8>
    162e:	f6 01       	movw	r30, r12
    1630:	f7 fc       	sbrc	r15, 7
    1632:	85 91       	lpm	r24, Z+
    1634:	f7 fe       	sbrs	r15, 7
    1636:	81 91       	ld	r24, Z+
    1638:	6f 01       	movw	r12, r30
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	b3 01       	movw	r22, r6
    163e:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputc>
    1642:	e1 10       	cpse	r14, r1
    1644:	ea 94       	dec	r14
    1646:	01 50       	subi	r16, 0x01	; 1
    1648:	10 40       	sbci	r17, 0x00	; 0
    164a:	01 15       	cp	r16, r1
    164c:	11 05       	cpc	r17, r1
    164e:	79 f7       	brne	.-34     	; 0x162e <vfprintf+0x1ac>
    1650:	ea c0       	rjmp	.+468    	; 0x1826 <vfprintf+0x3a4>
    1652:	94 36       	cpi	r25, 0x64	; 100
    1654:	11 f0       	breq	.+4      	; 0x165a <vfprintf+0x1d8>
    1656:	99 36       	cpi	r25, 0x69	; 105
    1658:	69 f5       	brne	.+90     	; 0x16b4 <vfprintf+0x232>
    165a:	f7 fe       	sbrs	r15, 7
    165c:	08 c0       	rjmp	.+16     	; 0x166e <vfprintf+0x1ec>
    165e:	f5 01       	movw	r30, r10
    1660:	20 81       	ld	r18, Z
    1662:	31 81       	ldd	r19, Z+1	; 0x01
    1664:	42 81       	ldd	r20, Z+2	; 0x02
    1666:	53 81       	ldd	r21, Z+3	; 0x03
    1668:	84 e0       	ldi	r24, 0x04	; 4
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0a c0       	rjmp	.+20     	; 0x1682 <vfprintf+0x200>
    166e:	f5 01       	movw	r30, r10
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	9c 01       	movw	r18, r24
    1676:	44 27       	eor	r20, r20
    1678:	37 fd       	sbrc	r19, 7
    167a:	40 95       	com	r20
    167c:	54 2f       	mov	r21, r20
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	a8 0e       	add	r10, r24
    1684:	b9 1e       	adc	r11, r25
    1686:	9f e6       	ldi	r25, 0x6F	; 111
    1688:	f9 22       	and	r15, r25
    168a:	57 ff       	sbrs	r21, 7
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <vfprintf+0x21e>
    168e:	50 95       	com	r21
    1690:	40 95       	com	r20
    1692:	30 95       	com	r19
    1694:	21 95       	neg	r18
    1696:	3f 4f       	sbci	r19, 0xFF	; 255
    1698:	4f 4f       	sbci	r20, 0xFF	; 255
    169a:	5f 4f       	sbci	r21, 0xFF	; 255
    169c:	e0 e8       	ldi	r30, 0x80	; 128
    169e:	fe 2a       	or	r15, r30
    16a0:	ca 01       	movw	r24, r20
    16a2:	b9 01       	movw	r22, r18
    16a4:	a1 01       	movw	r20, r2
    16a6:	2a e0       	ldi	r18, 0x0A	; 10
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__ultoa_invert>
    16ae:	d8 2e       	mov	r13, r24
    16b0:	d2 18       	sub	r13, r2
    16b2:	40 c0       	rjmp	.+128    	; 0x1734 <vfprintf+0x2b2>
    16b4:	95 37       	cpi	r25, 0x75	; 117
    16b6:	29 f4       	brne	.+10     	; 0x16c2 <vfprintf+0x240>
    16b8:	1f 2d       	mov	r17, r15
    16ba:	1f 7e       	andi	r17, 0xEF	; 239
    16bc:	2a e0       	ldi	r18, 0x0A	; 10
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	1d c0       	rjmp	.+58     	; 0x16fc <vfprintf+0x27a>
    16c2:	1f 2d       	mov	r17, r15
    16c4:	19 7f       	andi	r17, 0xF9	; 249
    16c6:	9f 36       	cpi	r25, 0x6F	; 111
    16c8:	61 f0       	breq	.+24     	; 0x16e2 <vfprintf+0x260>
    16ca:	90 37       	cpi	r25, 0x70	; 112
    16cc:	20 f4       	brcc	.+8      	; 0x16d6 <vfprintf+0x254>
    16ce:	98 35       	cpi	r25, 0x58	; 88
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <vfprintf+0x252>
    16d2:	ac c0       	rjmp	.+344    	; 0x182c <vfprintf+0x3aa>
    16d4:	0f c0       	rjmp	.+30     	; 0x16f4 <vfprintf+0x272>
    16d6:	90 37       	cpi	r25, 0x70	; 112
    16d8:	39 f0       	breq	.+14     	; 0x16e8 <vfprintf+0x266>
    16da:	98 37       	cpi	r25, 0x78	; 120
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <vfprintf+0x25e>
    16de:	a6 c0       	rjmp	.+332    	; 0x182c <vfprintf+0x3aa>
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <vfprintf+0x268>
    16e2:	28 e0       	ldi	r18, 0x08	; 8
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	0a c0       	rjmp	.+20     	; 0x16fc <vfprintf+0x27a>
    16e8:	10 61       	ori	r17, 0x10	; 16
    16ea:	14 fd       	sbrc	r17, 4
    16ec:	14 60       	ori	r17, 0x04	; 4
    16ee:	20 e1       	ldi	r18, 0x10	; 16
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	04 c0       	rjmp	.+8      	; 0x16fc <vfprintf+0x27a>
    16f4:	14 fd       	sbrc	r17, 4
    16f6:	16 60       	ori	r17, 0x06	; 6
    16f8:	20 e1       	ldi	r18, 0x10	; 16
    16fa:	32 e0       	ldi	r19, 0x02	; 2
    16fc:	17 ff       	sbrs	r17, 7
    16fe:	08 c0       	rjmp	.+16     	; 0x1710 <vfprintf+0x28e>
    1700:	f5 01       	movw	r30, r10
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	44 e0       	ldi	r20, 0x04	; 4
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	08 c0       	rjmp	.+16     	; 0x1720 <vfprintf+0x29e>
    1710:	f5 01       	movw	r30, r10
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	bc 01       	movw	r22, r24
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	42 e0       	ldi	r20, 0x02	; 2
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	a4 0e       	add	r10, r20
    1722:	b5 1e       	adc	r11, r21
    1724:	a1 01       	movw	r20, r2
    1726:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__ultoa_invert>
    172a:	d8 2e       	mov	r13, r24
    172c:	d2 18       	sub	r13, r2
    172e:	8f e7       	ldi	r24, 0x7F	; 127
    1730:	f8 2e       	mov	r15, r24
    1732:	f1 22       	and	r15, r17
    1734:	f6 fe       	sbrs	r15, 6
    1736:	0b c0       	rjmp	.+22     	; 0x174e <vfprintf+0x2cc>
    1738:	5e ef       	ldi	r21, 0xFE	; 254
    173a:	f5 22       	and	r15, r21
    173c:	d9 14       	cp	r13, r9
    173e:	38 f4       	brcc	.+14     	; 0x174e <vfprintf+0x2cc>
    1740:	f4 fe       	sbrs	r15, 4
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <vfprintf+0x2d0>
    1744:	f2 fc       	sbrc	r15, 2
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <vfprintf+0x2d0>
    1748:	8f ee       	ldi	r24, 0xEF	; 239
    174a:	f8 22       	and	r15, r24
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <vfprintf+0x2d0>
    174e:	1d 2d       	mov	r17, r13
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <vfprintf+0x2d2>
    1752:	19 2d       	mov	r17, r9
    1754:	f4 fe       	sbrs	r15, 4
    1756:	0d c0       	rjmp	.+26     	; 0x1772 <vfprintf+0x2f0>
    1758:	fe 01       	movw	r30, r28
    175a:	ed 0d       	add	r30, r13
    175c:	f1 1d       	adc	r31, r1
    175e:	80 81       	ld	r24, Z
    1760:	80 33       	cpi	r24, 0x30	; 48
    1762:	19 f4       	brne	.+6      	; 0x176a <vfprintf+0x2e8>
    1764:	99 ee       	ldi	r25, 0xE9	; 233
    1766:	f9 22       	and	r15, r25
    1768:	08 c0       	rjmp	.+16     	; 0x177a <vfprintf+0x2f8>
    176a:	1f 5f       	subi	r17, 0xFF	; 255
    176c:	f2 fe       	sbrs	r15, 2
    176e:	05 c0       	rjmp	.+10     	; 0x177a <vfprintf+0x2f8>
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <vfprintf+0x2f6>
    1772:	8f 2d       	mov	r24, r15
    1774:	86 78       	andi	r24, 0x86	; 134
    1776:	09 f0       	breq	.+2      	; 0x177a <vfprintf+0x2f8>
    1778:	1f 5f       	subi	r17, 0xFF	; 255
    177a:	0f 2d       	mov	r16, r15
    177c:	f3 fc       	sbrc	r15, 3
    177e:	14 c0       	rjmp	.+40     	; 0x17a8 <vfprintf+0x326>
    1780:	f0 fe       	sbrs	r15, 0
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <vfprintf+0x320>
    1784:	1e 15       	cp	r17, r14
    1786:	10 f0       	brcs	.+4      	; 0x178c <vfprintf+0x30a>
    1788:	9d 2c       	mov	r9, r13
    178a:	0b c0       	rjmp	.+22     	; 0x17a2 <vfprintf+0x320>
    178c:	9d 2c       	mov	r9, r13
    178e:	9e 0c       	add	r9, r14
    1790:	91 1a       	sub	r9, r17
    1792:	1e 2d       	mov	r17, r14
    1794:	06 c0       	rjmp	.+12     	; 0x17a2 <vfprintf+0x320>
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	b3 01       	movw	r22, r6
    179c:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputc>
    17a0:	1f 5f       	subi	r17, 0xFF	; 255
    17a2:	1e 15       	cp	r17, r14
    17a4:	c0 f3       	brcs	.-16     	; 0x1796 <vfprintf+0x314>
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <vfprintf+0x32e>
    17a8:	1e 15       	cp	r17, r14
    17aa:	10 f4       	brcc	.+4      	; 0x17b0 <vfprintf+0x32e>
    17ac:	e1 1a       	sub	r14, r17
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <vfprintf+0x330>
    17b0:	ee 24       	eor	r14, r14
    17b2:	04 ff       	sbrs	r16, 4
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <vfprintf+0x352>
    17b6:	80 e3       	ldi	r24, 0x30	; 48
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	b3 01       	movw	r22, r6
    17bc:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputc>
    17c0:	02 ff       	sbrs	r16, 2
    17c2:	1d c0       	rjmp	.+58     	; 0x17fe <vfprintf+0x37c>
    17c4:	01 fd       	sbrc	r16, 1
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <vfprintf+0x34c>
    17c8:	88 e7       	ldi	r24, 0x78	; 120
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e c0       	rjmp	.+28     	; 0x17ea <vfprintf+0x368>
    17ce:	88 e5       	ldi	r24, 0x58	; 88
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0b c0       	rjmp	.+22     	; 0x17ea <vfprintf+0x368>
    17d4:	80 2f       	mov	r24, r16
    17d6:	86 78       	andi	r24, 0x86	; 134
    17d8:	91 f0       	breq	.+36     	; 0x17fe <vfprintf+0x37c>
    17da:	01 ff       	sbrs	r16, 1
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x360>
    17de:	8b e2       	ldi	r24, 0x2B	; 43
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <vfprintf+0x362>
    17e2:	80 e2       	ldi	r24, 0x20	; 32
    17e4:	f7 fc       	sbrc	r15, 7
    17e6:	8d e2       	ldi	r24, 0x2D	; 45
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	b3 01       	movw	r22, r6
    17ec:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputc>
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <vfprintf+0x37c>
    17f2:	80 e3       	ldi	r24, 0x30	; 48
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	b3 01       	movw	r22, r6
    17f8:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputc>
    17fc:	9a 94       	dec	r9
    17fe:	d9 14       	cp	r13, r9
    1800:	c0 f3       	brcs	.-16     	; 0x17f2 <vfprintf+0x370>
    1802:	da 94       	dec	r13
    1804:	f1 01       	movw	r30, r2
    1806:	ed 0d       	add	r30, r13
    1808:	f1 1d       	adc	r31, r1
    180a:	80 81       	ld	r24, Z
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	b3 01       	movw	r22, r6
    1810:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputc>
    1814:	dd 20       	and	r13, r13
    1816:	a9 f7       	brne	.-22     	; 0x1802 <vfprintf+0x380>
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <vfprintf+0x3a4>
    181a:	80 e2       	ldi	r24, 0x20	; 32
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	b3 01       	movw	r22, r6
    1820:	0e 94 34 0c 	call	0x1868	; 0x1868 <fputc>
    1824:	ea 94       	dec	r14
    1826:	ee 20       	and	r14, r14
    1828:	c1 f7       	brne	.-16     	; 0x181a <vfprintf+0x398>
    182a:	43 ce       	rjmp	.-890    	; 0x14b2 <vfprintf+0x30>
    182c:	f3 01       	movw	r30, r6
    182e:	66 81       	ldd	r22, Z+6	; 0x06
    1830:	77 81       	ldd	r23, Z+7	; 0x07
    1832:	cb 01       	movw	r24, r22
    1834:	2b 96       	adiw	r28, 0x0b	; 11
    1836:	e2 e1       	ldi	r30, 0x12	; 18
    1838:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__epilogue_restores__>

0000183c <strnlen_P>:
    183c:	fc 01       	movw	r30, r24
    183e:	05 90       	lpm	r0, Z+
    1840:	61 50       	subi	r22, 0x01	; 1
    1842:	70 40       	sbci	r23, 0x00	; 0
    1844:	01 10       	cpse	r0, r1
    1846:	d8 f7       	brcc	.-10     	; 0x183e <strnlen_P+0x2>
    1848:	80 95       	com	r24
    184a:	90 95       	com	r25
    184c:	8e 0f       	add	r24, r30
    184e:	9f 1f       	adc	r25, r31
    1850:	08 95       	ret

00001852 <strnlen>:
    1852:	fc 01       	movw	r30, r24
    1854:	61 50       	subi	r22, 0x01	; 1
    1856:	70 40       	sbci	r23, 0x00	; 0
    1858:	01 90       	ld	r0, Z+
    185a:	01 10       	cpse	r0, r1
    185c:	d8 f7       	brcc	.-10     	; 0x1854 <strnlen+0x2>
    185e:	80 95       	com	r24
    1860:	90 95       	com	r25
    1862:	8e 0f       	add	r24, r30
    1864:	9f 1f       	adc	r25, r31
    1866:	08 95       	ret

00001868 <fputc>:
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	8c 01       	movw	r16, r24
    1872:	eb 01       	movw	r28, r22
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	81 ff       	sbrs	r24, 1
    1878:	1b c0       	rjmp	.+54     	; 0x18b0 <fputc+0x48>
    187a:	82 ff       	sbrs	r24, 2
    187c:	0d c0       	rjmp	.+26     	; 0x1898 <fputc+0x30>
    187e:	2e 81       	ldd	r18, Y+6	; 0x06
    1880:	3f 81       	ldd	r19, Y+7	; 0x07
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	28 17       	cp	r18, r24
    1888:	39 07       	cpc	r19, r25
    188a:	64 f4       	brge	.+24     	; 0x18a4 <fputc+0x3c>
    188c:	e8 81       	ld	r30, Y
    188e:	f9 81       	ldd	r31, Y+1	; 0x01
    1890:	01 93       	st	Z+, r16
    1892:	f9 83       	std	Y+1, r31	; 0x01
    1894:	e8 83       	st	Y, r30
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <fputc+0x3c>
    1898:	e8 85       	ldd	r30, Y+8	; 0x08
    189a:	f9 85       	ldd	r31, Y+9	; 0x09
    189c:	80 2f       	mov	r24, r16
    189e:	09 95       	icall
    18a0:	89 2b       	or	r24, r25
    18a2:	31 f4       	brne	.+12     	; 0x18b0 <fputc+0x48>
    18a4:	8e 81       	ldd	r24, Y+6	; 0x06
    18a6:	9f 81       	ldd	r25, Y+7	; 0x07
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	9f 83       	std	Y+7, r25	; 0x07
    18ac:	8e 83       	std	Y+6, r24	; 0x06
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <fputc+0x4c>
    18b0:	0f ef       	ldi	r16, 0xFF	; 255
    18b2:	1f ef       	ldi	r17, 0xFF	; 255
    18b4:	c8 01       	movw	r24, r16
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	08 95       	ret

000018c0 <__ultoa_invert>:
    18c0:	fa 01       	movw	r30, r20
    18c2:	aa 27       	eor	r26, r26
    18c4:	28 30       	cpi	r18, 0x08	; 8
    18c6:	51 f1       	breq	.+84     	; 0x191c <__ultoa_invert+0x5c>
    18c8:	20 31       	cpi	r18, 0x10	; 16
    18ca:	81 f1       	breq	.+96     	; 0x192c <__ultoa_invert+0x6c>
    18cc:	e8 94       	clt
    18ce:	6f 93       	push	r22
    18d0:	6e 7f       	andi	r22, 0xFE	; 254
    18d2:	6e 5f       	subi	r22, 0xFE	; 254
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	8f 4f       	sbci	r24, 0xFF	; 255
    18d8:	9f 4f       	sbci	r25, 0xFF	; 255
    18da:	af 4f       	sbci	r26, 0xFF	; 255
    18dc:	b1 e0       	ldi	r27, 0x01	; 1
    18de:	3e d0       	rcall	.+124    	; 0x195c <__ultoa_invert+0x9c>
    18e0:	b4 e0       	ldi	r27, 0x04	; 4
    18e2:	3c d0       	rcall	.+120    	; 0x195c <__ultoa_invert+0x9c>
    18e4:	67 0f       	add	r22, r23
    18e6:	78 1f       	adc	r23, r24
    18e8:	89 1f       	adc	r24, r25
    18ea:	9a 1f       	adc	r25, r26
    18ec:	a1 1d       	adc	r26, r1
    18ee:	68 0f       	add	r22, r24
    18f0:	79 1f       	adc	r23, r25
    18f2:	8a 1f       	adc	r24, r26
    18f4:	91 1d       	adc	r25, r1
    18f6:	a1 1d       	adc	r26, r1
    18f8:	6a 0f       	add	r22, r26
    18fa:	71 1d       	adc	r23, r1
    18fc:	81 1d       	adc	r24, r1
    18fe:	91 1d       	adc	r25, r1
    1900:	a1 1d       	adc	r26, r1
    1902:	20 d0       	rcall	.+64     	; 0x1944 <__ultoa_invert+0x84>
    1904:	09 f4       	brne	.+2      	; 0x1908 <__ultoa_invert+0x48>
    1906:	68 94       	set
    1908:	3f 91       	pop	r19
    190a:	2a e0       	ldi	r18, 0x0A	; 10
    190c:	26 9f       	mul	r18, r22
    190e:	11 24       	eor	r1, r1
    1910:	30 19       	sub	r19, r0
    1912:	30 5d       	subi	r19, 0xD0	; 208
    1914:	31 93       	st	Z+, r19
    1916:	de f6       	brtc	.-74     	; 0x18ce <__ultoa_invert+0xe>
    1918:	cf 01       	movw	r24, r30
    191a:	08 95       	ret
    191c:	46 2f       	mov	r20, r22
    191e:	47 70       	andi	r20, 0x07	; 7
    1920:	40 5d       	subi	r20, 0xD0	; 208
    1922:	41 93       	st	Z+, r20
    1924:	b3 e0       	ldi	r27, 0x03	; 3
    1926:	0f d0       	rcall	.+30     	; 0x1946 <__ultoa_invert+0x86>
    1928:	c9 f7       	brne	.-14     	; 0x191c <__ultoa_invert+0x5c>
    192a:	f6 cf       	rjmp	.-20     	; 0x1918 <__ultoa_invert+0x58>
    192c:	46 2f       	mov	r20, r22
    192e:	4f 70       	andi	r20, 0x0F	; 15
    1930:	40 5d       	subi	r20, 0xD0	; 208
    1932:	4a 33       	cpi	r20, 0x3A	; 58
    1934:	18 f0       	brcs	.+6      	; 0x193c <__ultoa_invert+0x7c>
    1936:	49 5d       	subi	r20, 0xD9	; 217
    1938:	31 fd       	sbrc	r19, 1
    193a:	40 52       	subi	r20, 0x20	; 32
    193c:	41 93       	st	Z+, r20
    193e:	02 d0       	rcall	.+4      	; 0x1944 <__ultoa_invert+0x84>
    1940:	a9 f7       	brne	.-22     	; 0x192c <__ultoa_invert+0x6c>
    1942:	ea cf       	rjmp	.-44     	; 0x1918 <__ultoa_invert+0x58>
    1944:	b4 e0       	ldi	r27, 0x04	; 4
    1946:	a6 95       	lsr	r26
    1948:	97 95       	ror	r25
    194a:	87 95       	ror	r24
    194c:	77 95       	ror	r23
    194e:	67 95       	ror	r22
    1950:	ba 95       	dec	r27
    1952:	c9 f7       	brne	.-14     	; 0x1946 <__ultoa_invert+0x86>
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	61 05       	cpc	r22, r1
    1958:	71 05       	cpc	r23, r1
    195a:	08 95       	ret
    195c:	9b 01       	movw	r18, r22
    195e:	ac 01       	movw	r20, r24
    1960:	0a 2e       	mov	r0, r26
    1962:	06 94       	lsr	r0
    1964:	57 95       	ror	r21
    1966:	47 95       	ror	r20
    1968:	37 95       	ror	r19
    196a:	27 95       	ror	r18
    196c:	ba 95       	dec	r27
    196e:	c9 f7       	brne	.-14     	; 0x1962 <__ultoa_invert+0xa2>
    1970:	62 0f       	add	r22, r18
    1972:	73 1f       	adc	r23, r19
    1974:	84 1f       	adc	r24, r20
    1976:	95 1f       	adc	r25, r21
    1978:	a0 1d       	adc	r26, r0
    197a:	08 95       	ret

0000197c <__prologue_saves__>:
    197c:	2f 92       	push	r2
    197e:	3f 92       	push	r3
    1980:	4f 92       	push	r4
    1982:	5f 92       	push	r5
    1984:	6f 92       	push	r6
    1986:	7f 92       	push	r7
    1988:	8f 92       	push	r8
    198a:	9f 92       	push	r9
    198c:	af 92       	push	r10
    198e:	bf 92       	push	r11
    1990:	cf 92       	push	r12
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	ca 1b       	sub	r28, r26
    19a6:	db 0b       	sbc	r29, r27
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	09 94       	ijmp

000019b4 <__epilogue_restores__>:
    19b4:	2a 88       	ldd	r2, Y+18	; 0x12
    19b6:	39 88       	ldd	r3, Y+17	; 0x11
    19b8:	48 88       	ldd	r4, Y+16	; 0x10
    19ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    19bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    19be:	7d 84       	ldd	r7, Y+13	; 0x0d
    19c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    19c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    19c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    19c6:	b9 84       	ldd	r11, Y+9	; 0x09
    19c8:	c8 84       	ldd	r12, Y+8	; 0x08
    19ca:	df 80       	ldd	r13, Y+7	; 0x07
    19cc:	ee 80       	ldd	r14, Y+6	; 0x06
    19ce:	fd 80       	ldd	r15, Y+5	; 0x05
    19d0:	0c 81       	ldd	r16, Y+4	; 0x04
    19d2:	1b 81       	ldd	r17, Y+3	; 0x03
    19d4:	aa 81       	ldd	r26, Y+2	; 0x02
    19d6:	b9 81       	ldd	r27, Y+1	; 0x01
    19d8:	ce 0f       	add	r28, r30
    19da:	d1 1d       	adc	r29, r1
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	ed 01       	movw	r28, r26
    19e8:	08 95       	ret

000019ea <_exit>:
    19ea:	f8 94       	cli

000019ec <__stop_program>:
    19ec:	ff cf       	rjmp	.-2      	; 0x19ec <__stop_program>
